# Workflow Engine Kubernetes 部署配置
apiVersion: v1
kind: Namespace
metadata:
  name: workflow-engine
  labels:
    name: workflow-engine
    app.kubernetes.io/name: workflow-engine
    app.kubernetes.io/instance: production
---
# ConfigMap - 应用配置
apiVersion: v1
kind: ConfigMap
metadata:
  name: workflow-engine-config
  namespace: workflow-engine
data:
  app.yaml: |
    server:
      http:
        addr: 0.0.0.0:8080
        timeout: 30s
      log:
        level: info
        format: json
    database:
      driver: postgres
      source: "host=postgres-service port=5432 user=postgres dbname=workflow_engine sslmode=disable"
      max_open_conns: 25
      max_idle_conns: 5
      conn_max_lifetime: 300s
    redis:
      addr: redis-service:6379
      password: ""
      db: 0
    temporal:
      host: temporal-service:7233
      namespace: default
---
# Secret - 敏感信息
apiVersion: v1
kind: Secret
metadata:
  name: workflow-engine-secret
  namespace: workflow-engine
type: Opaque
data:
  # postgres://postgres:password@postgres:5432/workflow_engine?sslmode=disable
  database-url: cG9zdGdyZXM6Ly9wb3N0Z3JlczpwYXNzd29yZEBwb3N0Z3Jlczo1NDMyL3dvcmtmbG93X2VuZ2luZT9zc2xtb2RlPWRpc2FibGU=
  postgres-password: cGFzc3dvcmQ=
  redis-password: ""
---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: workflow-engine-sa
  namespace: workflow-engine
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: workflow-engine
  labels:
    app: postgres
    component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: workflow_engine
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: workflow-engine-secret
                  key: postgres-password
            - name: POSTGRES_INITDB_ARGS
              value: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: init-scripts
              mountPath: /docker-entrypoint-initdb.d
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
                - -d
                - workflow_engine
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
                - -d
                - workflow_engine
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
        - name: init-scripts
          configMap:
            name: postgres-init-scripts
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: workflow-engine
  labels:
    app: postgres
    component: database
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
  type: ClusterIP
---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: workflow-engine
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: workflow-engine
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          command:
            - redis-server
            - --appendonly
            - "yes"
            - --maxmemory
            - "256mb"
            - --maxmemory-policy
            - "allkeys-lru"
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "300m"
          volumeMounts:
            - name: redis-storage
              mountPath: /data
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: workflow-engine
  labels:
    app: redis
    component: cache
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
      protocol: TCP
  type: ClusterIP
---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: workflow-engine
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd
---
# Temporal Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: temporal
  namespace: workflow-engine
  labels:
    app: temporal
    component: workflow-engine
spec:
  replicas: 1
  selector:
    matchLabels:
      app: temporal
  template:
    metadata:
      labels:
        app: temporal
        component: workflow-engine
    spec:
      initContainers:
        - name: wait-for-postgres
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h postgres-service -p 5432 -U postgres; do
                echo "Waiting for postgres..."
                sleep 2
              done
      containers:
        - name: temporal
          image: temporalio/auto-setup:1.21
          ports:
            - containerPort: 7233
          env:
            - name: DB
              value: postgres12
            - name: DB_PORT
              value: "5432"
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PWD
              valueFrom:
                secretKeyRef:
                  name: workflow-engine-secret
                  key: postgres-password
            - name: POSTGRES_SEEDS
              value: postgres-service
            - name: DYNAMIC_CONFIG_FILE_PATH
              value: config/dynamicconfig/development-sql.yaml
            - name: TEMPORAL_CLI_ADDRESS
              value: temporal:7233
            - name: TEMPORAL_ADDRESS
              value: 0.0.0.0:7233
            - name: TEMPORAL_BROADCAST_ADDRESS
              value: temporal
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
          livenessProbe:
            exec:
              command:
                - tctl
                - --address
                - temporal:7233
                - cluster
                - health
            initialDelaySeconds: 60
            periodSeconds: 30
          readinessProbe:
            exec:
              command:
                - tctl
                - --address
                - temporal:7233
                - cluster
                - health
            initialDelaySeconds: 30
            periodSeconds: 10
---
# Temporal Service
apiVersion: v1
kind: Service
metadata:
  name: temporal-service
  namespace: workflow-engine
  labels:
    app: temporal
    component: workflow-engine
spec:
  selector:
    app: temporal
  ports:
    - port: 7233
      targetPort: 7233
      protocol: TCP
  type: ClusterIP
---
# Workflow Engine Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: workflow-engine
  namespace: workflow-engine
  labels:
    app: workflow-engine
    component: api
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: workflow-engine
      component: api
  template:
    metadata:
      labels:
        app: workflow-engine
        component: api
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: workflow-engine-sa
      initContainers:
        - name: wait-for-dependencies
          image: busybox:1.35
          command:
            - sh
            - -c
            - |
              echo "Waiting for postgres..."
              until nc -z postgres-service 5432; do sleep 2; done
              echo "Waiting for redis..."
              until nc -z redis-service 6379; do sleep 2; done
              echo "Waiting for temporal..."
              until nc -z temporal-service 7233; do sleep 2; done
              echo "All dependencies are ready!"
      containers:
        - name: workflow-engine
          image: workflow-engine:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          env:
            - name: APP_ENV
              value: production
            - name: LOG_LEVEL
              value: info
            - name: HTTP_PORT
              value: "8080"
            - name: DATABASE_HOST
              value: postgres-service
            - name: DATABASE_PORT
              value: "5432"
            - name: DATABASE_NAME
              value: workflow_engine
            - name: DATABASE_USER
              value: postgres
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: workflow-engine-secret
                  key: postgres-password
            - name: DATABASE_SSL_MODE
              value: disable
            - name: REDIS_HOST
              value: redis-service
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_DB
              value: "0"
            - name: TEMPORAL_HOST
              value: temporal-service
            - name: TEMPORAL_PORT
              value: "7233"
            - name: TEMPORAL_NAMESPACE
              value: default
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          volumeMounts:
            - name: config-volume
              mountPath: /app/configs
              readOnly: true
            - name: logs-volume
              mountPath: /app/logs
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      volumes:
        - name: config-volume
          configMap:
            name: workflow-engine-config
        - name: logs-volume
          emptyDir: {}
      securityContext:
        fsGroup: 1001
---
# Workflow Engine Service
apiVersion: v1
kind: Service
metadata:
  name: workflow-engine-service
  namespace: workflow-engine
  labels:
    app: workflow-engine
    component: api
spec:
  selector:
    app: workflow-engine
    component: api
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  type: ClusterIP
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: workflow-engine-hpa
  namespace: workflow-engine
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: workflow-engine
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: workflow-engine-ingress
  namespace: workflow-engine
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
    - hosts:
        - workflow-engine.example.com
      secretName: workflow-engine-tls
  rules:
    - host: workflow-engine.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: workflow-engine-service
                port:
                  number: 80
---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: workflow-engine-network-policy
  namespace: workflow-engine
spec:
  podSelector:
    matchLabels:
      app: workflow-engine
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8080
    - from:
        - podSelector:
            matchLabels:
              app: prometheus
      ports:
        - protocol: TCP
          port: 8080
  egress:
    - to:
        - podSelector:
            matchLabels:
              app: postgres
      ports:
        - protocol: TCP
          port: 5432
    - to:
        - podSelector:
            matchLabels:
              app: redis
      ports:
        - protocol: TCP
          port: 6379
    - to:
        - podSelector:
            matchLabels:
              app: temporal
      ports:
        - protocol: TCP
          port: 7233
