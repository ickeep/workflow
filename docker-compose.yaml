# Docker Compose 配置文件 - 工作流引擎完整生产环境
version: "3.8"

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: workflow-postgres
    environment:
      POSTGRES_DB: workflow_engine
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d/migrations
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
    networks:
      - workflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d workflow_engine"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: workflow-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - workflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.3"
        reservations:
          memory: 256M
          cpus: "0.1"

  # Temporal Server
  temporal:
    image: temporalio/auto-setup:1.21
    container_name: workflow-temporal
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PWD=postgres
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - TEMPORAL_CLI_ADDRESS=temporal:7233
      - TEMPORAL_ADDRESS=0.0.0.0:7233
      - TEMPORAL_BROADCAST_ADDRESS=temporal
    ports:
      - "7233:7233"
    networks:
      - workflow-network
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "cluster", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"

  # Temporal Web UI
  temporal-web:
    image: temporalio/web:1.21
    container_name: workflow-temporal-web
    depends_on:
      temporal:
        condition: service_healthy
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000,http://localhost:8088
    ports:
      - "8088:8088"
    networks:
      - workflow-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8088",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # 工作流引擎应用
  workflow-engine:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: workflow-engine-app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      temporal:
        condition: service_healthy
    environment:
      - APP_ENV=production
      - LOG_LEVEL=info
      - HTTP_PORT=8080
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=workflow_engine
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_SSL_MODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - TEMPORAL_HOST=temporal
      - TEMPORAL_PORT=7233
      - TEMPORAL_NAMESPACE=default
    ports:
      - "8080:8080"
    volumes:
      - ./configs:/app/configs:ro
      - ./workflows:/app/workflows:ro
      - app_logs:/app/logs
    networks:
      - workflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: workflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - workflow-network
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=15d"
      - "--web.enable-lifecycle"
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana 仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: workflow-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - workflow-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Jaeger 分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: workflow-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - workflow-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: workflow-nginx
    depends_on:
      - workflow-engine
      - temporal-web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    networks:
      - workflow-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  app_logs:
  nginx_logs:

networks:
  workflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
