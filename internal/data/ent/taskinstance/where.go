// Code generated by ent, DO NOT EDIT.

package taskinstance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldDescription, v))
}

// TaskDefinitionKey applies equality check predicate on the "task_definition_key" field. It's identical to TaskDefinitionKeyEQ.
func TaskDefinitionKey(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldTaskDefinitionKey, v))
}

// Assignee applies equality check predicate on the "assignee" field. It's identical to AssigneeEQ.
func Assignee(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldAssignee, v))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldOwner, v))
}

// Delegation applies equality check predicate on the "delegation" field. It's identical to DelegationEQ.
func Delegation(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldDelegation, v))
}

// Priority applies equality check predicate on the "priority" field. It's identical to PriorityEQ.
func Priority(v int32) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldPriority, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldCreateTime, v))
}

// DueDate applies equality check predicate on the "due_date" field. It's identical to DueDateEQ.
func DueDate(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldDueDate, v))
}

// FollowUpDate applies equality check predicate on the "follow_up_date" field. It's identical to FollowUpDateEQ.
func FollowUpDate(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldFollowUpDate, v))
}

// FormKey applies equality check predicate on the "form_key" field. It's identical to FormKeyEQ.
func FormKey(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldFormKey, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldCategory, v))
}

// ParentTaskID applies equality check predicate on the "parent_task_id" field. It's identical to ParentTaskIDEQ.
func ParentTaskID(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldParentTaskID, v))
}

// ExecutionID applies equality check predicate on the "execution_id" field. It's identical to ExecutionIDEQ.
func ExecutionID(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldExecutionID, v))
}

// ProcessInstanceID applies equality check predicate on the "process_instance_id" field. It's identical to ProcessInstanceIDEQ.
func ProcessInstanceID(v int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldProcessInstanceID, v))
}

// ProcessDefinitionID applies equality check predicate on the "process_definition_id" field. It's identical to ProcessDefinitionIDEQ.
func ProcessDefinitionID(v int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldProcessDefinitionID, v))
}

// ProcessDefinitionKey applies equality check predicate on the "process_definition_key" field. It's identical to ProcessDefinitionKeyEQ.
func ProcessDefinitionKey(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldProcessDefinitionKey, v))
}

// CaseExecutionID applies equality check predicate on the "case_execution_id" field. It's identical to CaseExecutionIDEQ.
func CaseExecutionID(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldCaseExecutionID, v))
}

// CaseInstanceID applies equality check predicate on the "case_instance_id" field. It's identical to CaseInstanceIDEQ.
func CaseInstanceID(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldCaseInstanceID, v))
}

// CaseDefinitionID applies equality check predicate on the "case_definition_id" field. It's identical to CaseDefinitionIDEQ.
func CaseDefinitionID(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldCaseDefinitionID, v))
}

// Suspended applies equality check predicate on the "suspended" field. It's identical to SuspendedEQ.
func Suspended(v bool) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldSuspended, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContainsFold(FieldDescription, v))
}

// TaskDefinitionKeyEQ applies the EQ predicate on the "task_definition_key" field.
func TaskDefinitionKeyEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldTaskDefinitionKey, v))
}

// TaskDefinitionKeyNEQ applies the NEQ predicate on the "task_definition_key" field.
func TaskDefinitionKeyNEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldTaskDefinitionKey, v))
}

// TaskDefinitionKeyIn applies the In predicate on the "task_definition_key" field.
func TaskDefinitionKeyIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldTaskDefinitionKey, vs...))
}

// TaskDefinitionKeyNotIn applies the NotIn predicate on the "task_definition_key" field.
func TaskDefinitionKeyNotIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldTaskDefinitionKey, vs...))
}

// TaskDefinitionKeyGT applies the GT predicate on the "task_definition_key" field.
func TaskDefinitionKeyGT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldTaskDefinitionKey, v))
}

// TaskDefinitionKeyGTE applies the GTE predicate on the "task_definition_key" field.
func TaskDefinitionKeyGTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldTaskDefinitionKey, v))
}

// TaskDefinitionKeyLT applies the LT predicate on the "task_definition_key" field.
func TaskDefinitionKeyLT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldTaskDefinitionKey, v))
}

// TaskDefinitionKeyLTE applies the LTE predicate on the "task_definition_key" field.
func TaskDefinitionKeyLTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldTaskDefinitionKey, v))
}

// TaskDefinitionKeyContains applies the Contains predicate on the "task_definition_key" field.
func TaskDefinitionKeyContains(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContains(FieldTaskDefinitionKey, v))
}

// TaskDefinitionKeyHasPrefix applies the HasPrefix predicate on the "task_definition_key" field.
func TaskDefinitionKeyHasPrefix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasPrefix(FieldTaskDefinitionKey, v))
}

// TaskDefinitionKeyHasSuffix applies the HasSuffix predicate on the "task_definition_key" field.
func TaskDefinitionKeyHasSuffix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasSuffix(FieldTaskDefinitionKey, v))
}

// TaskDefinitionKeyEqualFold applies the EqualFold predicate on the "task_definition_key" field.
func TaskDefinitionKeyEqualFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEqualFold(FieldTaskDefinitionKey, v))
}

// TaskDefinitionKeyContainsFold applies the ContainsFold predicate on the "task_definition_key" field.
func TaskDefinitionKeyContainsFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContainsFold(FieldTaskDefinitionKey, v))
}

// AssigneeEQ applies the EQ predicate on the "assignee" field.
func AssigneeEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldAssignee, v))
}

// AssigneeNEQ applies the NEQ predicate on the "assignee" field.
func AssigneeNEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldAssignee, v))
}

// AssigneeIn applies the In predicate on the "assignee" field.
func AssigneeIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldAssignee, vs...))
}

// AssigneeNotIn applies the NotIn predicate on the "assignee" field.
func AssigneeNotIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldAssignee, vs...))
}

// AssigneeGT applies the GT predicate on the "assignee" field.
func AssigneeGT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldAssignee, v))
}

// AssigneeGTE applies the GTE predicate on the "assignee" field.
func AssigneeGTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldAssignee, v))
}

// AssigneeLT applies the LT predicate on the "assignee" field.
func AssigneeLT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldAssignee, v))
}

// AssigneeLTE applies the LTE predicate on the "assignee" field.
func AssigneeLTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldAssignee, v))
}

// AssigneeContains applies the Contains predicate on the "assignee" field.
func AssigneeContains(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContains(FieldAssignee, v))
}

// AssigneeHasPrefix applies the HasPrefix predicate on the "assignee" field.
func AssigneeHasPrefix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasPrefix(FieldAssignee, v))
}

// AssigneeHasSuffix applies the HasSuffix predicate on the "assignee" field.
func AssigneeHasSuffix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasSuffix(FieldAssignee, v))
}

// AssigneeIsNil applies the IsNil predicate on the "assignee" field.
func AssigneeIsNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIsNull(FieldAssignee))
}

// AssigneeNotNil applies the NotNil predicate on the "assignee" field.
func AssigneeNotNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotNull(FieldAssignee))
}

// AssigneeEqualFold applies the EqualFold predicate on the "assignee" field.
func AssigneeEqualFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEqualFold(FieldAssignee, v))
}

// AssigneeContainsFold applies the ContainsFold predicate on the "assignee" field.
func AssigneeContainsFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContainsFold(FieldAssignee, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldOwner, v))
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContains(FieldOwner, v))
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasPrefix(FieldOwner, v))
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasSuffix(FieldOwner, v))
}

// OwnerIsNil applies the IsNil predicate on the "owner" field.
func OwnerIsNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIsNull(FieldOwner))
}

// OwnerNotNil applies the NotNil predicate on the "owner" field.
func OwnerNotNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotNull(FieldOwner))
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEqualFold(FieldOwner, v))
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContainsFold(FieldOwner, v))
}

// DelegationEQ applies the EQ predicate on the "delegation" field.
func DelegationEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldDelegation, v))
}

// DelegationNEQ applies the NEQ predicate on the "delegation" field.
func DelegationNEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldDelegation, v))
}

// DelegationIn applies the In predicate on the "delegation" field.
func DelegationIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldDelegation, vs...))
}

// DelegationNotIn applies the NotIn predicate on the "delegation" field.
func DelegationNotIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldDelegation, vs...))
}

// DelegationGT applies the GT predicate on the "delegation" field.
func DelegationGT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldDelegation, v))
}

// DelegationGTE applies the GTE predicate on the "delegation" field.
func DelegationGTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldDelegation, v))
}

// DelegationLT applies the LT predicate on the "delegation" field.
func DelegationLT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldDelegation, v))
}

// DelegationLTE applies the LTE predicate on the "delegation" field.
func DelegationLTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldDelegation, v))
}

// DelegationContains applies the Contains predicate on the "delegation" field.
func DelegationContains(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContains(FieldDelegation, v))
}

// DelegationHasPrefix applies the HasPrefix predicate on the "delegation" field.
func DelegationHasPrefix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasPrefix(FieldDelegation, v))
}

// DelegationHasSuffix applies the HasSuffix predicate on the "delegation" field.
func DelegationHasSuffix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasSuffix(FieldDelegation, v))
}

// DelegationIsNil applies the IsNil predicate on the "delegation" field.
func DelegationIsNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIsNull(FieldDelegation))
}

// DelegationNotNil applies the NotNil predicate on the "delegation" field.
func DelegationNotNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotNull(FieldDelegation))
}

// DelegationEqualFold applies the EqualFold predicate on the "delegation" field.
func DelegationEqualFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEqualFold(FieldDelegation, v))
}

// DelegationContainsFold applies the ContainsFold predicate on the "delegation" field.
func DelegationContainsFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContainsFold(FieldDelegation, v))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v int32) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v int32) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...int32) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...int32) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldPriority, vs...))
}

// PriorityGT applies the GT predicate on the "priority" field.
func PriorityGT(v int32) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldPriority, v))
}

// PriorityGTE applies the GTE predicate on the "priority" field.
func PriorityGTE(v int32) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldPriority, v))
}

// PriorityLT applies the LT predicate on the "priority" field.
func PriorityLT(v int32) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldPriority, v))
}

// PriorityLTE applies the LTE predicate on the "priority" field.
func PriorityLTE(v int32) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldPriority, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldCreateTime, v))
}

// DueDateEQ applies the EQ predicate on the "due_date" field.
func DueDateEQ(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldDueDate, v))
}

// DueDateNEQ applies the NEQ predicate on the "due_date" field.
func DueDateNEQ(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldDueDate, v))
}

// DueDateIn applies the In predicate on the "due_date" field.
func DueDateIn(vs ...time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldDueDate, vs...))
}

// DueDateNotIn applies the NotIn predicate on the "due_date" field.
func DueDateNotIn(vs ...time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldDueDate, vs...))
}

// DueDateGT applies the GT predicate on the "due_date" field.
func DueDateGT(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldDueDate, v))
}

// DueDateGTE applies the GTE predicate on the "due_date" field.
func DueDateGTE(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldDueDate, v))
}

// DueDateLT applies the LT predicate on the "due_date" field.
func DueDateLT(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldDueDate, v))
}

// DueDateLTE applies the LTE predicate on the "due_date" field.
func DueDateLTE(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldDueDate, v))
}

// DueDateIsNil applies the IsNil predicate on the "due_date" field.
func DueDateIsNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIsNull(FieldDueDate))
}

// DueDateNotNil applies the NotNil predicate on the "due_date" field.
func DueDateNotNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotNull(FieldDueDate))
}

// FollowUpDateEQ applies the EQ predicate on the "follow_up_date" field.
func FollowUpDateEQ(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldFollowUpDate, v))
}

// FollowUpDateNEQ applies the NEQ predicate on the "follow_up_date" field.
func FollowUpDateNEQ(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldFollowUpDate, v))
}

// FollowUpDateIn applies the In predicate on the "follow_up_date" field.
func FollowUpDateIn(vs ...time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldFollowUpDate, vs...))
}

// FollowUpDateNotIn applies the NotIn predicate on the "follow_up_date" field.
func FollowUpDateNotIn(vs ...time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldFollowUpDate, vs...))
}

// FollowUpDateGT applies the GT predicate on the "follow_up_date" field.
func FollowUpDateGT(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldFollowUpDate, v))
}

// FollowUpDateGTE applies the GTE predicate on the "follow_up_date" field.
func FollowUpDateGTE(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldFollowUpDate, v))
}

// FollowUpDateLT applies the LT predicate on the "follow_up_date" field.
func FollowUpDateLT(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldFollowUpDate, v))
}

// FollowUpDateLTE applies the LTE predicate on the "follow_up_date" field.
func FollowUpDateLTE(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldFollowUpDate, v))
}

// FollowUpDateIsNil applies the IsNil predicate on the "follow_up_date" field.
func FollowUpDateIsNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIsNull(FieldFollowUpDate))
}

// FollowUpDateNotNil applies the NotNil predicate on the "follow_up_date" field.
func FollowUpDateNotNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotNull(FieldFollowUpDate))
}

// FormKeyEQ applies the EQ predicate on the "form_key" field.
func FormKeyEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldFormKey, v))
}

// FormKeyNEQ applies the NEQ predicate on the "form_key" field.
func FormKeyNEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldFormKey, v))
}

// FormKeyIn applies the In predicate on the "form_key" field.
func FormKeyIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldFormKey, vs...))
}

// FormKeyNotIn applies the NotIn predicate on the "form_key" field.
func FormKeyNotIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldFormKey, vs...))
}

// FormKeyGT applies the GT predicate on the "form_key" field.
func FormKeyGT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldFormKey, v))
}

// FormKeyGTE applies the GTE predicate on the "form_key" field.
func FormKeyGTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldFormKey, v))
}

// FormKeyLT applies the LT predicate on the "form_key" field.
func FormKeyLT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldFormKey, v))
}

// FormKeyLTE applies the LTE predicate on the "form_key" field.
func FormKeyLTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldFormKey, v))
}

// FormKeyContains applies the Contains predicate on the "form_key" field.
func FormKeyContains(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContains(FieldFormKey, v))
}

// FormKeyHasPrefix applies the HasPrefix predicate on the "form_key" field.
func FormKeyHasPrefix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasPrefix(FieldFormKey, v))
}

// FormKeyHasSuffix applies the HasSuffix predicate on the "form_key" field.
func FormKeyHasSuffix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasSuffix(FieldFormKey, v))
}

// FormKeyIsNil applies the IsNil predicate on the "form_key" field.
func FormKeyIsNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIsNull(FieldFormKey))
}

// FormKeyNotNil applies the NotNil predicate on the "form_key" field.
func FormKeyNotNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotNull(FieldFormKey))
}

// FormKeyEqualFold applies the EqualFold predicate on the "form_key" field.
func FormKeyEqualFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEqualFold(FieldFormKey, v))
}

// FormKeyContainsFold applies the ContainsFold predicate on the "form_key" field.
func FormKeyContainsFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContainsFold(FieldFormKey, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContainsFold(FieldCategory, v))
}

// ParentTaskIDEQ applies the EQ predicate on the "parent_task_id" field.
func ParentTaskIDEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldParentTaskID, v))
}

// ParentTaskIDNEQ applies the NEQ predicate on the "parent_task_id" field.
func ParentTaskIDNEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldParentTaskID, v))
}

// ParentTaskIDIn applies the In predicate on the "parent_task_id" field.
func ParentTaskIDIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldParentTaskID, vs...))
}

// ParentTaskIDNotIn applies the NotIn predicate on the "parent_task_id" field.
func ParentTaskIDNotIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldParentTaskID, vs...))
}

// ParentTaskIDGT applies the GT predicate on the "parent_task_id" field.
func ParentTaskIDGT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldParentTaskID, v))
}

// ParentTaskIDGTE applies the GTE predicate on the "parent_task_id" field.
func ParentTaskIDGTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldParentTaskID, v))
}

// ParentTaskIDLT applies the LT predicate on the "parent_task_id" field.
func ParentTaskIDLT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldParentTaskID, v))
}

// ParentTaskIDLTE applies the LTE predicate on the "parent_task_id" field.
func ParentTaskIDLTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldParentTaskID, v))
}

// ParentTaskIDContains applies the Contains predicate on the "parent_task_id" field.
func ParentTaskIDContains(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContains(FieldParentTaskID, v))
}

// ParentTaskIDHasPrefix applies the HasPrefix predicate on the "parent_task_id" field.
func ParentTaskIDHasPrefix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasPrefix(FieldParentTaskID, v))
}

// ParentTaskIDHasSuffix applies the HasSuffix predicate on the "parent_task_id" field.
func ParentTaskIDHasSuffix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasSuffix(FieldParentTaskID, v))
}

// ParentTaskIDIsNil applies the IsNil predicate on the "parent_task_id" field.
func ParentTaskIDIsNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIsNull(FieldParentTaskID))
}

// ParentTaskIDNotNil applies the NotNil predicate on the "parent_task_id" field.
func ParentTaskIDNotNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotNull(FieldParentTaskID))
}

// ParentTaskIDEqualFold applies the EqualFold predicate on the "parent_task_id" field.
func ParentTaskIDEqualFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEqualFold(FieldParentTaskID, v))
}

// ParentTaskIDContainsFold applies the ContainsFold predicate on the "parent_task_id" field.
func ParentTaskIDContainsFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContainsFold(FieldParentTaskID, v))
}

// ExecutionIDEQ applies the EQ predicate on the "execution_id" field.
func ExecutionIDEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldExecutionID, v))
}

// ExecutionIDNEQ applies the NEQ predicate on the "execution_id" field.
func ExecutionIDNEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldExecutionID, v))
}

// ExecutionIDIn applies the In predicate on the "execution_id" field.
func ExecutionIDIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldExecutionID, vs...))
}

// ExecutionIDNotIn applies the NotIn predicate on the "execution_id" field.
func ExecutionIDNotIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldExecutionID, vs...))
}

// ExecutionIDGT applies the GT predicate on the "execution_id" field.
func ExecutionIDGT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldExecutionID, v))
}

// ExecutionIDGTE applies the GTE predicate on the "execution_id" field.
func ExecutionIDGTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldExecutionID, v))
}

// ExecutionIDLT applies the LT predicate on the "execution_id" field.
func ExecutionIDLT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldExecutionID, v))
}

// ExecutionIDLTE applies the LTE predicate on the "execution_id" field.
func ExecutionIDLTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldExecutionID, v))
}

// ExecutionIDContains applies the Contains predicate on the "execution_id" field.
func ExecutionIDContains(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContains(FieldExecutionID, v))
}

// ExecutionIDHasPrefix applies the HasPrefix predicate on the "execution_id" field.
func ExecutionIDHasPrefix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasPrefix(FieldExecutionID, v))
}

// ExecutionIDHasSuffix applies the HasSuffix predicate on the "execution_id" field.
func ExecutionIDHasSuffix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasSuffix(FieldExecutionID, v))
}

// ExecutionIDIsNil applies the IsNil predicate on the "execution_id" field.
func ExecutionIDIsNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIsNull(FieldExecutionID))
}

// ExecutionIDNotNil applies the NotNil predicate on the "execution_id" field.
func ExecutionIDNotNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotNull(FieldExecutionID))
}

// ExecutionIDEqualFold applies the EqualFold predicate on the "execution_id" field.
func ExecutionIDEqualFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEqualFold(FieldExecutionID, v))
}

// ExecutionIDContainsFold applies the ContainsFold predicate on the "execution_id" field.
func ExecutionIDContainsFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContainsFold(FieldExecutionID, v))
}

// ProcessInstanceIDEQ applies the EQ predicate on the "process_instance_id" field.
func ProcessInstanceIDEQ(v int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldProcessInstanceID, v))
}

// ProcessInstanceIDNEQ applies the NEQ predicate on the "process_instance_id" field.
func ProcessInstanceIDNEQ(v int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldProcessInstanceID, v))
}

// ProcessInstanceIDIn applies the In predicate on the "process_instance_id" field.
func ProcessInstanceIDIn(vs ...int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldProcessInstanceID, vs...))
}

// ProcessInstanceIDNotIn applies the NotIn predicate on the "process_instance_id" field.
func ProcessInstanceIDNotIn(vs ...int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldProcessInstanceID, vs...))
}

// ProcessInstanceIDGT applies the GT predicate on the "process_instance_id" field.
func ProcessInstanceIDGT(v int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldProcessInstanceID, v))
}

// ProcessInstanceIDGTE applies the GTE predicate on the "process_instance_id" field.
func ProcessInstanceIDGTE(v int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldProcessInstanceID, v))
}

// ProcessInstanceIDLT applies the LT predicate on the "process_instance_id" field.
func ProcessInstanceIDLT(v int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldProcessInstanceID, v))
}

// ProcessInstanceIDLTE applies the LTE predicate on the "process_instance_id" field.
func ProcessInstanceIDLTE(v int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldProcessInstanceID, v))
}

// ProcessDefinitionIDEQ applies the EQ predicate on the "process_definition_id" field.
func ProcessDefinitionIDEQ(v int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldProcessDefinitionID, v))
}

// ProcessDefinitionIDNEQ applies the NEQ predicate on the "process_definition_id" field.
func ProcessDefinitionIDNEQ(v int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldProcessDefinitionID, v))
}

// ProcessDefinitionIDIn applies the In predicate on the "process_definition_id" field.
func ProcessDefinitionIDIn(vs ...int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldProcessDefinitionID, vs...))
}

// ProcessDefinitionIDNotIn applies the NotIn predicate on the "process_definition_id" field.
func ProcessDefinitionIDNotIn(vs ...int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldProcessDefinitionID, vs...))
}

// ProcessDefinitionIDGT applies the GT predicate on the "process_definition_id" field.
func ProcessDefinitionIDGT(v int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldProcessDefinitionID, v))
}

// ProcessDefinitionIDGTE applies the GTE predicate on the "process_definition_id" field.
func ProcessDefinitionIDGTE(v int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldProcessDefinitionID, v))
}

// ProcessDefinitionIDLT applies the LT predicate on the "process_definition_id" field.
func ProcessDefinitionIDLT(v int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldProcessDefinitionID, v))
}

// ProcessDefinitionIDLTE applies the LTE predicate on the "process_definition_id" field.
func ProcessDefinitionIDLTE(v int64) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldProcessDefinitionID, v))
}

// ProcessDefinitionKeyEQ applies the EQ predicate on the "process_definition_key" field.
func ProcessDefinitionKeyEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldProcessDefinitionKey, v))
}

// ProcessDefinitionKeyNEQ applies the NEQ predicate on the "process_definition_key" field.
func ProcessDefinitionKeyNEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldProcessDefinitionKey, v))
}

// ProcessDefinitionKeyIn applies the In predicate on the "process_definition_key" field.
func ProcessDefinitionKeyIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldProcessDefinitionKey, vs...))
}

// ProcessDefinitionKeyNotIn applies the NotIn predicate on the "process_definition_key" field.
func ProcessDefinitionKeyNotIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldProcessDefinitionKey, vs...))
}

// ProcessDefinitionKeyGT applies the GT predicate on the "process_definition_key" field.
func ProcessDefinitionKeyGT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldProcessDefinitionKey, v))
}

// ProcessDefinitionKeyGTE applies the GTE predicate on the "process_definition_key" field.
func ProcessDefinitionKeyGTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldProcessDefinitionKey, v))
}

// ProcessDefinitionKeyLT applies the LT predicate on the "process_definition_key" field.
func ProcessDefinitionKeyLT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldProcessDefinitionKey, v))
}

// ProcessDefinitionKeyLTE applies the LTE predicate on the "process_definition_key" field.
func ProcessDefinitionKeyLTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldProcessDefinitionKey, v))
}

// ProcessDefinitionKeyContains applies the Contains predicate on the "process_definition_key" field.
func ProcessDefinitionKeyContains(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContains(FieldProcessDefinitionKey, v))
}

// ProcessDefinitionKeyHasPrefix applies the HasPrefix predicate on the "process_definition_key" field.
func ProcessDefinitionKeyHasPrefix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasPrefix(FieldProcessDefinitionKey, v))
}

// ProcessDefinitionKeyHasSuffix applies the HasSuffix predicate on the "process_definition_key" field.
func ProcessDefinitionKeyHasSuffix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasSuffix(FieldProcessDefinitionKey, v))
}

// ProcessDefinitionKeyEqualFold applies the EqualFold predicate on the "process_definition_key" field.
func ProcessDefinitionKeyEqualFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEqualFold(FieldProcessDefinitionKey, v))
}

// ProcessDefinitionKeyContainsFold applies the ContainsFold predicate on the "process_definition_key" field.
func ProcessDefinitionKeyContainsFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContainsFold(FieldProcessDefinitionKey, v))
}

// CaseExecutionIDEQ applies the EQ predicate on the "case_execution_id" field.
func CaseExecutionIDEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldCaseExecutionID, v))
}

// CaseExecutionIDNEQ applies the NEQ predicate on the "case_execution_id" field.
func CaseExecutionIDNEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldCaseExecutionID, v))
}

// CaseExecutionIDIn applies the In predicate on the "case_execution_id" field.
func CaseExecutionIDIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldCaseExecutionID, vs...))
}

// CaseExecutionIDNotIn applies the NotIn predicate on the "case_execution_id" field.
func CaseExecutionIDNotIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldCaseExecutionID, vs...))
}

// CaseExecutionIDGT applies the GT predicate on the "case_execution_id" field.
func CaseExecutionIDGT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldCaseExecutionID, v))
}

// CaseExecutionIDGTE applies the GTE predicate on the "case_execution_id" field.
func CaseExecutionIDGTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldCaseExecutionID, v))
}

// CaseExecutionIDLT applies the LT predicate on the "case_execution_id" field.
func CaseExecutionIDLT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldCaseExecutionID, v))
}

// CaseExecutionIDLTE applies the LTE predicate on the "case_execution_id" field.
func CaseExecutionIDLTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldCaseExecutionID, v))
}

// CaseExecutionIDContains applies the Contains predicate on the "case_execution_id" field.
func CaseExecutionIDContains(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContains(FieldCaseExecutionID, v))
}

// CaseExecutionIDHasPrefix applies the HasPrefix predicate on the "case_execution_id" field.
func CaseExecutionIDHasPrefix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasPrefix(FieldCaseExecutionID, v))
}

// CaseExecutionIDHasSuffix applies the HasSuffix predicate on the "case_execution_id" field.
func CaseExecutionIDHasSuffix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasSuffix(FieldCaseExecutionID, v))
}

// CaseExecutionIDIsNil applies the IsNil predicate on the "case_execution_id" field.
func CaseExecutionIDIsNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIsNull(FieldCaseExecutionID))
}

// CaseExecutionIDNotNil applies the NotNil predicate on the "case_execution_id" field.
func CaseExecutionIDNotNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotNull(FieldCaseExecutionID))
}

// CaseExecutionIDEqualFold applies the EqualFold predicate on the "case_execution_id" field.
func CaseExecutionIDEqualFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEqualFold(FieldCaseExecutionID, v))
}

// CaseExecutionIDContainsFold applies the ContainsFold predicate on the "case_execution_id" field.
func CaseExecutionIDContainsFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContainsFold(FieldCaseExecutionID, v))
}

// CaseInstanceIDEQ applies the EQ predicate on the "case_instance_id" field.
func CaseInstanceIDEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldCaseInstanceID, v))
}

// CaseInstanceIDNEQ applies the NEQ predicate on the "case_instance_id" field.
func CaseInstanceIDNEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldCaseInstanceID, v))
}

// CaseInstanceIDIn applies the In predicate on the "case_instance_id" field.
func CaseInstanceIDIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldCaseInstanceID, vs...))
}

// CaseInstanceIDNotIn applies the NotIn predicate on the "case_instance_id" field.
func CaseInstanceIDNotIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldCaseInstanceID, vs...))
}

// CaseInstanceIDGT applies the GT predicate on the "case_instance_id" field.
func CaseInstanceIDGT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldCaseInstanceID, v))
}

// CaseInstanceIDGTE applies the GTE predicate on the "case_instance_id" field.
func CaseInstanceIDGTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldCaseInstanceID, v))
}

// CaseInstanceIDLT applies the LT predicate on the "case_instance_id" field.
func CaseInstanceIDLT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldCaseInstanceID, v))
}

// CaseInstanceIDLTE applies the LTE predicate on the "case_instance_id" field.
func CaseInstanceIDLTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldCaseInstanceID, v))
}

// CaseInstanceIDContains applies the Contains predicate on the "case_instance_id" field.
func CaseInstanceIDContains(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContains(FieldCaseInstanceID, v))
}

// CaseInstanceIDHasPrefix applies the HasPrefix predicate on the "case_instance_id" field.
func CaseInstanceIDHasPrefix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasPrefix(FieldCaseInstanceID, v))
}

// CaseInstanceIDHasSuffix applies the HasSuffix predicate on the "case_instance_id" field.
func CaseInstanceIDHasSuffix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasSuffix(FieldCaseInstanceID, v))
}

// CaseInstanceIDIsNil applies the IsNil predicate on the "case_instance_id" field.
func CaseInstanceIDIsNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIsNull(FieldCaseInstanceID))
}

// CaseInstanceIDNotNil applies the NotNil predicate on the "case_instance_id" field.
func CaseInstanceIDNotNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotNull(FieldCaseInstanceID))
}

// CaseInstanceIDEqualFold applies the EqualFold predicate on the "case_instance_id" field.
func CaseInstanceIDEqualFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEqualFold(FieldCaseInstanceID, v))
}

// CaseInstanceIDContainsFold applies the ContainsFold predicate on the "case_instance_id" field.
func CaseInstanceIDContainsFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContainsFold(FieldCaseInstanceID, v))
}

// CaseDefinitionIDEQ applies the EQ predicate on the "case_definition_id" field.
func CaseDefinitionIDEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldCaseDefinitionID, v))
}

// CaseDefinitionIDNEQ applies the NEQ predicate on the "case_definition_id" field.
func CaseDefinitionIDNEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldCaseDefinitionID, v))
}

// CaseDefinitionIDIn applies the In predicate on the "case_definition_id" field.
func CaseDefinitionIDIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldCaseDefinitionID, vs...))
}

// CaseDefinitionIDNotIn applies the NotIn predicate on the "case_definition_id" field.
func CaseDefinitionIDNotIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldCaseDefinitionID, vs...))
}

// CaseDefinitionIDGT applies the GT predicate on the "case_definition_id" field.
func CaseDefinitionIDGT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldCaseDefinitionID, v))
}

// CaseDefinitionIDGTE applies the GTE predicate on the "case_definition_id" field.
func CaseDefinitionIDGTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldCaseDefinitionID, v))
}

// CaseDefinitionIDLT applies the LT predicate on the "case_definition_id" field.
func CaseDefinitionIDLT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldCaseDefinitionID, v))
}

// CaseDefinitionIDLTE applies the LTE predicate on the "case_definition_id" field.
func CaseDefinitionIDLTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldCaseDefinitionID, v))
}

// CaseDefinitionIDContains applies the Contains predicate on the "case_definition_id" field.
func CaseDefinitionIDContains(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContains(FieldCaseDefinitionID, v))
}

// CaseDefinitionIDHasPrefix applies the HasPrefix predicate on the "case_definition_id" field.
func CaseDefinitionIDHasPrefix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasPrefix(FieldCaseDefinitionID, v))
}

// CaseDefinitionIDHasSuffix applies the HasSuffix predicate on the "case_definition_id" field.
func CaseDefinitionIDHasSuffix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasSuffix(FieldCaseDefinitionID, v))
}

// CaseDefinitionIDIsNil applies the IsNil predicate on the "case_definition_id" field.
func CaseDefinitionIDIsNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIsNull(FieldCaseDefinitionID))
}

// CaseDefinitionIDNotNil applies the NotNil predicate on the "case_definition_id" field.
func CaseDefinitionIDNotNil() predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotNull(FieldCaseDefinitionID))
}

// CaseDefinitionIDEqualFold applies the EqualFold predicate on the "case_definition_id" field.
func CaseDefinitionIDEqualFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEqualFold(FieldCaseDefinitionID, v))
}

// CaseDefinitionIDContainsFold applies the ContainsFold predicate on the "case_definition_id" field.
func CaseDefinitionIDContainsFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContainsFold(FieldCaseDefinitionID, v))
}

// SuspendedEQ applies the EQ predicate on the "suspended" field.
func SuspendedEQ(v bool) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldSuspended, v))
}

// SuspendedNEQ applies the NEQ predicate on the "suspended" field.
func SuspendedNEQ(v bool) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldSuspended, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldContainsFold(FieldTenantID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TaskInstance {
	return predicate.TaskInstance(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TaskInstance) predicate.TaskInstance {
	return predicate.TaskInstance(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TaskInstance) predicate.TaskInstance {
	return predicate.TaskInstance(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TaskInstance) predicate.TaskInstance {
	return predicate.TaskInstance(sql.NotPredicates(p))
}
