// Code generated by ent, DO NOT EDIT.

package taskinstance

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the taskinstance type in the database.
	Label = "task_instance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTaskDefinitionKey holds the string denoting the task_definition_key field in the database.
	FieldTaskDefinitionKey = "task_definition_key"
	// FieldAssignee holds the string denoting the assignee field in the database.
	FieldAssignee = "assignee"
	// FieldOwner holds the string denoting the owner field in the database.
	FieldOwner = "owner"
	// FieldDelegation holds the string denoting the delegation field in the database.
	FieldDelegation = "delegation"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldDueDate holds the string denoting the due_date field in the database.
	FieldDueDate = "due_date"
	// FieldFollowUpDate holds the string denoting the follow_up_date field in the database.
	FieldFollowUpDate = "follow_up_date"
	// FieldFormKey holds the string denoting the form_key field in the database.
	FieldFormKey = "form_key"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldParentTaskID holds the string denoting the parent_task_id field in the database.
	FieldParentTaskID = "parent_task_id"
	// FieldExecutionID holds the string denoting the execution_id field in the database.
	FieldExecutionID = "execution_id"
	// FieldProcessInstanceID holds the string denoting the process_instance_id field in the database.
	FieldProcessInstanceID = "process_instance_id"
	// FieldProcessDefinitionID holds the string denoting the process_definition_id field in the database.
	FieldProcessDefinitionID = "process_definition_id"
	// FieldProcessDefinitionKey holds the string denoting the process_definition_key field in the database.
	FieldProcessDefinitionKey = "process_definition_key"
	// FieldCaseExecutionID holds the string denoting the case_execution_id field in the database.
	FieldCaseExecutionID = "case_execution_id"
	// FieldCaseInstanceID holds the string denoting the case_instance_id field in the database.
	FieldCaseInstanceID = "case_instance_id"
	// FieldCaseDefinitionID holds the string denoting the case_definition_id field in the database.
	FieldCaseDefinitionID = "case_definition_id"
	// FieldSuspended holds the string denoting the suspended field in the database.
	FieldSuspended = "suspended"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the taskinstance in the database.
	Table = "task_instances"
)

// Columns holds all SQL columns for taskinstance fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldTaskDefinitionKey,
	FieldAssignee,
	FieldOwner,
	FieldDelegation,
	FieldPriority,
	FieldCreateTime,
	FieldDueDate,
	FieldFollowUpDate,
	FieldFormKey,
	FieldCategory,
	FieldParentTaskID,
	FieldExecutionID,
	FieldProcessInstanceID,
	FieldProcessDefinitionID,
	FieldProcessDefinitionKey,
	FieldCaseExecutionID,
	FieldCaseInstanceID,
	FieldCaseDefinitionID,
	FieldSuspended,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// TaskDefinitionKeyValidator is a validator for the "task_definition_key" field. It is called by the builders before save.
	TaskDefinitionKeyValidator func(string) error
	// AssigneeValidator is a validator for the "assignee" field. It is called by the builders before save.
	AssigneeValidator func(string) error
	// OwnerValidator is a validator for the "owner" field. It is called by the builders before save.
	OwnerValidator func(string) error
	// DelegationValidator is a validator for the "delegation" field. It is called by the builders before save.
	DelegationValidator func(string) error
	// DefaultPriority holds the default value on creation for the "priority" field.
	DefaultPriority int32
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// FormKeyValidator is a validator for the "form_key" field. It is called by the builders before save.
	FormKeyValidator func(string) error
	// CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	CategoryValidator func(string) error
	// ParentTaskIDValidator is a validator for the "parent_task_id" field. It is called by the builders before save.
	ParentTaskIDValidator func(string) error
	// ExecutionIDValidator is a validator for the "execution_id" field. It is called by the builders before save.
	ExecutionIDValidator func(string) error
	// ProcessDefinitionKeyValidator is a validator for the "process_definition_key" field. It is called by the builders before save.
	ProcessDefinitionKeyValidator func(string) error
	// CaseExecutionIDValidator is a validator for the "case_execution_id" field. It is called by the builders before save.
	CaseExecutionIDValidator func(string) error
	// CaseInstanceIDValidator is a validator for the "case_instance_id" field. It is called by the builders before save.
	CaseInstanceIDValidator func(string) error
	// CaseDefinitionIDValidator is a validator for the "case_definition_id" field. It is called by the builders before save.
	CaseDefinitionIDValidator func(string) error
	// DefaultSuspended holds the default value on creation for the "suspended" field.
	DefaultSuspended bool
	// DefaultTenantID holds the default value on creation for the "tenant_id" field.
	DefaultTenantID string
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the TaskInstance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByTaskDefinitionKey orders the results by the task_definition_key field.
func ByTaskDefinitionKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskDefinitionKey, opts...).ToFunc()
}

// ByAssignee orders the results by the assignee field.
func ByAssignee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignee, opts...).ToFunc()
}

// ByOwner orders the results by the owner field.
func ByOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwner, opts...).ToFunc()
}

// ByDelegation orders the results by the delegation field.
func ByDelegation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelegation, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByDueDate orders the results by the due_date field.
func ByDueDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueDate, opts...).ToFunc()
}

// ByFollowUpDate orders the results by the follow_up_date field.
func ByFollowUpDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFollowUpDate, opts...).ToFunc()
}

// ByFormKey orders the results by the form_key field.
func ByFormKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormKey, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByParentTaskID orders the results by the parent_task_id field.
func ByParentTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentTaskID, opts...).ToFunc()
}

// ByExecutionID orders the results by the execution_id field.
func ByExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutionID, opts...).ToFunc()
}

// ByProcessInstanceID orders the results by the process_instance_id field.
func ByProcessInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessInstanceID, opts...).ToFunc()
}

// ByProcessDefinitionID orders the results by the process_definition_id field.
func ByProcessDefinitionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionID, opts...).ToFunc()
}

// ByProcessDefinitionKey orders the results by the process_definition_key field.
func ByProcessDefinitionKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionKey, opts...).ToFunc()
}

// ByCaseExecutionID orders the results by the case_execution_id field.
func ByCaseExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaseExecutionID, opts...).ToFunc()
}

// ByCaseInstanceID orders the results by the case_instance_id field.
func ByCaseInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaseInstanceID, opts...).ToFunc()
}

// ByCaseDefinitionID orders the results by the case_definition_id field.
func ByCaseDefinitionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaseDefinitionID, opts...).ToFunc()
}

// BySuspended orders the results by the suspended field.
func BySuspended(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuspended, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
