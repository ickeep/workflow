// Code generated by ent, DO NOT EDIT.

package processevent

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the processevent type in the database.
	Label = "process_event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldEventName holds the string denoting the event_name field in the database.
	FieldEventName = "event_name"
	// FieldExecutionID holds the string denoting the execution_id field in the database.
	FieldExecutionID = "execution_id"
	// FieldProcessInstanceID holds the string denoting the process_instance_id field in the database.
	FieldProcessInstanceID = "process_instance_id"
	// FieldProcessDefinitionID holds the string denoting the process_definition_id field in the database.
	FieldProcessDefinitionID = "process_definition_id"
	// FieldProcessDefinitionKey holds the string denoting the process_definition_key field in the database.
	FieldProcessDefinitionKey = "process_definition_key"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldActivityID holds the string denoting the activity_id field in the database.
	FieldActivityID = "activity_id"
	// FieldActivityName holds the string denoting the activity_name field in the database.
	FieldActivityName = "activity_name"
	// FieldActivityType holds the string denoting the activity_type field in the database.
	FieldActivityType = "activity_type"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldEventData holds the string denoting the event_data field in the database.
	FieldEventData = "event_data"
	// FieldCorrelationID holds the string denoting the correlation_id field in the database.
	FieldCorrelationID = "correlation_id"
	// FieldMessageName holds the string denoting the message_name field in the database.
	FieldMessageName = "message_name"
	// FieldSignalName holds the string denoting the signal_name field in the database.
	FieldSignalName = "signal_name"
	// FieldJobID holds the string denoting the job_id field in the database.
	FieldJobID = "job_id"
	// FieldJobType holds the string denoting the job_type field in the database.
	FieldJobType = "job_type"
	// FieldJobHandlerType holds the string denoting the job_handler_type field in the database.
	FieldJobHandlerType = "job_handler_type"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldDeploymentID holds the string denoting the deployment_id field in the database.
	FieldDeploymentID = "deployment_id"
	// FieldSequenceCounter holds the string denoting the sequence_counter field in the database.
	FieldSequenceCounter = "sequence_counter"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the processevent in the database.
	Table = "process_events"
)

// Columns holds all SQL columns for processevent fields.
var Columns = []string{
	FieldID,
	FieldEventType,
	FieldEventName,
	FieldExecutionID,
	FieldProcessInstanceID,
	FieldProcessDefinitionID,
	FieldProcessDefinitionKey,
	FieldTaskID,
	FieldActivityID,
	FieldActivityName,
	FieldActivityType,
	FieldUserID,
	FieldTimestamp,
	FieldEventData,
	FieldCorrelationID,
	FieldMessageName,
	FieldSignalName,
	FieldJobID,
	FieldJobType,
	FieldJobHandlerType,
	FieldTenantID,
	FieldDeploymentID,
	FieldSequenceCounter,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EventTypeValidator is a validator for the "event_type" field. It is called by the builders before save.
	EventTypeValidator func(string) error
	// EventNameValidator is a validator for the "event_name" field. It is called by the builders before save.
	EventNameValidator func(string) error
	// ExecutionIDValidator is a validator for the "execution_id" field. It is called by the builders before save.
	ExecutionIDValidator func(string) error
	// ProcessDefinitionKeyValidator is a validator for the "process_definition_key" field. It is called by the builders before save.
	ProcessDefinitionKeyValidator func(string) error
	// ActivityIDValidator is a validator for the "activity_id" field. It is called by the builders before save.
	ActivityIDValidator func(string) error
	// ActivityNameValidator is a validator for the "activity_name" field. It is called by the builders before save.
	ActivityNameValidator func(string) error
	// ActivityTypeValidator is a validator for the "activity_type" field. It is called by the builders before save.
	ActivityTypeValidator func(string) error
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(string) error
	// DefaultTimestamp holds the default value on creation for the "timestamp" field.
	DefaultTimestamp func() time.Time
	// CorrelationIDValidator is a validator for the "correlation_id" field. It is called by the builders before save.
	CorrelationIDValidator func(string) error
	// MessageNameValidator is a validator for the "message_name" field. It is called by the builders before save.
	MessageNameValidator func(string) error
	// SignalNameValidator is a validator for the "signal_name" field. It is called by the builders before save.
	SignalNameValidator func(string) error
	// JobIDValidator is a validator for the "job_id" field. It is called by the builders before save.
	JobIDValidator func(string) error
	// JobTypeValidator is a validator for the "job_type" field. It is called by the builders before save.
	JobTypeValidator func(string) error
	// JobHandlerTypeValidator is a validator for the "job_handler_type" field. It is called by the builders before save.
	JobHandlerTypeValidator func(string) error
	// DefaultTenantID holds the default value on creation for the "tenant_id" field.
	DefaultTenantID string
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DeploymentIDValidator is a validator for the "deployment_id" field. It is called by the builders before save.
	DeploymentIDValidator func(string) error
	// SequenceCounterValidator is a validator for the "sequence_counter" field. It is called by the builders before save.
	SequenceCounterValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the ProcessEvent queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByEventName orders the results by the event_name field.
func ByEventName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventName, opts...).ToFunc()
}

// ByExecutionID orders the results by the execution_id field.
func ByExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutionID, opts...).ToFunc()
}

// ByProcessInstanceID orders the results by the process_instance_id field.
func ByProcessInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessInstanceID, opts...).ToFunc()
}

// ByProcessDefinitionID orders the results by the process_definition_id field.
func ByProcessDefinitionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionID, opts...).ToFunc()
}

// ByProcessDefinitionKey orders the results by the process_definition_key field.
func ByProcessDefinitionKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionKey, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByActivityID orders the results by the activity_id field.
func ByActivityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityID, opts...).ToFunc()
}

// ByActivityName orders the results by the activity_name field.
func ByActivityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityName, opts...).ToFunc()
}

// ByActivityType orders the results by the activity_type field.
func ByActivityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityType, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByCorrelationID orders the results by the correlation_id field.
func ByCorrelationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCorrelationID, opts...).ToFunc()
}

// ByMessageName orders the results by the message_name field.
func ByMessageName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessageName, opts...).ToFunc()
}

// BySignalName orders the results by the signal_name field.
func BySignalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSignalName, opts...).ToFunc()
}

// ByJobID orders the results by the job_id field.
func ByJobID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobID, opts...).ToFunc()
}

// ByJobType orders the results by the job_type field.
func ByJobType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobType, opts...).ToFunc()
}

// ByJobHandlerType orders the results by the job_handler_type field.
func ByJobHandlerType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobHandlerType, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByDeploymentID orders the results by the deployment_id field.
func ByDeploymentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploymentID, opts...).ToFunc()
}

// BySequenceCounter orders the results by the sequence_counter field.
func BySequenceCounter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSequenceCounter, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
