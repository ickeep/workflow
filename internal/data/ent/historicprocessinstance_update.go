// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/historicprocessinstance"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/predicate"
)

// HistoricProcessInstanceUpdate is the builder for updating HistoricProcessInstance entities.
type HistoricProcessInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *HistoricProcessInstanceMutation
}

// Where appends a list predicates to the HistoricProcessInstanceUpdate builder.
func (hpiu *HistoricProcessInstanceUpdate) Where(ps ...predicate.HistoricProcessInstance) *HistoricProcessInstanceUpdate {
	hpiu.mutation.Where(ps...)
	return hpiu
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (hpiu *HistoricProcessInstanceUpdate) SetProcessInstanceID(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetProcessInstanceID(s)
	return hpiu
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableProcessInstanceID(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetProcessInstanceID(*s)
	}
	return hpiu
}

// SetBusinessKey sets the "business_key" field.
func (hpiu *HistoricProcessInstanceUpdate) SetBusinessKey(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetBusinessKey(s)
	return hpiu
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableBusinessKey(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetBusinessKey(*s)
	}
	return hpiu
}

// ClearBusinessKey clears the value of the "business_key" field.
func (hpiu *HistoricProcessInstanceUpdate) ClearBusinessKey() *HistoricProcessInstanceUpdate {
	hpiu.mutation.ClearBusinessKey()
	return hpiu
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (hpiu *HistoricProcessInstanceUpdate) SetProcessDefinitionID(i int64) *HistoricProcessInstanceUpdate {
	hpiu.mutation.ResetProcessDefinitionID()
	hpiu.mutation.SetProcessDefinitionID(i)
	return hpiu
}

// SetNillableProcessDefinitionID sets the "process_definition_id" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableProcessDefinitionID(i *int64) *HistoricProcessInstanceUpdate {
	if i != nil {
		hpiu.SetProcessDefinitionID(*i)
	}
	return hpiu
}

// AddProcessDefinitionID adds i to the "process_definition_id" field.
func (hpiu *HistoricProcessInstanceUpdate) AddProcessDefinitionID(i int64) *HistoricProcessInstanceUpdate {
	hpiu.mutation.AddProcessDefinitionID(i)
	return hpiu
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (hpiu *HistoricProcessInstanceUpdate) SetProcessDefinitionKey(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetProcessDefinitionKey(s)
	return hpiu
}

// SetNillableProcessDefinitionKey sets the "process_definition_key" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableProcessDefinitionKey(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetProcessDefinitionKey(*s)
	}
	return hpiu
}

// SetProcessDefinitionName sets the "process_definition_name" field.
func (hpiu *HistoricProcessInstanceUpdate) SetProcessDefinitionName(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetProcessDefinitionName(s)
	return hpiu
}

// SetNillableProcessDefinitionName sets the "process_definition_name" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableProcessDefinitionName(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetProcessDefinitionName(*s)
	}
	return hpiu
}

// ClearProcessDefinitionName clears the value of the "process_definition_name" field.
func (hpiu *HistoricProcessInstanceUpdate) ClearProcessDefinitionName() *HistoricProcessInstanceUpdate {
	hpiu.mutation.ClearProcessDefinitionName()
	return hpiu
}

// SetProcessDefinitionVersion sets the "process_definition_version" field.
func (hpiu *HistoricProcessInstanceUpdate) SetProcessDefinitionVersion(i int32) *HistoricProcessInstanceUpdate {
	hpiu.mutation.ResetProcessDefinitionVersion()
	hpiu.mutation.SetProcessDefinitionVersion(i)
	return hpiu
}

// SetNillableProcessDefinitionVersion sets the "process_definition_version" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableProcessDefinitionVersion(i *int32) *HistoricProcessInstanceUpdate {
	if i != nil {
		hpiu.SetProcessDefinitionVersion(*i)
	}
	return hpiu
}

// AddProcessDefinitionVersion adds i to the "process_definition_version" field.
func (hpiu *HistoricProcessInstanceUpdate) AddProcessDefinitionVersion(i int32) *HistoricProcessInstanceUpdate {
	hpiu.mutation.AddProcessDefinitionVersion(i)
	return hpiu
}

// SetDeploymentID sets the "deployment_id" field.
func (hpiu *HistoricProcessInstanceUpdate) SetDeploymentID(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetDeploymentID(s)
	return hpiu
}

// SetNillableDeploymentID sets the "deployment_id" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableDeploymentID(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetDeploymentID(*s)
	}
	return hpiu
}

// ClearDeploymentID clears the value of the "deployment_id" field.
func (hpiu *HistoricProcessInstanceUpdate) ClearDeploymentID() *HistoricProcessInstanceUpdate {
	hpiu.mutation.ClearDeploymentID()
	return hpiu
}

// SetStartUserID sets the "start_user_id" field.
func (hpiu *HistoricProcessInstanceUpdate) SetStartUserID(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetStartUserID(s)
	return hpiu
}

// SetNillableStartUserID sets the "start_user_id" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableStartUserID(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetStartUserID(*s)
	}
	return hpiu
}

// ClearStartUserID clears the value of the "start_user_id" field.
func (hpiu *HistoricProcessInstanceUpdate) ClearStartUserID() *HistoricProcessInstanceUpdate {
	hpiu.mutation.ClearStartUserID()
	return hpiu
}

// SetStartTime sets the "start_time" field.
func (hpiu *HistoricProcessInstanceUpdate) SetStartTime(t time.Time) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetStartTime(t)
	return hpiu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableStartTime(t *time.Time) *HistoricProcessInstanceUpdate {
	if t != nil {
		hpiu.SetStartTime(*t)
	}
	return hpiu
}

// SetEndTime sets the "end_time" field.
func (hpiu *HistoricProcessInstanceUpdate) SetEndTime(t time.Time) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetEndTime(t)
	return hpiu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableEndTime(t *time.Time) *HistoricProcessInstanceUpdate {
	if t != nil {
		hpiu.SetEndTime(*t)
	}
	return hpiu
}

// ClearEndTime clears the value of the "end_time" field.
func (hpiu *HistoricProcessInstanceUpdate) ClearEndTime() *HistoricProcessInstanceUpdate {
	hpiu.mutation.ClearEndTime()
	return hpiu
}

// SetDuration sets the "duration" field.
func (hpiu *HistoricProcessInstanceUpdate) SetDuration(i int64) *HistoricProcessInstanceUpdate {
	hpiu.mutation.ResetDuration()
	hpiu.mutation.SetDuration(i)
	return hpiu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableDuration(i *int64) *HistoricProcessInstanceUpdate {
	if i != nil {
		hpiu.SetDuration(*i)
	}
	return hpiu
}

// AddDuration adds i to the "duration" field.
func (hpiu *HistoricProcessInstanceUpdate) AddDuration(i int64) *HistoricProcessInstanceUpdate {
	hpiu.mutation.AddDuration(i)
	return hpiu
}

// ClearDuration clears the value of the "duration" field.
func (hpiu *HistoricProcessInstanceUpdate) ClearDuration() *HistoricProcessInstanceUpdate {
	hpiu.mutation.ClearDuration()
	return hpiu
}

// SetStartActivityID sets the "start_activity_id" field.
func (hpiu *HistoricProcessInstanceUpdate) SetStartActivityID(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetStartActivityID(s)
	return hpiu
}

// SetNillableStartActivityID sets the "start_activity_id" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableStartActivityID(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetStartActivityID(*s)
	}
	return hpiu
}

// ClearStartActivityID clears the value of the "start_activity_id" field.
func (hpiu *HistoricProcessInstanceUpdate) ClearStartActivityID() *HistoricProcessInstanceUpdate {
	hpiu.mutation.ClearStartActivityID()
	return hpiu
}

// SetEndActivityID sets the "end_activity_id" field.
func (hpiu *HistoricProcessInstanceUpdate) SetEndActivityID(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetEndActivityID(s)
	return hpiu
}

// SetNillableEndActivityID sets the "end_activity_id" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableEndActivityID(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetEndActivityID(*s)
	}
	return hpiu
}

// ClearEndActivityID clears the value of the "end_activity_id" field.
func (hpiu *HistoricProcessInstanceUpdate) ClearEndActivityID() *HistoricProcessInstanceUpdate {
	hpiu.mutation.ClearEndActivityID()
	return hpiu
}

// SetSuperProcessInstanceID sets the "super_process_instance_id" field.
func (hpiu *HistoricProcessInstanceUpdate) SetSuperProcessInstanceID(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetSuperProcessInstanceID(s)
	return hpiu
}

// SetNillableSuperProcessInstanceID sets the "super_process_instance_id" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableSuperProcessInstanceID(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetSuperProcessInstanceID(*s)
	}
	return hpiu
}

// ClearSuperProcessInstanceID clears the value of the "super_process_instance_id" field.
func (hpiu *HistoricProcessInstanceUpdate) ClearSuperProcessInstanceID() *HistoricProcessInstanceUpdate {
	hpiu.mutation.ClearSuperProcessInstanceID()
	return hpiu
}

// SetRootProcessInstanceID sets the "root_process_instance_id" field.
func (hpiu *HistoricProcessInstanceUpdate) SetRootProcessInstanceID(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetRootProcessInstanceID(s)
	return hpiu
}

// SetNillableRootProcessInstanceID sets the "root_process_instance_id" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableRootProcessInstanceID(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetRootProcessInstanceID(*s)
	}
	return hpiu
}

// ClearRootProcessInstanceID clears the value of the "root_process_instance_id" field.
func (hpiu *HistoricProcessInstanceUpdate) ClearRootProcessInstanceID() *HistoricProcessInstanceUpdate {
	hpiu.mutation.ClearRootProcessInstanceID()
	return hpiu
}

// SetSuperCaseInstanceID sets the "super_case_instance_id" field.
func (hpiu *HistoricProcessInstanceUpdate) SetSuperCaseInstanceID(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetSuperCaseInstanceID(s)
	return hpiu
}

// SetNillableSuperCaseInstanceID sets the "super_case_instance_id" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableSuperCaseInstanceID(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetSuperCaseInstanceID(*s)
	}
	return hpiu
}

// ClearSuperCaseInstanceID clears the value of the "super_case_instance_id" field.
func (hpiu *HistoricProcessInstanceUpdate) ClearSuperCaseInstanceID() *HistoricProcessInstanceUpdate {
	hpiu.mutation.ClearSuperCaseInstanceID()
	return hpiu
}

// SetCaseInstanceID sets the "case_instance_id" field.
func (hpiu *HistoricProcessInstanceUpdate) SetCaseInstanceID(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetCaseInstanceID(s)
	return hpiu
}

// SetNillableCaseInstanceID sets the "case_instance_id" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableCaseInstanceID(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetCaseInstanceID(*s)
	}
	return hpiu
}

// ClearCaseInstanceID clears the value of the "case_instance_id" field.
func (hpiu *HistoricProcessInstanceUpdate) ClearCaseInstanceID() *HistoricProcessInstanceUpdate {
	hpiu.mutation.ClearCaseInstanceID()
	return hpiu
}

// SetDeleteReason sets the "delete_reason" field.
func (hpiu *HistoricProcessInstanceUpdate) SetDeleteReason(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetDeleteReason(s)
	return hpiu
}

// SetNillableDeleteReason sets the "delete_reason" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableDeleteReason(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetDeleteReason(*s)
	}
	return hpiu
}

// ClearDeleteReason clears the value of the "delete_reason" field.
func (hpiu *HistoricProcessInstanceUpdate) ClearDeleteReason() *HistoricProcessInstanceUpdate {
	hpiu.mutation.ClearDeleteReason()
	return hpiu
}

// SetTenantID sets the "tenant_id" field.
func (hpiu *HistoricProcessInstanceUpdate) SetTenantID(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetTenantID(s)
	return hpiu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableTenantID(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetTenantID(*s)
	}
	return hpiu
}

// SetState sets the "state" field.
func (hpiu *HistoricProcessInstanceUpdate) SetState(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetState(s)
	return hpiu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableState(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetState(*s)
	}
	return hpiu
}

// ClearState clears the value of the "state" field.
func (hpiu *HistoricProcessInstanceUpdate) ClearState() *HistoricProcessInstanceUpdate {
	hpiu.mutation.ClearState()
	return hpiu
}

// SetRemovalTime sets the "removal_time" field.
func (hpiu *HistoricProcessInstanceUpdate) SetRemovalTime(s string) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetRemovalTime(s)
	return hpiu
}

// SetNillableRemovalTime sets the "removal_time" field if the given value is not nil.
func (hpiu *HistoricProcessInstanceUpdate) SetNillableRemovalTime(s *string) *HistoricProcessInstanceUpdate {
	if s != nil {
		hpiu.SetRemovalTime(*s)
	}
	return hpiu
}

// ClearRemovalTime clears the value of the "removal_time" field.
func (hpiu *HistoricProcessInstanceUpdate) ClearRemovalTime() *HistoricProcessInstanceUpdate {
	hpiu.mutation.ClearRemovalTime()
	return hpiu
}

// SetUpdatedAt sets the "updated_at" field.
func (hpiu *HistoricProcessInstanceUpdate) SetUpdatedAt(t time.Time) *HistoricProcessInstanceUpdate {
	hpiu.mutation.SetUpdatedAt(t)
	return hpiu
}

// Mutation returns the HistoricProcessInstanceMutation object of the builder.
func (hpiu *HistoricProcessInstanceUpdate) Mutation() *HistoricProcessInstanceMutation {
	return hpiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hpiu *HistoricProcessInstanceUpdate) Save(ctx context.Context) (int, error) {
	hpiu.defaults()
	return withHooks(ctx, hpiu.sqlSave, hpiu.mutation, hpiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hpiu *HistoricProcessInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := hpiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hpiu *HistoricProcessInstanceUpdate) Exec(ctx context.Context) error {
	_, err := hpiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hpiu *HistoricProcessInstanceUpdate) ExecX(ctx context.Context) {
	if err := hpiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hpiu *HistoricProcessInstanceUpdate) defaults() {
	if _, ok := hpiu.mutation.UpdatedAt(); !ok {
		v := historicprocessinstance.UpdateDefaultUpdatedAt()
		hpiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hpiu *HistoricProcessInstanceUpdate) check() error {
	if v, ok := hpiu.mutation.ProcessInstanceID(); ok {
		if err := historicprocessinstance.ProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "process_instance_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.process_instance_id": %w`, err)}
		}
	}
	if v, ok := hpiu.mutation.BusinessKey(); ok {
		if err := historicprocessinstance.BusinessKeyValidator(v); err != nil {
			return &ValidationError{Name: "business_key", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.business_key": %w`, err)}
		}
	}
	if v, ok := hpiu.mutation.ProcessDefinitionKey(); ok {
		if err := historicprocessinstance.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.process_definition_key": %w`, err)}
		}
	}
	if v, ok := hpiu.mutation.ProcessDefinitionName(); ok {
		if err := historicprocessinstance.ProcessDefinitionNameValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_name", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.process_definition_name": %w`, err)}
		}
	}
	if v, ok := hpiu.mutation.DeploymentID(); ok {
		if err := historicprocessinstance.DeploymentIDValidator(v); err != nil {
			return &ValidationError{Name: "deployment_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.deployment_id": %w`, err)}
		}
	}
	if v, ok := hpiu.mutation.StartUserID(); ok {
		if err := historicprocessinstance.StartUserIDValidator(v); err != nil {
			return &ValidationError{Name: "start_user_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.start_user_id": %w`, err)}
		}
	}
	if v, ok := hpiu.mutation.StartActivityID(); ok {
		if err := historicprocessinstance.StartActivityIDValidator(v); err != nil {
			return &ValidationError{Name: "start_activity_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.start_activity_id": %w`, err)}
		}
	}
	if v, ok := hpiu.mutation.EndActivityID(); ok {
		if err := historicprocessinstance.EndActivityIDValidator(v); err != nil {
			return &ValidationError{Name: "end_activity_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.end_activity_id": %w`, err)}
		}
	}
	if v, ok := hpiu.mutation.SuperProcessInstanceID(); ok {
		if err := historicprocessinstance.SuperProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "super_process_instance_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.super_process_instance_id": %w`, err)}
		}
	}
	if v, ok := hpiu.mutation.RootProcessInstanceID(); ok {
		if err := historicprocessinstance.RootProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "root_process_instance_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.root_process_instance_id": %w`, err)}
		}
	}
	if v, ok := hpiu.mutation.SuperCaseInstanceID(); ok {
		if err := historicprocessinstance.SuperCaseInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "super_case_instance_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.super_case_instance_id": %w`, err)}
		}
	}
	if v, ok := hpiu.mutation.CaseInstanceID(); ok {
		if err := historicprocessinstance.CaseInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "case_instance_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.case_instance_id": %w`, err)}
		}
	}
	if v, ok := hpiu.mutation.DeleteReason(); ok {
		if err := historicprocessinstance.DeleteReasonValidator(v); err != nil {
			return &ValidationError{Name: "delete_reason", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.delete_reason": %w`, err)}
		}
	}
	if v, ok := hpiu.mutation.TenantID(); ok {
		if err := historicprocessinstance.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.tenant_id": %w`, err)}
		}
	}
	if v, ok := hpiu.mutation.State(); ok {
		if err := historicprocessinstance.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.state": %w`, err)}
		}
	}
	if v, ok := hpiu.mutation.RemovalTime(); ok {
		if err := historicprocessinstance.RemovalTimeValidator(v); err != nil {
			return &ValidationError{Name: "removal_time", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.removal_time": %w`, err)}
		}
	}
	return nil
}

func (hpiu *HistoricProcessInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hpiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(historicprocessinstance.Table, historicprocessinstance.Columns, sqlgraph.NewFieldSpec(historicprocessinstance.FieldID, field.TypeInt64))
	if ps := hpiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hpiu.mutation.ProcessInstanceID(); ok {
		_spec.SetField(historicprocessinstance.FieldProcessInstanceID, field.TypeString, value)
	}
	if value, ok := hpiu.mutation.BusinessKey(); ok {
		_spec.SetField(historicprocessinstance.FieldBusinessKey, field.TypeString, value)
	}
	if hpiu.mutation.BusinessKeyCleared() {
		_spec.ClearField(historicprocessinstance.FieldBusinessKey, field.TypeString)
	}
	if value, ok := hpiu.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(historicprocessinstance.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := hpiu.mutation.AddedProcessDefinitionID(); ok {
		_spec.AddField(historicprocessinstance.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := hpiu.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(historicprocessinstance.FieldProcessDefinitionKey, field.TypeString, value)
	}
	if value, ok := hpiu.mutation.ProcessDefinitionName(); ok {
		_spec.SetField(historicprocessinstance.FieldProcessDefinitionName, field.TypeString, value)
	}
	if hpiu.mutation.ProcessDefinitionNameCleared() {
		_spec.ClearField(historicprocessinstance.FieldProcessDefinitionName, field.TypeString)
	}
	if value, ok := hpiu.mutation.ProcessDefinitionVersion(); ok {
		_spec.SetField(historicprocessinstance.FieldProcessDefinitionVersion, field.TypeInt32, value)
	}
	if value, ok := hpiu.mutation.AddedProcessDefinitionVersion(); ok {
		_spec.AddField(historicprocessinstance.FieldProcessDefinitionVersion, field.TypeInt32, value)
	}
	if value, ok := hpiu.mutation.DeploymentID(); ok {
		_spec.SetField(historicprocessinstance.FieldDeploymentID, field.TypeString, value)
	}
	if hpiu.mutation.DeploymentIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldDeploymentID, field.TypeString)
	}
	if value, ok := hpiu.mutation.StartUserID(); ok {
		_spec.SetField(historicprocessinstance.FieldStartUserID, field.TypeString, value)
	}
	if hpiu.mutation.StartUserIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldStartUserID, field.TypeString)
	}
	if value, ok := hpiu.mutation.StartTime(); ok {
		_spec.SetField(historicprocessinstance.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := hpiu.mutation.EndTime(); ok {
		_spec.SetField(historicprocessinstance.FieldEndTime, field.TypeTime, value)
	}
	if hpiu.mutation.EndTimeCleared() {
		_spec.ClearField(historicprocessinstance.FieldEndTime, field.TypeTime)
	}
	if value, ok := hpiu.mutation.Duration(); ok {
		_spec.SetField(historicprocessinstance.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := hpiu.mutation.AddedDuration(); ok {
		_spec.AddField(historicprocessinstance.FieldDuration, field.TypeInt64, value)
	}
	if hpiu.mutation.DurationCleared() {
		_spec.ClearField(historicprocessinstance.FieldDuration, field.TypeInt64)
	}
	if value, ok := hpiu.mutation.StartActivityID(); ok {
		_spec.SetField(historicprocessinstance.FieldStartActivityID, field.TypeString, value)
	}
	if hpiu.mutation.StartActivityIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldStartActivityID, field.TypeString)
	}
	if value, ok := hpiu.mutation.EndActivityID(); ok {
		_spec.SetField(historicprocessinstance.FieldEndActivityID, field.TypeString, value)
	}
	if hpiu.mutation.EndActivityIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldEndActivityID, field.TypeString)
	}
	if value, ok := hpiu.mutation.SuperProcessInstanceID(); ok {
		_spec.SetField(historicprocessinstance.FieldSuperProcessInstanceID, field.TypeString, value)
	}
	if hpiu.mutation.SuperProcessInstanceIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldSuperProcessInstanceID, field.TypeString)
	}
	if value, ok := hpiu.mutation.RootProcessInstanceID(); ok {
		_spec.SetField(historicprocessinstance.FieldRootProcessInstanceID, field.TypeString, value)
	}
	if hpiu.mutation.RootProcessInstanceIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldRootProcessInstanceID, field.TypeString)
	}
	if value, ok := hpiu.mutation.SuperCaseInstanceID(); ok {
		_spec.SetField(historicprocessinstance.FieldSuperCaseInstanceID, field.TypeString, value)
	}
	if hpiu.mutation.SuperCaseInstanceIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldSuperCaseInstanceID, field.TypeString)
	}
	if value, ok := hpiu.mutation.CaseInstanceID(); ok {
		_spec.SetField(historicprocessinstance.FieldCaseInstanceID, field.TypeString, value)
	}
	if hpiu.mutation.CaseInstanceIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldCaseInstanceID, field.TypeString)
	}
	if value, ok := hpiu.mutation.DeleteReason(); ok {
		_spec.SetField(historicprocessinstance.FieldDeleteReason, field.TypeString, value)
	}
	if hpiu.mutation.DeleteReasonCleared() {
		_spec.ClearField(historicprocessinstance.FieldDeleteReason, field.TypeString)
	}
	if value, ok := hpiu.mutation.TenantID(); ok {
		_spec.SetField(historicprocessinstance.FieldTenantID, field.TypeString, value)
	}
	if value, ok := hpiu.mutation.State(); ok {
		_spec.SetField(historicprocessinstance.FieldState, field.TypeString, value)
	}
	if hpiu.mutation.StateCleared() {
		_spec.ClearField(historicprocessinstance.FieldState, field.TypeString)
	}
	if value, ok := hpiu.mutation.RemovalTime(); ok {
		_spec.SetField(historicprocessinstance.FieldRemovalTime, field.TypeString, value)
	}
	if hpiu.mutation.RemovalTimeCleared() {
		_spec.ClearField(historicprocessinstance.FieldRemovalTime, field.TypeString)
	}
	if value, ok := hpiu.mutation.UpdatedAt(); ok {
		_spec.SetField(historicprocessinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hpiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{historicprocessinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hpiu.mutation.done = true
	return n, nil
}

// HistoricProcessInstanceUpdateOne is the builder for updating a single HistoricProcessInstance entity.
type HistoricProcessInstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HistoricProcessInstanceMutation
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetProcessInstanceID(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetProcessInstanceID(s)
	return hpiuo
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableProcessInstanceID(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetProcessInstanceID(*s)
	}
	return hpiuo
}

// SetBusinessKey sets the "business_key" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetBusinessKey(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetBusinessKey(s)
	return hpiuo
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableBusinessKey(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetBusinessKey(*s)
	}
	return hpiuo
}

// ClearBusinessKey clears the value of the "business_key" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) ClearBusinessKey() *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ClearBusinessKey()
	return hpiuo
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetProcessDefinitionID(i int64) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ResetProcessDefinitionID()
	hpiuo.mutation.SetProcessDefinitionID(i)
	return hpiuo
}

// SetNillableProcessDefinitionID sets the "process_definition_id" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableProcessDefinitionID(i *int64) *HistoricProcessInstanceUpdateOne {
	if i != nil {
		hpiuo.SetProcessDefinitionID(*i)
	}
	return hpiuo
}

// AddProcessDefinitionID adds i to the "process_definition_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) AddProcessDefinitionID(i int64) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.AddProcessDefinitionID(i)
	return hpiuo
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetProcessDefinitionKey(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetProcessDefinitionKey(s)
	return hpiuo
}

// SetNillableProcessDefinitionKey sets the "process_definition_key" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableProcessDefinitionKey(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetProcessDefinitionKey(*s)
	}
	return hpiuo
}

// SetProcessDefinitionName sets the "process_definition_name" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetProcessDefinitionName(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetProcessDefinitionName(s)
	return hpiuo
}

// SetNillableProcessDefinitionName sets the "process_definition_name" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableProcessDefinitionName(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetProcessDefinitionName(*s)
	}
	return hpiuo
}

// ClearProcessDefinitionName clears the value of the "process_definition_name" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) ClearProcessDefinitionName() *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ClearProcessDefinitionName()
	return hpiuo
}

// SetProcessDefinitionVersion sets the "process_definition_version" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetProcessDefinitionVersion(i int32) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ResetProcessDefinitionVersion()
	hpiuo.mutation.SetProcessDefinitionVersion(i)
	return hpiuo
}

// SetNillableProcessDefinitionVersion sets the "process_definition_version" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableProcessDefinitionVersion(i *int32) *HistoricProcessInstanceUpdateOne {
	if i != nil {
		hpiuo.SetProcessDefinitionVersion(*i)
	}
	return hpiuo
}

// AddProcessDefinitionVersion adds i to the "process_definition_version" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) AddProcessDefinitionVersion(i int32) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.AddProcessDefinitionVersion(i)
	return hpiuo
}

// SetDeploymentID sets the "deployment_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetDeploymentID(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetDeploymentID(s)
	return hpiuo
}

// SetNillableDeploymentID sets the "deployment_id" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableDeploymentID(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetDeploymentID(*s)
	}
	return hpiuo
}

// ClearDeploymentID clears the value of the "deployment_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) ClearDeploymentID() *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ClearDeploymentID()
	return hpiuo
}

// SetStartUserID sets the "start_user_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetStartUserID(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetStartUserID(s)
	return hpiuo
}

// SetNillableStartUserID sets the "start_user_id" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableStartUserID(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetStartUserID(*s)
	}
	return hpiuo
}

// ClearStartUserID clears the value of the "start_user_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) ClearStartUserID() *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ClearStartUserID()
	return hpiuo
}

// SetStartTime sets the "start_time" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetStartTime(t time.Time) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetStartTime(t)
	return hpiuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableStartTime(t *time.Time) *HistoricProcessInstanceUpdateOne {
	if t != nil {
		hpiuo.SetStartTime(*t)
	}
	return hpiuo
}

// SetEndTime sets the "end_time" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetEndTime(t time.Time) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetEndTime(t)
	return hpiuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableEndTime(t *time.Time) *HistoricProcessInstanceUpdateOne {
	if t != nil {
		hpiuo.SetEndTime(*t)
	}
	return hpiuo
}

// ClearEndTime clears the value of the "end_time" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) ClearEndTime() *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ClearEndTime()
	return hpiuo
}

// SetDuration sets the "duration" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetDuration(i int64) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ResetDuration()
	hpiuo.mutation.SetDuration(i)
	return hpiuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableDuration(i *int64) *HistoricProcessInstanceUpdateOne {
	if i != nil {
		hpiuo.SetDuration(*i)
	}
	return hpiuo
}

// AddDuration adds i to the "duration" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) AddDuration(i int64) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.AddDuration(i)
	return hpiuo
}

// ClearDuration clears the value of the "duration" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) ClearDuration() *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ClearDuration()
	return hpiuo
}

// SetStartActivityID sets the "start_activity_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetStartActivityID(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetStartActivityID(s)
	return hpiuo
}

// SetNillableStartActivityID sets the "start_activity_id" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableStartActivityID(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetStartActivityID(*s)
	}
	return hpiuo
}

// ClearStartActivityID clears the value of the "start_activity_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) ClearStartActivityID() *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ClearStartActivityID()
	return hpiuo
}

// SetEndActivityID sets the "end_activity_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetEndActivityID(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetEndActivityID(s)
	return hpiuo
}

// SetNillableEndActivityID sets the "end_activity_id" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableEndActivityID(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetEndActivityID(*s)
	}
	return hpiuo
}

// ClearEndActivityID clears the value of the "end_activity_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) ClearEndActivityID() *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ClearEndActivityID()
	return hpiuo
}

// SetSuperProcessInstanceID sets the "super_process_instance_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetSuperProcessInstanceID(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetSuperProcessInstanceID(s)
	return hpiuo
}

// SetNillableSuperProcessInstanceID sets the "super_process_instance_id" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableSuperProcessInstanceID(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetSuperProcessInstanceID(*s)
	}
	return hpiuo
}

// ClearSuperProcessInstanceID clears the value of the "super_process_instance_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) ClearSuperProcessInstanceID() *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ClearSuperProcessInstanceID()
	return hpiuo
}

// SetRootProcessInstanceID sets the "root_process_instance_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetRootProcessInstanceID(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetRootProcessInstanceID(s)
	return hpiuo
}

// SetNillableRootProcessInstanceID sets the "root_process_instance_id" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableRootProcessInstanceID(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetRootProcessInstanceID(*s)
	}
	return hpiuo
}

// ClearRootProcessInstanceID clears the value of the "root_process_instance_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) ClearRootProcessInstanceID() *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ClearRootProcessInstanceID()
	return hpiuo
}

// SetSuperCaseInstanceID sets the "super_case_instance_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetSuperCaseInstanceID(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetSuperCaseInstanceID(s)
	return hpiuo
}

// SetNillableSuperCaseInstanceID sets the "super_case_instance_id" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableSuperCaseInstanceID(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetSuperCaseInstanceID(*s)
	}
	return hpiuo
}

// ClearSuperCaseInstanceID clears the value of the "super_case_instance_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) ClearSuperCaseInstanceID() *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ClearSuperCaseInstanceID()
	return hpiuo
}

// SetCaseInstanceID sets the "case_instance_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetCaseInstanceID(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetCaseInstanceID(s)
	return hpiuo
}

// SetNillableCaseInstanceID sets the "case_instance_id" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableCaseInstanceID(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetCaseInstanceID(*s)
	}
	return hpiuo
}

// ClearCaseInstanceID clears the value of the "case_instance_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) ClearCaseInstanceID() *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ClearCaseInstanceID()
	return hpiuo
}

// SetDeleteReason sets the "delete_reason" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetDeleteReason(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetDeleteReason(s)
	return hpiuo
}

// SetNillableDeleteReason sets the "delete_reason" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableDeleteReason(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetDeleteReason(*s)
	}
	return hpiuo
}

// ClearDeleteReason clears the value of the "delete_reason" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) ClearDeleteReason() *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ClearDeleteReason()
	return hpiuo
}

// SetTenantID sets the "tenant_id" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetTenantID(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetTenantID(s)
	return hpiuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableTenantID(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetTenantID(*s)
	}
	return hpiuo
}

// SetState sets the "state" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetState(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetState(s)
	return hpiuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableState(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetState(*s)
	}
	return hpiuo
}

// ClearState clears the value of the "state" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) ClearState() *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ClearState()
	return hpiuo
}

// SetRemovalTime sets the "removal_time" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetRemovalTime(s string) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetRemovalTime(s)
	return hpiuo
}

// SetNillableRemovalTime sets the "removal_time" field if the given value is not nil.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetNillableRemovalTime(s *string) *HistoricProcessInstanceUpdateOne {
	if s != nil {
		hpiuo.SetRemovalTime(*s)
	}
	return hpiuo
}

// ClearRemovalTime clears the value of the "removal_time" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) ClearRemovalTime() *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.ClearRemovalTime()
	return hpiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (hpiuo *HistoricProcessInstanceUpdateOne) SetUpdatedAt(t time.Time) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.SetUpdatedAt(t)
	return hpiuo
}

// Mutation returns the HistoricProcessInstanceMutation object of the builder.
func (hpiuo *HistoricProcessInstanceUpdateOne) Mutation() *HistoricProcessInstanceMutation {
	return hpiuo.mutation
}

// Where appends a list predicates to the HistoricProcessInstanceUpdate builder.
func (hpiuo *HistoricProcessInstanceUpdateOne) Where(ps ...predicate.HistoricProcessInstance) *HistoricProcessInstanceUpdateOne {
	hpiuo.mutation.Where(ps...)
	return hpiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hpiuo *HistoricProcessInstanceUpdateOne) Select(field string, fields ...string) *HistoricProcessInstanceUpdateOne {
	hpiuo.fields = append([]string{field}, fields...)
	return hpiuo
}

// Save executes the query and returns the updated HistoricProcessInstance entity.
func (hpiuo *HistoricProcessInstanceUpdateOne) Save(ctx context.Context) (*HistoricProcessInstance, error) {
	hpiuo.defaults()
	return withHooks(ctx, hpiuo.sqlSave, hpiuo.mutation, hpiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hpiuo *HistoricProcessInstanceUpdateOne) SaveX(ctx context.Context) *HistoricProcessInstance {
	node, err := hpiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hpiuo *HistoricProcessInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := hpiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hpiuo *HistoricProcessInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := hpiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hpiuo *HistoricProcessInstanceUpdateOne) defaults() {
	if _, ok := hpiuo.mutation.UpdatedAt(); !ok {
		v := historicprocessinstance.UpdateDefaultUpdatedAt()
		hpiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hpiuo *HistoricProcessInstanceUpdateOne) check() error {
	if v, ok := hpiuo.mutation.ProcessInstanceID(); ok {
		if err := historicprocessinstance.ProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "process_instance_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.process_instance_id": %w`, err)}
		}
	}
	if v, ok := hpiuo.mutation.BusinessKey(); ok {
		if err := historicprocessinstance.BusinessKeyValidator(v); err != nil {
			return &ValidationError{Name: "business_key", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.business_key": %w`, err)}
		}
	}
	if v, ok := hpiuo.mutation.ProcessDefinitionKey(); ok {
		if err := historicprocessinstance.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.process_definition_key": %w`, err)}
		}
	}
	if v, ok := hpiuo.mutation.ProcessDefinitionName(); ok {
		if err := historicprocessinstance.ProcessDefinitionNameValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_name", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.process_definition_name": %w`, err)}
		}
	}
	if v, ok := hpiuo.mutation.DeploymentID(); ok {
		if err := historicprocessinstance.DeploymentIDValidator(v); err != nil {
			return &ValidationError{Name: "deployment_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.deployment_id": %w`, err)}
		}
	}
	if v, ok := hpiuo.mutation.StartUserID(); ok {
		if err := historicprocessinstance.StartUserIDValidator(v); err != nil {
			return &ValidationError{Name: "start_user_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.start_user_id": %w`, err)}
		}
	}
	if v, ok := hpiuo.mutation.StartActivityID(); ok {
		if err := historicprocessinstance.StartActivityIDValidator(v); err != nil {
			return &ValidationError{Name: "start_activity_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.start_activity_id": %w`, err)}
		}
	}
	if v, ok := hpiuo.mutation.EndActivityID(); ok {
		if err := historicprocessinstance.EndActivityIDValidator(v); err != nil {
			return &ValidationError{Name: "end_activity_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.end_activity_id": %w`, err)}
		}
	}
	if v, ok := hpiuo.mutation.SuperProcessInstanceID(); ok {
		if err := historicprocessinstance.SuperProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "super_process_instance_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.super_process_instance_id": %w`, err)}
		}
	}
	if v, ok := hpiuo.mutation.RootProcessInstanceID(); ok {
		if err := historicprocessinstance.RootProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "root_process_instance_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.root_process_instance_id": %w`, err)}
		}
	}
	if v, ok := hpiuo.mutation.SuperCaseInstanceID(); ok {
		if err := historicprocessinstance.SuperCaseInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "super_case_instance_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.super_case_instance_id": %w`, err)}
		}
	}
	if v, ok := hpiuo.mutation.CaseInstanceID(); ok {
		if err := historicprocessinstance.CaseInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "case_instance_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.case_instance_id": %w`, err)}
		}
	}
	if v, ok := hpiuo.mutation.DeleteReason(); ok {
		if err := historicprocessinstance.DeleteReasonValidator(v); err != nil {
			return &ValidationError{Name: "delete_reason", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.delete_reason": %w`, err)}
		}
	}
	if v, ok := hpiuo.mutation.TenantID(); ok {
		if err := historicprocessinstance.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.tenant_id": %w`, err)}
		}
	}
	if v, ok := hpiuo.mutation.State(); ok {
		if err := historicprocessinstance.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.state": %w`, err)}
		}
	}
	if v, ok := hpiuo.mutation.RemovalTime(); ok {
		if err := historicprocessinstance.RemovalTimeValidator(v); err != nil {
			return &ValidationError{Name: "removal_time", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.removal_time": %w`, err)}
		}
	}
	return nil
}

func (hpiuo *HistoricProcessInstanceUpdateOne) sqlSave(ctx context.Context) (_node *HistoricProcessInstance, err error) {
	if err := hpiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(historicprocessinstance.Table, historicprocessinstance.Columns, sqlgraph.NewFieldSpec(historicprocessinstance.FieldID, field.TypeInt64))
	id, ok := hpiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HistoricProcessInstance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hpiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, historicprocessinstance.FieldID)
		for _, f := range fields {
			if !historicprocessinstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != historicprocessinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hpiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hpiuo.mutation.ProcessInstanceID(); ok {
		_spec.SetField(historicprocessinstance.FieldProcessInstanceID, field.TypeString, value)
	}
	if value, ok := hpiuo.mutation.BusinessKey(); ok {
		_spec.SetField(historicprocessinstance.FieldBusinessKey, field.TypeString, value)
	}
	if hpiuo.mutation.BusinessKeyCleared() {
		_spec.ClearField(historicprocessinstance.FieldBusinessKey, field.TypeString)
	}
	if value, ok := hpiuo.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(historicprocessinstance.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := hpiuo.mutation.AddedProcessDefinitionID(); ok {
		_spec.AddField(historicprocessinstance.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := hpiuo.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(historicprocessinstance.FieldProcessDefinitionKey, field.TypeString, value)
	}
	if value, ok := hpiuo.mutation.ProcessDefinitionName(); ok {
		_spec.SetField(historicprocessinstance.FieldProcessDefinitionName, field.TypeString, value)
	}
	if hpiuo.mutation.ProcessDefinitionNameCleared() {
		_spec.ClearField(historicprocessinstance.FieldProcessDefinitionName, field.TypeString)
	}
	if value, ok := hpiuo.mutation.ProcessDefinitionVersion(); ok {
		_spec.SetField(historicprocessinstance.FieldProcessDefinitionVersion, field.TypeInt32, value)
	}
	if value, ok := hpiuo.mutation.AddedProcessDefinitionVersion(); ok {
		_spec.AddField(historicprocessinstance.FieldProcessDefinitionVersion, field.TypeInt32, value)
	}
	if value, ok := hpiuo.mutation.DeploymentID(); ok {
		_spec.SetField(historicprocessinstance.FieldDeploymentID, field.TypeString, value)
	}
	if hpiuo.mutation.DeploymentIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldDeploymentID, field.TypeString)
	}
	if value, ok := hpiuo.mutation.StartUserID(); ok {
		_spec.SetField(historicprocessinstance.FieldStartUserID, field.TypeString, value)
	}
	if hpiuo.mutation.StartUserIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldStartUserID, field.TypeString)
	}
	if value, ok := hpiuo.mutation.StartTime(); ok {
		_spec.SetField(historicprocessinstance.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := hpiuo.mutation.EndTime(); ok {
		_spec.SetField(historicprocessinstance.FieldEndTime, field.TypeTime, value)
	}
	if hpiuo.mutation.EndTimeCleared() {
		_spec.ClearField(historicprocessinstance.FieldEndTime, field.TypeTime)
	}
	if value, ok := hpiuo.mutation.Duration(); ok {
		_spec.SetField(historicprocessinstance.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := hpiuo.mutation.AddedDuration(); ok {
		_spec.AddField(historicprocessinstance.FieldDuration, field.TypeInt64, value)
	}
	if hpiuo.mutation.DurationCleared() {
		_spec.ClearField(historicprocessinstance.FieldDuration, field.TypeInt64)
	}
	if value, ok := hpiuo.mutation.StartActivityID(); ok {
		_spec.SetField(historicprocessinstance.FieldStartActivityID, field.TypeString, value)
	}
	if hpiuo.mutation.StartActivityIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldStartActivityID, field.TypeString)
	}
	if value, ok := hpiuo.mutation.EndActivityID(); ok {
		_spec.SetField(historicprocessinstance.FieldEndActivityID, field.TypeString, value)
	}
	if hpiuo.mutation.EndActivityIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldEndActivityID, field.TypeString)
	}
	if value, ok := hpiuo.mutation.SuperProcessInstanceID(); ok {
		_spec.SetField(historicprocessinstance.FieldSuperProcessInstanceID, field.TypeString, value)
	}
	if hpiuo.mutation.SuperProcessInstanceIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldSuperProcessInstanceID, field.TypeString)
	}
	if value, ok := hpiuo.mutation.RootProcessInstanceID(); ok {
		_spec.SetField(historicprocessinstance.FieldRootProcessInstanceID, field.TypeString, value)
	}
	if hpiuo.mutation.RootProcessInstanceIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldRootProcessInstanceID, field.TypeString)
	}
	if value, ok := hpiuo.mutation.SuperCaseInstanceID(); ok {
		_spec.SetField(historicprocessinstance.FieldSuperCaseInstanceID, field.TypeString, value)
	}
	if hpiuo.mutation.SuperCaseInstanceIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldSuperCaseInstanceID, field.TypeString)
	}
	if value, ok := hpiuo.mutation.CaseInstanceID(); ok {
		_spec.SetField(historicprocessinstance.FieldCaseInstanceID, field.TypeString, value)
	}
	if hpiuo.mutation.CaseInstanceIDCleared() {
		_spec.ClearField(historicprocessinstance.FieldCaseInstanceID, field.TypeString)
	}
	if value, ok := hpiuo.mutation.DeleteReason(); ok {
		_spec.SetField(historicprocessinstance.FieldDeleteReason, field.TypeString, value)
	}
	if hpiuo.mutation.DeleteReasonCleared() {
		_spec.ClearField(historicprocessinstance.FieldDeleteReason, field.TypeString)
	}
	if value, ok := hpiuo.mutation.TenantID(); ok {
		_spec.SetField(historicprocessinstance.FieldTenantID, field.TypeString, value)
	}
	if value, ok := hpiuo.mutation.State(); ok {
		_spec.SetField(historicprocessinstance.FieldState, field.TypeString, value)
	}
	if hpiuo.mutation.StateCleared() {
		_spec.ClearField(historicprocessinstance.FieldState, field.TypeString)
	}
	if value, ok := hpiuo.mutation.RemovalTime(); ok {
		_spec.SetField(historicprocessinstance.FieldRemovalTime, field.TypeString, value)
	}
	if hpiuo.mutation.RemovalTimeCleared() {
		_spec.ClearField(historicprocessinstance.FieldRemovalTime, field.TypeString)
	}
	if value, ok := hpiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(historicprocessinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &HistoricProcessInstance{config: hpiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hpiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{historicprocessinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hpiuo.mutation.done = true
	return _node, nil
}
