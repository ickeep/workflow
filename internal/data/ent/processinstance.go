// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processinstance"
)

// ProcessInstance is the model entity for the ProcessInstance schema.
type ProcessInstance struct {
	config `json:"-"`
	// ID of the ent.
	// 流程实例ID
	ID int64 `json:"id,omitempty"`
	// 业务标识
	BusinessKey string `json:"business_key,omitempty"`
	// 流程定义ID
	ProcessDefinitionID int64 `json:"process_definition_id,omitempty"`
	// 流程定义标识
	ProcessDefinitionKey string `json:"process_definition_key,omitempty"`
	// 流程定义名称
	ProcessDefinitionName string `json:"process_definition_name,omitempty"`
	// 流程定义版本
	ProcessDefinitionVersion int32 `json:"process_definition_version,omitempty"`
	// 部署ID
	DeploymentID string `json:"deployment_id,omitempty"`
	// 启动用户ID
	StartUserID string `json:"start_user_id,omitempty"`
	// 启动时间
	StartTime time.Time `json:"start_time,omitempty"`
	// 结束时间
	EndTime *time.Time `json:"end_time,omitempty"`
	// 持续时间(毫秒)
	Duration int64 `json:"duration,omitempty"`
	// 删除原因
	DeleteReason string `json:"delete_reason,omitempty"`
	// 父流程实例ID
	SuperProcessInstanceID string `json:"super_process_instance_id,omitempty"`
	// 根流程实例ID
	RootProcessInstanceID string `json:"root_process_instance_id,omitempty"`
	// 是否挂起
	Suspended bool `json:"suspended,omitempty"`
	// 租户ID
	TenantID string `json:"tenant_id,omitempty"`
	// 流程实例名称
	Name string `json:"name,omitempty"`
	// 流程实例描述
	Description string `json:"description,omitempty"`
	// 回调ID
	CallbackID string `json:"callback_id,omitempty"`
	// 回调类型
	CallbackType string `json:"callback_type,omitempty"`
	// 引用ID
	ReferenceID string `json:"reference_id,omitempty"`
	// 引用类型
	ReferenceType string `json:"reference_type,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcessInstance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case processinstance.FieldSuspended:
			values[i] = new(sql.NullBool)
		case processinstance.FieldID, processinstance.FieldProcessDefinitionID, processinstance.FieldProcessDefinitionVersion, processinstance.FieldDuration:
			values[i] = new(sql.NullInt64)
		case processinstance.FieldBusinessKey, processinstance.FieldProcessDefinitionKey, processinstance.FieldProcessDefinitionName, processinstance.FieldDeploymentID, processinstance.FieldStartUserID, processinstance.FieldDeleteReason, processinstance.FieldSuperProcessInstanceID, processinstance.FieldRootProcessInstanceID, processinstance.FieldTenantID, processinstance.FieldName, processinstance.FieldDescription, processinstance.FieldCallbackID, processinstance.FieldCallbackType, processinstance.FieldReferenceID, processinstance.FieldReferenceType:
			values[i] = new(sql.NullString)
		case processinstance.FieldStartTime, processinstance.FieldEndTime, processinstance.FieldCreatedAt, processinstance.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcessInstance fields.
func (pi *ProcessInstance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case processinstance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int64(value.Int64)
		case processinstance.FieldBusinessKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_key", values[i])
			} else if value.Valid {
				pi.BusinessKey = value.String
			}
		case processinstance.FieldProcessDefinitionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field process_definition_id", values[i])
			} else if value.Valid {
				pi.ProcessDefinitionID = value.Int64
			}
		case processinstance.FieldProcessDefinitionKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_definition_key", values[i])
			} else if value.Valid {
				pi.ProcessDefinitionKey = value.String
			}
		case processinstance.FieldProcessDefinitionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_definition_name", values[i])
			} else if value.Valid {
				pi.ProcessDefinitionName = value.String
			}
		case processinstance.FieldProcessDefinitionVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field process_definition_version", values[i])
			} else if value.Valid {
				pi.ProcessDefinitionVersion = int32(value.Int64)
			}
		case processinstance.FieldDeploymentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_id", values[i])
			} else if value.Valid {
				pi.DeploymentID = value.String
			}
		case processinstance.FieldStartUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_user_id", values[i])
			} else if value.Valid {
				pi.StartUserID = value.String
			}
		case processinstance.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				pi.StartTime = value.Time
			}
		case processinstance.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				pi.EndTime = new(time.Time)
				*pi.EndTime = value.Time
			}
		case processinstance.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				pi.Duration = value.Int64
			}
		case processinstance.FieldDeleteReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delete_reason", values[i])
			} else if value.Valid {
				pi.DeleteReason = value.String
			}
		case processinstance.FieldSuperProcessInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field super_process_instance_id", values[i])
			} else if value.Valid {
				pi.SuperProcessInstanceID = value.String
			}
		case processinstance.FieldRootProcessInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field root_process_instance_id", values[i])
			} else if value.Valid {
				pi.RootProcessInstanceID = value.String
			}
		case processinstance.FieldSuspended:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field suspended", values[i])
			} else if value.Valid {
				pi.Suspended = value.Bool
			}
		case processinstance.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				pi.TenantID = value.String
			}
		case processinstance.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pi.Name = value.String
			}
		case processinstance.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pi.Description = value.String
			}
		case processinstance.FieldCallbackID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field callback_id", values[i])
			} else if value.Valid {
				pi.CallbackID = value.String
			}
		case processinstance.FieldCallbackType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field callback_type", values[i])
			} else if value.Valid {
				pi.CallbackType = value.String
			}
		case processinstance.FieldReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_id", values[i])
			} else if value.Valid {
				pi.ReferenceID = value.String
			}
		case processinstance.FieldReferenceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_type", values[i])
			} else if value.Valid {
				pi.ReferenceType = value.String
			}
		case processinstance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case processinstance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = value.Time
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProcessInstance.
// This includes values selected through modifiers, order, etc.
func (pi *ProcessInstance) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// Update returns a builder for updating this ProcessInstance.
// Note that you need to call ProcessInstance.Unwrap() before calling this method if this ProcessInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *ProcessInstance) Update() *ProcessInstanceUpdateOne {
	return NewProcessInstanceClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the ProcessInstance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *ProcessInstance) Unwrap() *ProcessInstance {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProcessInstance is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *ProcessInstance) String() string {
	var builder strings.Builder
	builder.WriteString("ProcessInstance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("business_key=")
	builder.WriteString(pi.BusinessKey)
	builder.WriteString(", ")
	builder.WriteString("process_definition_id=")
	builder.WriteString(fmt.Sprintf("%v", pi.ProcessDefinitionID))
	builder.WriteString(", ")
	builder.WriteString("process_definition_key=")
	builder.WriteString(pi.ProcessDefinitionKey)
	builder.WriteString(", ")
	builder.WriteString("process_definition_name=")
	builder.WriteString(pi.ProcessDefinitionName)
	builder.WriteString(", ")
	builder.WriteString("process_definition_version=")
	builder.WriteString(fmt.Sprintf("%v", pi.ProcessDefinitionVersion))
	builder.WriteString(", ")
	builder.WriteString("deployment_id=")
	builder.WriteString(pi.DeploymentID)
	builder.WriteString(", ")
	builder.WriteString("start_user_id=")
	builder.WriteString(pi.StartUserID)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(pi.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pi.EndTime; v != nil {
		builder.WriteString("end_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", pi.Duration))
	builder.WriteString(", ")
	builder.WriteString("delete_reason=")
	builder.WriteString(pi.DeleteReason)
	builder.WriteString(", ")
	builder.WriteString("super_process_instance_id=")
	builder.WriteString(pi.SuperProcessInstanceID)
	builder.WriteString(", ")
	builder.WriteString("root_process_instance_id=")
	builder.WriteString(pi.RootProcessInstanceID)
	builder.WriteString(", ")
	builder.WriteString("suspended=")
	builder.WriteString(fmt.Sprintf("%v", pi.Suspended))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(pi.TenantID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pi.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(pi.Description)
	builder.WriteString(", ")
	builder.WriteString("callback_id=")
	builder.WriteString(pi.CallbackID)
	builder.WriteString(", ")
	builder.WriteString("callback_type=")
	builder.WriteString(pi.CallbackType)
	builder.WriteString(", ")
	builder.WriteString("reference_id=")
	builder.WriteString(pi.ReferenceID)
	builder.WriteString(", ")
	builder.WriteString("reference_type=")
	builder.WriteString(pi.ReferenceType)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProcessInstances is a parsable slice of ProcessInstance.
type ProcessInstances []*ProcessInstance
