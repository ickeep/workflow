// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/predicate"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processdefinition"
)

// ProcessDefinitionUpdate is the builder for updating ProcessDefinition entities.
type ProcessDefinitionUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessDefinitionMutation
}

// Where appends a list predicates to the ProcessDefinitionUpdate builder.
func (pdu *ProcessDefinitionUpdate) Where(ps ...predicate.ProcessDefinition) *ProcessDefinitionUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetKey sets the "key" field.
func (pdu *ProcessDefinitionUpdate) SetKey(s string) *ProcessDefinitionUpdate {
	pdu.mutation.SetKey(s)
	return pdu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (pdu *ProcessDefinitionUpdate) SetNillableKey(s *string) *ProcessDefinitionUpdate {
	if s != nil {
		pdu.SetKey(*s)
	}
	return pdu
}

// SetName sets the "name" field.
func (pdu *ProcessDefinitionUpdate) SetName(s string) *ProcessDefinitionUpdate {
	pdu.mutation.SetName(s)
	return pdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pdu *ProcessDefinitionUpdate) SetNillableName(s *string) *ProcessDefinitionUpdate {
	if s != nil {
		pdu.SetName(*s)
	}
	return pdu
}

// SetCategory sets the "category" field.
func (pdu *ProcessDefinitionUpdate) SetCategory(s string) *ProcessDefinitionUpdate {
	pdu.mutation.SetCategory(s)
	return pdu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pdu *ProcessDefinitionUpdate) SetNillableCategory(s *string) *ProcessDefinitionUpdate {
	if s != nil {
		pdu.SetCategory(*s)
	}
	return pdu
}

// ClearCategory clears the value of the "category" field.
func (pdu *ProcessDefinitionUpdate) ClearCategory() *ProcessDefinitionUpdate {
	pdu.mutation.ClearCategory()
	return pdu
}

// SetVersion sets the "version" field.
func (pdu *ProcessDefinitionUpdate) SetVersion(i int32) *ProcessDefinitionUpdate {
	pdu.mutation.ResetVersion()
	pdu.mutation.SetVersion(i)
	return pdu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pdu *ProcessDefinitionUpdate) SetNillableVersion(i *int32) *ProcessDefinitionUpdate {
	if i != nil {
		pdu.SetVersion(*i)
	}
	return pdu
}

// AddVersion adds i to the "version" field.
func (pdu *ProcessDefinitionUpdate) AddVersion(i int32) *ProcessDefinitionUpdate {
	pdu.mutation.AddVersion(i)
	return pdu
}

// SetDescription sets the "description" field.
func (pdu *ProcessDefinitionUpdate) SetDescription(s string) *ProcessDefinitionUpdate {
	pdu.mutation.SetDescription(s)
	return pdu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pdu *ProcessDefinitionUpdate) SetNillableDescription(s *string) *ProcessDefinitionUpdate {
	if s != nil {
		pdu.SetDescription(*s)
	}
	return pdu
}

// ClearDescription clears the value of the "description" field.
func (pdu *ProcessDefinitionUpdate) ClearDescription() *ProcessDefinitionUpdate {
	pdu.mutation.ClearDescription()
	return pdu
}

// SetDeployTime sets the "deploy_time" field.
func (pdu *ProcessDefinitionUpdate) SetDeployTime(t time.Time) *ProcessDefinitionUpdate {
	pdu.mutation.SetDeployTime(t)
	return pdu
}

// SetNillableDeployTime sets the "deploy_time" field if the given value is not nil.
func (pdu *ProcessDefinitionUpdate) SetNillableDeployTime(t *time.Time) *ProcessDefinitionUpdate {
	if t != nil {
		pdu.SetDeployTime(*t)
	}
	return pdu
}

// SetResource sets the "resource" field.
func (pdu *ProcessDefinitionUpdate) SetResource(s string) *ProcessDefinitionUpdate {
	pdu.mutation.SetResource(s)
	return pdu
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (pdu *ProcessDefinitionUpdate) SetNillableResource(s *string) *ProcessDefinitionUpdate {
	if s != nil {
		pdu.SetResource(*s)
	}
	return pdu
}

// ClearResource clears the value of the "resource" field.
func (pdu *ProcessDefinitionUpdate) ClearResource() *ProcessDefinitionUpdate {
	pdu.mutation.ClearResource()
	return pdu
}

// SetDiagramData sets the "diagram_data" field.
func (pdu *ProcessDefinitionUpdate) SetDiagramData(m map[string]interface{}) *ProcessDefinitionUpdate {
	pdu.mutation.SetDiagramData(m)
	return pdu
}

// ClearDiagramData clears the value of the "diagram_data" field.
func (pdu *ProcessDefinitionUpdate) ClearDiagramData() *ProcessDefinitionUpdate {
	pdu.mutation.ClearDiagramData()
	return pdu
}

// SetHasStartForm sets the "has_start_form" field.
func (pdu *ProcessDefinitionUpdate) SetHasStartForm(b bool) *ProcessDefinitionUpdate {
	pdu.mutation.SetHasStartForm(b)
	return pdu
}

// SetNillableHasStartForm sets the "has_start_form" field if the given value is not nil.
func (pdu *ProcessDefinitionUpdate) SetNillableHasStartForm(b *bool) *ProcessDefinitionUpdate {
	if b != nil {
		pdu.SetHasStartForm(*b)
	}
	return pdu
}

// SetSuspended sets the "suspended" field.
func (pdu *ProcessDefinitionUpdate) SetSuspended(b bool) *ProcessDefinitionUpdate {
	pdu.mutation.SetSuspended(b)
	return pdu
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (pdu *ProcessDefinitionUpdate) SetNillableSuspended(b *bool) *ProcessDefinitionUpdate {
	if b != nil {
		pdu.SetSuspended(*b)
	}
	return pdu
}

// SetTenantID sets the "tenant_id" field.
func (pdu *ProcessDefinitionUpdate) SetTenantID(s string) *ProcessDefinitionUpdate {
	pdu.mutation.SetTenantID(s)
	return pdu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pdu *ProcessDefinitionUpdate) SetNillableTenantID(s *string) *ProcessDefinitionUpdate {
	if s != nil {
		pdu.SetTenantID(*s)
	}
	return pdu
}

// SetUpdatedAt sets the "updated_at" field.
func (pdu *ProcessDefinitionUpdate) SetUpdatedAt(t time.Time) *ProcessDefinitionUpdate {
	pdu.mutation.SetUpdatedAt(t)
	return pdu
}

// Mutation returns the ProcessDefinitionMutation object of the builder.
func (pdu *ProcessDefinitionUpdate) Mutation() *ProcessDefinitionMutation {
	return pdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *ProcessDefinitionUpdate) Save(ctx context.Context) (int, error) {
	pdu.defaults()
	return withHooks(ctx, pdu.sqlSave, pdu.mutation, pdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *ProcessDefinitionUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *ProcessDefinitionUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *ProcessDefinitionUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdu *ProcessDefinitionUpdate) defaults() {
	if _, ok := pdu.mutation.UpdatedAt(); !ok {
		v := processdefinition.UpdateDefaultUpdatedAt()
		pdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdu *ProcessDefinitionUpdate) check() error {
	if v, ok := pdu.mutation.Key(); ok {
		if err := processdefinition.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.key": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.Name(); ok {
		if err := processdefinition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.name": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.Category(); ok {
		if err := processdefinition.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.category": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.TenantID(); ok {
		if err := processdefinition.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (pdu *ProcessDefinitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(processdefinition.Table, processdefinition.Columns, sqlgraph.NewFieldSpec(processdefinition.FieldID, field.TypeInt64))
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.Key(); ok {
		_spec.SetField(processdefinition.FieldKey, field.TypeString, value)
	}
	if value, ok := pdu.mutation.Name(); ok {
		_spec.SetField(processdefinition.FieldName, field.TypeString, value)
	}
	if value, ok := pdu.mutation.Category(); ok {
		_spec.SetField(processdefinition.FieldCategory, field.TypeString, value)
	}
	if pdu.mutation.CategoryCleared() {
		_spec.ClearField(processdefinition.FieldCategory, field.TypeString)
	}
	if value, ok := pdu.mutation.Version(); ok {
		_spec.SetField(processdefinition.FieldVersion, field.TypeInt32, value)
	}
	if value, ok := pdu.mutation.AddedVersion(); ok {
		_spec.AddField(processdefinition.FieldVersion, field.TypeInt32, value)
	}
	if value, ok := pdu.mutation.Description(); ok {
		_spec.SetField(processdefinition.FieldDescription, field.TypeString, value)
	}
	if pdu.mutation.DescriptionCleared() {
		_spec.ClearField(processdefinition.FieldDescription, field.TypeString)
	}
	if value, ok := pdu.mutation.DeployTime(); ok {
		_spec.SetField(processdefinition.FieldDeployTime, field.TypeTime, value)
	}
	if value, ok := pdu.mutation.Resource(); ok {
		_spec.SetField(processdefinition.FieldResource, field.TypeString, value)
	}
	if pdu.mutation.ResourceCleared() {
		_spec.ClearField(processdefinition.FieldResource, field.TypeString)
	}
	if value, ok := pdu.mutation.DiagramData(); ok {
		_spec.SetField(processdefinition.FieldDiagramData, field.TypeJSON, value)
	}
	if pdu.mutation.DiagramDataCleared() {
		_spec.ClearField(processdefinition.FieldDiagramData, field.TypeJSON)
	}
	if value, ok := pdu.mutation.HasStartForm(); ok {
		_spec.SetField(processdefinition.FieldHasStartForm, field.TypeBool, value)
	}
	if value, ok := pdu.mutation.Suspended(); ok {
		_spec.SetField(processdefinition.FieldSuspended, field.TypeBool, value)
	}
	if value, ok := pdu.mutation.TenantID(); ok {
		_spec.SetField(processdefinition.FieldTenantID, field.TypeString, value)
	}
	if value, ok := pdu.mutation.UpdatedAt(); ok {
		_spec.SetField(processdefinition.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processdefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdu.mutation.done = true
	return n, nil
}

// ProcessDefinitionUpdateOne is the builder for updating a single ProcessDefinition entity.
type ProcessDefinitionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessDefinitionMutation
}

// SetKey sets the "key" field.
func (pduo *ProcessDefinitionUpdateOne) SetKey(s string) *ProcessDefinitionUpdateOne {
	pduo.mutation.SetKey(s)
	return pduo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (pduo *ProcessDefinitionUpdateOne) SetNillableKey(s *string) *ProcessDefinitionUpdateOne {
	if s != nil {
		pduo.SetKey(*s)
	}
	return pduo
}

// SetName sets the "name" field.
func (pduo *ProcessDefinitionUpdateOne) SetName(s string) *ProcessDefinitionUpdateOne {
	pduo.mutation.SetName(s)
	return pduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pduo *ProcessDefinitionUpdateOne) SetNillableName(s *string) *ProcessDefinitionUpdateOne {
	if s != nil {
		pduo.SetName(*s)
	}
	return pduo
}

// SetCategory sets the "category" field.
func (pduo *ProcessDefinitionUpdateOne) SetCategory(s string) *ProcessDefinitionUpdateOne {
	pduo.mutation.SetCategory(s)
	return pduo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pduo *ProcessDefinitionUpdateOne) SetNillableCategory(s *string) *ProcessDefinitionUpdateOne {
	if s != nil {
		pduo.SetCategory(*s)
	}
	return pduo
}

// ClearCategory clears the value of the "category" field.
func (pduo *ProcessDefinitionUpdateOne) ClearCategory() *ProcessDefinitionUpdateOne {
	pduo.mutation.ClearCategory()
	return pduo
}

// SetVersion sets the "version" field.
func (pduo *ProcessDefinitionUpdateOne) SetVersion(i int32) *ProcessDefinitionUpdateOne {
	pduo.mutation.ResetVersion()
	pduo.mutation.SetVersion(i)
	return pduo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pduo *ProcessDefinitionUpdateOne) SetNillableVersion(i *int32) *ProcessDefinitionUpdateOne {
	if i != nil {
		pduo.SetVersion(*i)
	}
	return pduo
}

// AddVersion adds i to the "version" field.
func (pduo *ProcessDefinitionUpdateOne) AddVersion(i int32) *ProcessDefinitionUpdateOne {
	pduo.mutation.AddVersion(i)
	return pduo
}

// SetDescription sets the "description" field.
func (pduo *ProcessDefinitionUpdateOne) SetDescription(s string) *ProcessDefinitionUpdateOne {
	pduo.mutation.SetDescription(s)
	return pduo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pduo *ProcessDefinitionUpdateOne) SetNillableDescription(s *string) *ProcessDefinitionUpdateOne {
	if s != nil {
		pduo.SetDescription(*s)
	}
	return pduo
}

// ClearDescription clears the value of the "description" field.
func (pduo *ProcessDefinitionUpdateOne) ClearDescription() *ProcessDefinitionUpdateOne {
	pduo.mutation.ClearDescription()
	return pduo
}

// SetDeployTime sets the "deploy_time" field.
func (pduo *ProcessDefinitionUpdateOne) SetDeployTime(t time.Time) *ProcessDefinitionUpdateOne {
	pduo.mutation.SetDeployTime(t)
	return pduo
}

// SetNillableDeployTime sets the "deploy_time" field if the given value is not nil.
func (pduo *ProcessDefinitionUpdateOne) SetNillableDeployTime(t *time.Time) *ProcessDefinitionUpdateOne {
	if t != nil {
		pduo.SetDeployTime(*t)
	}
	return pduo
}

// SetResource sets the "resource" field.
func (pduo *ProcessDefinitionUpdateOne) SetResource(s string) *ProcessDefinitionUpdateOne {
	pduo.mutation.SetResource(s)
	return pduo
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (pduo *ProcessDefinitionUpdateOne) SetNillableResource(s *string) *ProcessDefinitionUpdateOne {
	if s != nil {
		pduo.SetResource(*s)
	}
	return pduo
}

// ClearResource clears the value of the "resource" field.
func (pduo *ProcessDefinitionUpdateOne) ClearResource() *ProcessDefinitionUpdateOne {
	pduo.mutation.ClearResource()
	return pduo
}

// SetDiagramData sets the "diagram_data" field.
func (pduo *ProcessDefinitionUpdateOne) SetDiagramData(m map[string]interface{}) *ProcessDefinitionUpdateOne {
	pduo.mutation.SetDiagramData(m)
	return pduo
}

// ClearDiagramData clears the value of the "diagram_data" field.
func (pduo *ProcessDefinitionUpdateOne) ClearDiagramData() *ProcessDefinitionUpdateOne {
	pduo.mutation.ClearDiagramData()
	return pduo
}

// SetHasStartForm sets the "has_start_form" field.
func (pduo *ProcessDefinitionUpdateOne) SetHasStartForm(b bool) *ProcessDefinitionUpdateOne {
	pduo.mutation.SetHasStartForm(b)
	return pduo
}

// SetNillableHasStartForm sets the "has_start_form" field if the given value is not nil.
func (pduo *ProcessDefinitionUpdateOne) SetNillableHasStartForm(b *bool) *ProcessDefinitionUpdateOne {
	if b != nil {
		pduo.SetHasStartForm(*b)
	}
	return pduo
}

// SetSuspended sets the "suspended" field.
func (pduo *ProcessDefinitionUpdateOne) SetSuspended(b bool) *ProcessDefinitionUpdateOne {
	pduo.mutation.SetSuspended(b)
	return pduo
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (pduo *ProcessDefinitionUpdateOne) SetNillableSuspended(b *bool) *ProcessDefinitionUpdateOne {
	if b != nil {
		pduo.SetSuspended(*b)
	}
	return pduo
}

// SetTenantID sets the "tenant_id" field.
func (pduo *ProcessDefinitionUpdateOne) SetTenantID(s string) *ProcessDefinitionUpdateOne {
	pduo.mutation.SetTenantID(s)
	return pduo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pduo *ProcessDefinitionUpdateOne) SetNillableTenantID(s *string) *ProcessDefinitionUpdateOne {
	if s != nil {
		pduo.SetTenantID(*s)
	}
	return pduo
}

// SetUpdatedAt sets the "updated_at" field.
func (pduo *ProcessDefinitionUpdateOne) SetUpdatedAt(t time.Time) *ProcessDefinitionUpdateOne {
	pduo.mutation.SetUpdatedAt(t)
	return pduo
}

// Mutation returns the ProcessDefinitionMutation object of the builder.
func (pduo *ProcessDefinitionUpdateOne) Mutation() *ProcessDefinitionMutation {
	return pduo.mutation
}

// Where appends a list predicates to the ProcessDefinitionUpdate builder.
func (pduo *ProcessDefinitionUpdateOne) Where(ps ...predicate.ProcessDefinition) *ProcessDefinitionUpdateOne {
	pduo.mutation.Where(ps...)
	return pduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *ProcessDefinitionUpdateOne) Select(field string, fields ...string) *ProcessDefinitionUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated ProcessDefinition entity.
func (pduo *ProcessDefinitionUpdateOne) Save(ctx context.Context) (*ProcessDefinition, error) {
	pduo.defaults()
	return withHooks(ctx, pduo.sqlSave, pduo.mutation, pduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *ProcessDefinitionUpdateOne) SaveX(ctx context.Context) *ProcessDefinition {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *ProcessDefinitionUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *ProcessDefinitionUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pduo *ProcessDefinitionUpdateOne) defaults() {
	if _, ok := pduo.mutation.UpdatedAt(); !ok {
		v := processdefinition.UpdateDefaultUpdatedAt()
		pduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pduo *ProcessDefinitionUpdateOne) check() error {
	if v, ok := pduo.mutation.Key(); ok {
		if err := processdefinition.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.key": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.Name(); ok {
		if err := processdefinition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.name": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.Category(); ok {
		if err := processdefinition.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.category": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.TenantID(); ok {
		if err := processdefinition.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (pduo *ProcessDefinitionUpdateOne) sqlSave(ctx context.Context) (_node *ProcessDefinition, err error) {
	if err := pduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(processdefinition.Table, processdefinition.Columns, sqlgraph.NewFieldSpec(processdefinition.FieldID, field.TypeInt64))
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProcessDefinition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, processdefinition.FieldID)
		for _, f := range fields {
			if !processdefinition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != processdefinition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.Key(); ok {
		_spec.SetField(processdefinition.FieldKey, field.TypeString, value)
	}
	if value, ok := pduo.mutation.Name(); ok {
		_spec.SetField(processdefinition.FieldName, field.TypeString, value)
	}
	if value, ok := pduo.mutation.Category(); ok {
		_spec.SetField(processdefinition.FieldCategory, field.TypeString, value)
	}
	if pduo.mutation.CategoryCleared() {
		_spec.ClearField(processdefinition.FieldCategory, field.TypeString)
	}
	if value, ok := pduo.mutation.Version(); ok {
		_spec.SetField(processdefinition.FieldVersion, field.TypeInt32, value)
	}
	if value, ok := pduo.mutation.AddedVersion(); ok {
		_spec.AddField(processdefinition.FieldVersion, field.TypeInt32, value)
	}
	if value, ok := pduo.mutation.Description(); ok {
		_spec.SetField(processdefinition.FieldDescription, field.TypeString, value)
	}
	if pduo.mutation.DescriptionCleared() {
		_spec.ClearField(processdefinition.FieldDescription, field.TypeString)
	}
	if value, ok := pduo.mutation.DeployTime(); ok {
		_spec.SetField(processdefinition.FieldDeployTime, field.TypeTime, value)
	}
	if value, ok := pduo.mutation.Resource(); ok {
		_spec.SetField(processdefinition.FieldResource, field.TypeString, value)
	}
	if pduo.mutation.ResourceCleared() {
		_spec.ClearField(processdefinition.FieldResource, field.TypeString)
	}
	if value, ok := pduo.mutation.DiagramData(); ok {
		_spec.SetField(processdefinition.FieldDiagramData, field.TypeJSON, value)
	}
	if pduo.mutation.DiagramDataCleared() {
		_spec.ClearField(processdefinition.FieldDiagramData, field.TypeJSON)
	}
	if value, ok := pduo.mutation.HasStartForm(); ok {
		_spec.SetField(processdefinition.FieldHasStartForm, field.TypeBool, value)
	}
	if value, ok := pduo.mutation.Suspended(); ok {
		_spec.SetField(processdefinition.FieldSuspended, field.TypeBool, value)
	}
	if value, ok := pduo.mutation.TenantID(); ok {
		_spec.SetField(processdefinition.FieldTenantID, field.TypeString, value)
	}
	if value, ok := pduo.mutation.UpdatedAt(); ok {
		_spec.SetField(processdefinition.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ProcessDefinition{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processdefinition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pduo.mutation.done = true
	return _node, nil
}
