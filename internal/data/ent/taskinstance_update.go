// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/predicate"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/taskinstance"
)

// TaskInstanceUpdate is the builder for updating TaskInstance entities.
type TaskInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *TaskInstanceMutation
}

// Where appends a list predicates to the TaskInstanceUpdate builder.
func (tiu *TaskInstanceUpdate) Where(ps ...predicate.TaskInstance) *TaskInstanceUpdate {
	tiu.mutation.Where(ps...)
	return tiu
}

// SetName sets the "name" field.
func (tiu *TaskInstanceUpdate) SetName(s string) *TaskInstanceUpdate {
	tiu.mutation.SetName(s)
	return tiu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableName(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetName(*s)
	}
	return tiu
}

// ClearName clears the value of the "name" field.
func (tiu *TaskInstanceUpdate) ClearName() *TaskInstanceUpdate {
	tiu.mutation.ClearName()
	return tiu
}

// SetDescription sets the "description" field.
func (tiu *TaskInstanceUpdate) SetDescription(s string) *TaskInstanceUpdate {
	tiu.mutation.SetDescription(s)
	return tiu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableDescription(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetDescription(*s)
	}
	return tiu
}

// ClearDescription clears the value of the "description" field.
func (tiu *TaskInstanceUpdate) ClearDescription() *TaskInstanceUpdate {
	tiu.mutation.ClearDescription()
	return tiu
}

// SetTaskDefinitionKey sets the "task_definition_key" field.
func (tiu *TaskInstanceUpdate) SetTaskDefinitionKey(s string) *TaskInstanceUpdate {
	tiu.mutation.SetTaskDefinitionKey(s)
	return tiu
}

// SetNillableTaskDefinitionKey sets the "task_definition_key" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableTaskDefinitionKey(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetTaskDefinitionKey(*s)
	}
	return tiu
}

// SetAssignee sets the "assignee" field.
func (tiu *TaskInstanceUpdate) SetAssignee(s string) *TaskInstanceUpdate {
	tiu.mutation.SetAssignee(s)
	return tiu
}

// SetNillableAssignee sets the "assignee" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableAssignee(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetAssignee(*s)
	}
	return tiu
}

// ClearAssignee clears the value of the "assignee" field.
func (tiu *TaskInstanceUpdate) ClearAssignee() *TaskInstanceUpdate {
	tiu.mutation.ClearAssignee()
	return tiu
}

// SetOwner sets the "owner" field.
func (tiu *TaskInstanceUpdate) SetOwner(s string) *TaskInstanceUpdate {
	tiu.mutation.SetOwner(s)
	return tiu
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableOwner(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetOwner(*s)
	}
	return tiu
}

// ClearOwner clears the value of the "owner" field.
func (tiu *TaskInstanceUpdate) ClearOwner() *TaskInstanceUpdate {
	tiu.mutation.ClearOwner()
	return tiu
}

// SetDelegation sets the "delegation" field.
func (tiu *TaskInstanceUpdate) SetDelegation(s string) *TaskInstanceUpdate {
	tiu.mutation.SetDelegation(s)
	return tiu
}

// SetNillableDelegation sets the "delegation" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableDelegation(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetDelegation(*s)
	}
	return tiu
}

// ClearDelegation clears the value of the "delegation" field.
func (tiu *TaskInstanceUpdate) ClearDelegation() *TaskInstanceUpdate {
	tiu.mutation.ClearDelegation()
	return tiu
}

// SetPriority sets the "priority" field.
func (tiu *TaskInstanceUpdate) SetPriority(i int32) *TaskInstanceUpdate {
	tiu.mutation.ResetPriority()
	tiu.mutation.SetPriority(i)
	return tiu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillablePriority(i *int32) *TaskInstanceUpdate {
	if i != nil {
		tiu.SetPriority(*i)
	}
	return tiu
}

// AddPriority adds i to the "priority" field.
func (tiu *TaskInstanceUpdate) AddPriority(i int32) *TaskInstanceUpdate {
	tiu.mutation.AddPriority(i)
	return tiu
}

// SetCreateTime sets the "create_time" field.
func (tiu *TaskInstanceUpdate) SetCreateTime(t time.Time) *TaskInstanceUpdate {
	tiu.mutation.SetCreateTime(t)
	return tiu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableCreateTime(t *time.Time) *TaskInstanceUpdate {
	if t != nil {
		tiu.SetCreateTime(*t)
	}
	return tiu
}

// SetDueDate sets the "due_date" field.
func (tiu *TaskInstanceUpdate) SetDueDate(t time.Time) *TaskInstanceUpdate {
	tiu.mutation.SetDueDate(t)
	return tiu
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableDueDate(t *time.Time) *TaskInstanceUpdate {
	if t != nil {
		tiu.SetDueDate(*t)
	}
	return tiu
}

// ClearDueDate clears the value of the "due_date" field.
func (tiu *TaskInstanceUpdate) ClearDueDate() *TaskInstanceUpdate {
	tiu.mutation.ClearDueDate()
	return tiu
}

// SetFollowUpDate sets the "follow_up_date" field.
func (tiu *TaskInstanceUpdate) SetFollowUpDate(t time.Time) *TaskInstanceUpdate {
	tiu.mutation.SetFollowUpDate(t)
	return tiu
}

// SetNillableFollowUpDate sets the "follow_up_date" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableFollowUpDate(t *time.Time) *TaskInstanceUpdate {
	if t != nil {
		tiu.SetFollowUpDate(*t)
	}
	return tiu
}

// ClearFollowUpDate clears the value of the "follow_up_date" field.
func (tiu *TaskInstanceUpdate) ClearFollowUpDate() *TaskInstanceUpdate {
	tiu.mutation.ClearFollowUpDate()
	return tiu
}

// SetFormKey sets the "form_key" field.
func (tiu *TaskInstanceUpdate) SetFormKey(s string) *TaskInstanceUpdate {
	tiu.mutation.SetFormKey(s)
	return tiu
}

// SetNillableFormKey sets the "form_key" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableFormKey(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetFormKey(*s)
	}
	return tiu
}

// ClearFormKey clears the value of the "form_key" field.
func (tiu *TaskInstanceUpdate) ClearFormKey() *TaskInstanceUpdate {
	tiu.mutation.ClearFormKey()
	return tiu
}

// SetCategory sets the "category" field.
func (tiu *TaskInstanceUpdate) SetCategory(s string) *TaskInstanceUpdate {
	tiu.mutation.SetCategory(s)
	return tiu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableCategory(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetCategory(*s)
	}
	return tiu
}

// ClearCategory clears the value of the "category" field.
func (tiu *TaskInstanceUpdate) ClearCategory() *TaskInstanceUpdate {
	tiu.mutation.ClearCategory()
	return tiu
}

// SetParentTaskID sets the "parent_task_id" field.
func (tiu *TaskInstanceUpdate) SetParentTaskID(s string) *TaskInstanceUpdate {
	tiu.mutation.SetParentTaskID(s)
	return tiu
}

// SetNillableParentTaskID sets the "parent_task_id" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableParentTaskID(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetParentTaskID(*s)
	}
	return tiu
}

// ClearParentTaskID clears the value of the "parent_task_id" field.
func (tiu *TaskInstanceUpdate) ClearParentTaskID() *TaskInstanceUpdate {
	tiu.mutation.ClearParentTaskID()
	return tiu
}

// SetExecutionID sets the "execution_id" field.
func (tiu *TaskInstanceUpdate) SetExecutionID(s string) *TaskInstanceUpdate {
	tiu.mutation.SetExecutionID(s)
	return tiu
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableExecutionID(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetExecutionID(*s)
	}
	return tiu
}

// ClearExecutionID clears the value of the "execution_id" field.
func (tiu *TaskInstanceUpdate) ClearExecutionID() *TaskInstanceUpdate {
	tiu.mutation.ClearExecutionID()
	return tiu
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (tiu *TaskInstanceUpdate) SetProcessInstanceID(i int64) *TaskInstanceUpdate {
	tiu.mutation.ResetProcessInstanceID()
	tiu.mutation.SetProcessInstanceID(i)
	return tiu
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableProcessInstanceID(i *int64) *TaskInstanceUpdate {
	if i != nil {
		tiu.SetProcessInstanceID(*i)
	}
	return tiu
}

// AddProcessInstanceID adds i to the "process_instance_id" field.
func (tiu *TaskInstanceUpdate) AddProcessInstanceID(i int64) *TaskInstanceUpdate {
	tiu.mutation.AddProcessInstanceID(i)
	return tiu
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (tiu *TaskInstanceUpdate) SetProcessDefinitionID(i int64) *TaskInstanceUpdate {
	tiu.mutation.ResetProcessDefinitionID()
	tiu.mutation.SetProcessDefinitionID(i)
	return tiu
}

// SetNillableProcessDefinitionID sets the "process_definition_id" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableProcessDefinitionID(i *int64) *TaskInstanceUpdate {
	if i != nil {
		tiu.SetProcessDefinitionID(*i)
	}
	return tiu
}

// AddProcessDefinitionID adds i to the "process_definition_id" field.
func (tiu *TaskInstanceUpdate) AddProcessDefinitionID(i int64) *TaskInstanceUpdate {
	tiu.mutation.AddProcessDefinitionID(i)
	return tiu
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (tiu *TaskInstanceUpdate) SetProcessDefinitionKey(s string) *TaskInstanceUpdate {
	tiu.mutation.SetProcessDefinitionKey(s)
	return tiu
}

// SetNillableProcessDefinitionKey sets the "process_definition_key" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableProcessDefinitionKey(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetProcessDefinitionKey(*s)
	}
	return tiu
}

// SetCaseExecutionID sets the "case_execution_id" field.
func (tiu *TaskInstanceUpdate) SetCaseExecutionID(s string) *TaskInstanceUpdate {
	tiu.mutation.SetCaseExecutionID(s)
	return tiu
}

// SetNillableCaseExecutionID sets the "case_execution_id" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableCaseExecutionID(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetCaseExecutionID(*s)
	}
	return tiu
}

// ClearCaseExecutionID clears the value of the "case_execution_id" field.
func (tiu *TaskInstanceUpdate) ClearCaseExecutionID() *TaskInstanceUpdate {
	tiu.mutation.ClearCaseExecutionID()
	return tiu
}

// SetCaseInstanceID sets the "case_instance_id" field.
func (tiu *TaskInstanceUpdate) SetCaseInstanceID(s string) *TaskInstanceUpdate {
	tiu.mutation.SetCaseInstanceID(s)
	return tiu
}

// SetNillableCaseInstanceID sets the "case_instance_id" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableCaseInstanceID(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetCaseInstanceID(*s)
	}
	return tiu
}

// ClearCaseInstanceID clears the value of the "case_instance_id" field.
func (tiu *TaskInstanceUpdate) ClearCaseInstanceID() *TaskInstanceUpdate {
	tiu.mutation.ClearCaseInstanceID()
	return tiu
}

// SetCaseDefinitionID sets the "case_definition_id" field.
func (tiu *TaskInstanceUpdate) SetCaseDefinitionID(s string) *TaskInstanceUpdate {
	tiu.mutation.SetCaseDefinitionID(s)
	return tiu
}

// SetNillableCaseDefinitionID sets the "case_definition_id" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableCaseDefinitionID(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetCaseDefinitionID(*s)
	}
	return tiu
}

// ClearCaseDefinitionID clears the value of the "case_definition_id" field.
func (tiu *TaskInstanceUpdate) ClearCaseDefinitionID() *TaskInstanceUpdate {
	tiu.mutation.ClearCaseDefinitionID()
	return tiu
}

// SetSuspended sets the "suspended" field.
func (tiu *TaskInstanceUpdate) SetSuspended(b bool) *TaskInstanceUpdate {
	tiu.mutation.SetSuspended(b)
	return tiu
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableSuspended(b *bool) *TaskInstanceUpdate {
	if b != nil {
		tiu.SetSuspended(*b)
	}
	return tiu
}

// SetTenantID sets the "tenant_id" field.
func (tiu *TaskInstanceUpdate) SetTenantID(s string) *TaskInstanceUpdate {
	tiu.mutation.SetTenantID(s)
	return tiu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tiu *TaskInstanceUpdate) SetNillableTenantID(s *string) *TaskInstanceUpdate {
	if s != nil {
		tiu.SetTenantID(*s)
	}
	return tiu
}

// SetUpdatedAt sets the "updated_at" field.
func (tiu *TaskInstanceUpdate) SetUpdatedAt(t time.Time) *TaskInstanceUpdate {
	tiu.mutation.SetUpdatedAt(t)
	return tiu
}

// Mutation returns the TaskInstanceMutation object of the builder.
func (tiu *TaskInstanceUpdate) Mutation() *TaskInstanceMutation {
	return tiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tiu *TaskInstanceUpdate) Save(ctx context.Context) (int, error) {
	tiu.defaults()
	return withHooks(ctx, tiu.sqlSave, tiu.mutation, tiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tiu *TaskInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := tiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tiu *TaskInstanceUpdate) Exec(ctx context.Context) error {
	_, err := tiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiu *TaskInstanceUpdate) ExecX(ctx context.Context) {
	if err := tiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tiu *TaskInstanceUpdate) defaults() {
	if _, ok := tiu.mutation.UpdatedAt(); !ok {
		v := taskinstance.UpdateDefaultUpdatedAt()
		tiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tiu *TaskInstanceUpdate) check() error {
	if v, ok := tiu.mutation.Name(); ok {
		if err := taskinstance.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.name": %w`, err)}
		}
	}
	if v, ok := tiu.mutation.TaskDefinitionKey(); ok {
		if err := taskinstance.TaskDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "task_definition_key", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.task_definition_key": %w`, err)}
		}
	}
	if v, ok := tiu.mutation.Assignee(); ok {
		if err := taskinstance.AssigneeValidator(v); err != nil {
			return &ValidationError{Name: "assignee", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.assignee": %w`, err)}
		}
	}
	if v, ok := tiu.mutation.Owner(); ok {
		if err := taskinstance.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.owner": %w`, err)}
		}
	}
	if v, ok := tiu.mutation.Delegation(); ok {
		if err := taskinstance.DelegationValidator(v); err != nil {
			return &ValidationError{Name: "delegation", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.delegation": %w`, err)}
		}
	}
	if v, ok := tiu.mutation.FormKey(); ok {
		if err := taskinstance.FormKeyValidator(v); err != nil {
			return &ValidationError{Name: "form_key", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.form_key": %w`, err)}
		}
	}
	if v, ok := tiu.mutation.Category(); ok {
		if err := taskinstance.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.category": %w`, err)}
		}
	}
	if v, ok := tiu.mutation.ParentTaskID(); ok {
		if err := taskinstance.ParentTaskIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_task_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.parent_task_id": %w`, err)}
		}
	}
	if v, ok := tiu.mutation.ExecutionID(); ok {
		if err := taskinstance.ExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "execution_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.execution_id": %w`, err)}
		}
	}
	if v, ok := tiu.mutation.ProcessDefinitionKey(); ok {
		if err := taskinstance.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.process_definition_key": %w`, err)}
		}
	}
	if v, ok := tiu.mutation.CaseExecutionID(); ok {
		if err := taskinstance.CaseExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "case_execution_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.case_execution_id": %w`, err)}
		}
	}
	if v, ok := tiu.mutation.CaseInstanceID(); ok {
		if err := taskinstance.CaseInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "case_instance_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.case_instance_id": %w`, err)}
		}
	}
	if v, ok := tiu.mutation.CaseDefinitionID(); ok {
		if err := taskinstance.CaseDefinitionIDValidator(v); err != nil {
			return &ValidationError{Name: "case_definition_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.case_definition_id": %w`, err)}
		}
	}
	if v, ok := tiu.mutation.TenantID(); ok {
		if err := taskinstance.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (tiu *TaskInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskinstance.Table, taskinstance.Columns, sqlgraph.NewFieldSpec(taskinstance.FieldID, field.TypeInt64))
	if ps := tiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiu.mutation.Name(); ok {
		_spec.SetField(taskinstance.FieldName, field.TypeString, value)
	}
	if tiu.mutation.NameCleared() {
		_spec.ClearField(taskinstance.FieldName, field.TypeString)
	}
	if value, ok := tiu.mutation.Description(); ok {
		_spec.SetField(taskinstance.FieldDescription, field.TypeString, value)
	}
	if tiu.mutation.DescriptionCleared() {
		_spec.ClearField(taskinstance.FieldDescription, field.TypeString)
	}
	if value, ok := tiu.mutation.TaskDefinitionKey(); ok {
		_spec.SetField(taskinstance.FieldTaskDefinitionKey, field.TypeString, value)
	}
	if value, ok := tiu.mutation.Assignee(); ok {
		_spec.SetField(taskinstance.FieldAssignee, field.TypeString, value)
	}
	if tiu.mutation.AssigneeCleared() {
		_spec.ClearField(taskinstance.FieldAssignee, field.TypeString)
	}
	if value, ok := tiu.mutation.Owner(); ok {
		_spec.SetField(taskinstance.FieldOwner, field.TypeString, value)
	}
	if tiu.mutation.OwnerCleared() {
		_spec.ClearField(taskinstance.FieldOwner, field.TypeString)
	}
	if value, ok := tiu.mutation.Delegation(); ok {
		_spec.SetField(taskinstance.FieldDelegation, field.TypeString, value)
	}
	if tiu.mutation.DelegationCleared() {
		_spec.ClearField(taskinstance.FieldDelegation, field.TypeString)
	}
	if value, ok := tiu.mutation.Priority(); ok {
		_spec.SetField(taskinstance.FieldPriority, field.TypeInt32, value)
	}
	if value, ok := tiu.mutation.AddedPriority(); ok {
		_spec.AddField(taskinstance.FieldPriority, field.TypeInt32, value)
	}
	if value, ok := tiu.mutation.CreateTime(); ok {
		_spec.SetField(taskinstance.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := tiu.mutation.DueDate(); ok {
		_spec.SetField(taskinstance.FieldDueDate, field.TypeTime, value)
	}
	if tiu.mutation.DueDateCleared() {
		_spec.ClearField(taskinstance.FieldDueDate, field.TypeTime)
	}
	if value, ok := tiu.mutation.FollowUpDate(); ok {
		_spec.SetField(taskinstance.FieldFollowUpDate, field.TypeTime, value)
	}
	if tiu.mutation.FollowUpDateCleared() {
		_spec.ClearField(taskinstance.FieldFollowUpDate, field.TypeTime)
	}
	if value, ok := tiu.mutation.FormKey(); ok {
		_spec.SetField(taskinstance.FieldFormKey, field.TypeString, value)
	}
	if tiu.mutation.FormKeyCleared() {
		_spec.ClearField(taskinstance.FieldFormKey, field.TypeString)
	}
	if value, ok := tiu.mutation.Category(); ok {
		_spec.SetField(taskinstance.FieldCategory, field.TypeString, value)
	}
	if tiu.mutation.CategoryCleared() {
		_spec.ClearField(taskinstance.FieldCategory, field.TypeString)
	}
	if value, ok := tiu.mutation.ParentTaskID(); ok {
		_spec.SetField(taskinstance.FieldParentTaskID, field.TypeString, value)
	}
	if tiu.mutation.ParentTaskIDCleared() {
		_spec.ClearField(taskinstance.FieldParentTaskID, field.TypeString)
	}
	if value, ok := tiu.mutation.ExecutionID(); ok {
		_spec.SetField(taskinstance.FieldExecutionID, field.TypeString, value)
	}
	if tiu.mutation.ExecutionIDCleared() {
		_spec.ClearField(taskinstance.FieldExecutionID, field.TypeString)
	}
	if value, ok := tiu.mutation.ProcessInstanceID(); ok {
		_spec.SetField(taskinstance.FieldProcessInstanceID, field.TypeInt64, value)
	}
	if value, ok := tiu.mutation.AddedProcessInstanceID(); ok {
		_spec.AddField(taskinstance.FieldProcessInstanceID, field.TypeInt64, value)
	}
	if value, ok := tiu.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(taskinstance.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := tiu.mutation.AddedProcessDefinitionID(); ok {
		_spec.AddField(taskinstance.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := tiu.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(taskinstance.FieldProcessDefinitionKey, field.TypeString, value)
	}
	if value, ok := tiu.mutation.CaseExecutionID(); ok {
		_spec.SetField(taskinstance.FieldCaseExecutionID, field.TypeString, value)
	}
	if tiu.mutation.CaseExecutionIDCleared() {
		_spec.ClearField(taskinstance.FieldCaseExecutionID, field.TypeString)
	}
	if value, ok := tiu.mutation.CaseInstanceID(); ok {
		_spec.SetField(taskinstance.FieldCaseInstanceID, field.TypeString, value)
	}
	if tiu.mutation.CaseInstanceIDCleared() {
		_spec.ClearField(taskinstance.FieldCaseInstanceID, field.TypeString)
	}
	if value, ok := tiu.mutation.CaseDefinitionID(); ok {
		_spec.SetField(taskinstance.FieldCaseDefinitionID, field.TypeString, value)
	}
	if tiu.mutation.CaseDefinitionIDCleared() {
		_spec.ClearField(taskinstance.FieldCaseDefinitionID, field.TypeString)
	}
	if value, ok := tiu.mutation.Suspended(); ok {
		_spec.SetField(taskinstance.FieldSuspended, field.TypeBool, value)
	}
	if value, ok := tiu.mutation.TenantID(); ok {
		_spec.SetField(taskinstance.FieldTenantID, field.TypeString, value)
	}
	if value, ok := tiu.mutation.UpdatedAt(); ok {
		_spec.SetField(taskinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tiu.mutation.done = true
	return n, nil
}

// TaskInstanceUpdateOne is the builder for updating a single TaskInstance entity.
type TaskInstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskInstanceMutation
}

// SetName sets the "name" field.
func (tiuo *TaskInstanceUpdateOne) SetName(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetName(s)
	return tiuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableName(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetName(*s)
	}
	return tiuo
}

// ClearName clears the value of the "name" field.
func (tiuo *TaskInstanceUpdateOne) ClearName() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearName()
	return tiuo
}

// SetDescription sets the "description" field.
func (tiuo *TaskInstanceUpdateOne) SetDescription(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetDescription(s)
	return tiuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableDescription(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetDescription(*s)
	}
	return tiuo
}

// ClearDescription clears the value of the "description" field.
func (tiuo *TaskInstanceUpdateOne) ClearDescription() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearDescription()
	return tiuo
}

// SetTaskDefinitionKey sets the "task_definition_key" field.
func (tiuo *TaskInstanceUpdateOne) SetTaskDefinitionKey(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetTaskDefinitionKey(s)
	return tiuo
}

// SetNillableTaskDefinitionKey sets the "task_definition_key" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableTaskDefinitionKey(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetTaskDefinitionKey(*s)
	}
	return tiuo
}

// SetAssignee sets the "assignee" field.
func (tiuo *TaskInstanceUpdateOne) SetAssignee(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetAssignee(s)
	return tiuo
}

// SetNillableAssignee sets the "assignee" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableAssignee(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetAssignee(*s)
	}
	return tiuo
}

// ClearAssignee clears the value of the "assignee" field.
func (tiuo *TaskInstanceUpdateOne) ClearAssignee() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearAssignee()
	return tiuo
}

// SetOwner sets the "owner" field.
func (tiuo *TaskInstanceUpdateOne) SetOwner(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetOwner(s)
	return tiuo
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableOwner(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetOwner(*s)
	}
	return tiuo
}

// ClearOwner clears the value of the "owner" field.
func (tiuo *TaskInstanceUpdateOne) ClearOwner() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearOwner()
	return tiuo
}

// SetDelegation sets the "delegation" field.
func (tiuo *TaskInstanceUpdateOne) SetDelegation(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetDelegation(s)
	return tiuo
}

// SetNillableDelegation sets the "delegation" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableDelegation(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetDelegation(*s)
	}
	return tiuo
}

// ClearDelegation clears the value of the "delegation" field.
func (tiuo *TaskInstanceUpdateOne) ClearDelegation() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearDelegation()
	return tiuo
}

// SetPriority sets the "priority" field.
func (tiuo *TaskInstanceUpdateOne) SetPriority(i int32) *TaskInstanceUpdateOne {
	tiuo.mutation.ResetPriority()
	tiuo.mutation.SetPriority(i)
	return tiuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillablePriority(i *int32) *TaskInstanceUpdateOne {
	if i != nil {
		tiuo.SetPriority(*i)
	}
	return tiuo
}

// AddPriority adds i to the "priority" field.
func (tiuo *TaskInstanceUpdateOne) AddPriority(i int32) *TaskInstanceUpdateOne {
	tiuo.mutation.AddPriority(i)
	return tiuo
}

// SetCreateTime sets the "create_time" field.
func (tiuo *TaskInstanceUpdateOne) SetCreateTime(t time.Time) *TaskInstanceUpdateOne {
	tiuo.mutation.SetCreateTime(t)
	return tiuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableCreateTime(t *time.Time) *TaskInstanceUpdateOne {
	if t != nil {
		tiuo.SetCreateTime(*t)
	}
	return tiuo
}

// SetDueDate sets the "due_date" field.
func (tiuo *TaskInstanceUpdateOne) SetDueDate(t time.Time) *TaskInstanceUpdateOne {
	tiuo.mutation.SetDueDate(t)
	return tiuo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableDueDate(t *time.Time) *TaskInstanceUpdateOne {
	if t != nil {
		tiuo.SetDueDate(*t)
	}
	return tiuo
}

// ClearDueDate clears the value of the "due_date" field.
func (tiuo *TaskInstanceUpdateOne) ClearDueDate() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearDueDate()
	return tiuo
}

// SetFollowUpDate sets the "follow_up_date" field.
func (tiuo *TaskInstanceUpdateOne) SetFollowUpDate(t time.Time) *TaskInstanceUpdateOne {
	tiuo.mutation.SetFollowUpDate(t)
	return tiuo
}

// SetNillableFollowUpDate sets the "follow_up_date" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableFollowUpDate(t *time.Time) *TaskInstanceUpdateOne {
	if t != nil {
		tiuo.SetFollowUpDate(*t)
	}
	return tiuo
}

// ClearFollowUpDate clears the value of the "follow_up_date" field.
func (tiuo *TaskInstanceUpdateOne) ClearFollowUpDate() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearFollowUpDate()
	return tiuo
}

// SetFormKey sets the "form_key" field.
func (tiuo *TaskInstanceUpdateOne) SetFormKey(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetFormKey(s)
	return tiuo
}

// SetNillableFormKey sets the "form_key" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableFormKey(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetFormKey(*s)
	}
	return tiuo
}

// ClearFormKey clears the value of the "form_key" field.
func (tiuo *TaskInstanceUpdateOne) ClearFormKey() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearFormKey()
	return tiuo
}

// SetCategory sets the "category" field.
func (tiuo *TaskInstanceUpdateOne) SetCategory(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetCategory(s)
	return tiuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableCategory(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetCategory(*s)
	}
	return tiuo
}

// ClearCategory clears the value of the "category" field.
func (tiuo *TaskInstanceUpdateOne) ClearCategory() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearCategory()
	return tiuo
}

// SetParentTaskID sets the "parent_task_id" field.
func (tiuo *TaskInstanceUpdateOne) SetParentTaskID(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetParentTaskID(s)
	return tiuo
}

// SetNillableParentTaskID sets the "parent_task_id" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableParentTaskID(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetParentTaskID(*s)
	}
	return tiuo
}

// ClearParentTaskID clears the value of the "parent_task_id" field.
func (tiuo *TaskInstanceUpdateOne) ClearParentTaskID() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearParentTaskID()
	return tiuo
}

// SetExecutionID sets the "execution_id" field.
func (tiuo *TaskInstanceUpdateOne) SetExecutionID(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetExecutionID(s)
	return tiuo
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableExecutionID(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetExecutionID(*s)
	}
	return tiuo
}

// ClearExecutionID clears the value of the "execution_id" field.
func (tiuo *TaskInstanceUpdateOne) ClearExecutionID() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearExecutionID()
	return tiuo
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (tiuo *TaskInstanceUpdateOne) SetProcessInstanceID(i int64) *TaskInstanceUpdateOne {
	tiuo.mutation.ResetProcessInstanceID()
	tiuo.mutation.SetProcessInstanceID(i)
	return tiuo
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableProcessInstanceID(i *int64) *TaskInstanceUpdateOne {
	if i != nil {
		tiuo.SetProcessInstanceID(*i)
	}
	return tiuo
}

// AddProcessInstanceID adds i to the "process_instance_id" field.
func (tiuo *TaskInstanceUpdateOne) AddProcessInstanceID(i int64) *TaskInstanceUpdateOne {
	tiuo.mutation.AddProcessInstanceID(i)
	return tiuo
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (tiuo *TaskInstanceUpdateOne) SetProcessDefinitionID(i int64) *TaskInstanceUpdateOne {
	tiuo.mutation.ResetProcessDefinitionID()
	tiuo.mutation.SetProcessDefinitionID(i)
	return tiuo
}

// SetNillableProcessDefinitionID sets the "process_definition_id" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableProcessDefinitionID(i *int64) *TaskInstanceUpdateOne {
	if i != nil {
		tiuo.SetProcessDefinitionID(*i)
	}
	return tiuo
}

// AddProcessDefinitionID adds i to the "process_definition_id" field.
func (tiuo *TaskInstanceUpdateOne) AddProcessDefinitionID(i int64) *TaskInstanceUpdateOne {
	tiuo.mutation.AddProcessDefinitionID(i)
	return tiuo
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (tiuo *TaskInstanceUpdateOne) SetProcessDefinitionKey(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetProcessDefinitionKey(s)
	return tiuo
}

// SetNillableProcessDefinitionKey sets the "process_definition_key" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableProcessDefinitionKey(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetProcessDefinitionKey(*s)
	}
	return tiuo
}

// SetCaseExecutionID sets the "case_execution_id" field.
func (tiuo *TaskInstanceUpdateOne) SetCaseExecutionID(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetCaseExecutionID(s)
	return tiuo
}

// SetNillableCaseExecutionID sets the "case_execution_id" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableCaseExecutionID(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetCaseExecutionID(*s)
	}
	return tiuo
}

// ClearCaseExecutionID clears the value of the "case_execution_id" field.
func (tiuo *TaskInstanceUpdateOne) ClearCaseExecutionID() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearCaseExecutionID()
	return tiuo
}

// SetCaseInstanceID sets the "case_instance_id" field.
func (tiuo *TaskInstanceUpdateOne) SetCaseInstanceID(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetCaseInstanceID(s)
	return tiuo
}

// SetNillableCaseInstanceID sets the "case_instance_id" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableCaseInstanceID(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetCaseInstanceID(*s)
	}
	return tiuo
}

// ClearCaseInstanceID clears the value of the "case_instance_id" field.
func (tiuo *TaskInstanceUpdateOne) ClearCaseInstanceID() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearCaseInstanceID()
	return tiuo
}

// SetCaseDefinitionID sets the "case_definition_id" field.
func (tiuo *TaskInstanceUpdateOne) SetCaseDefinitionID(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetCaseDefinitionID(s)
	return tiuo
}

// SetNillableCaseDefinitionID sets the "case_definition_id" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableCaseDefinitionID(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetCaseDefinitionID(*s)
	}
	return tiuo
}

// ClearCaseDefinitionID clears the value of the "case_definition_id" field.
func (tiuo *TaskInstanceUpdateOne) ClearCaseDefinitionID() *TaskInstanceUpdateOne {
	tiuo.mutation.ClearCaseDefinitionID()
	return tiuo
}

// SetSuspended sets the "suspended" field.
func (tiuo *TaskInstanceUpdateOne) SetSuspended(b bool) *TaskInstanceUpdateOne {
	tiuo.mutation.SetSuspended(b)
	return tiuo
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableSuspended(b *bool) *TaskInstanceUpdateOne {
	if b != nil {
		tiuo.SetSuspended(*b)
	}
	return tiuo
}

// SetTenantID sets the "tenant_id" field.
func (tiuo *TaskInstanceUpdateOne) SetTenantID(s string) *TaskInstanceUpdateOne {
	tiuo.mutation.SetTenantID(s)
	return tiuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tiuo *TaskInstanceUpdateOne) SetNillableTenantID(s *string) *TaskInstanceUpdateOne {
	if s != nil {
		tiuo.SetTenantID(*s)
	}
	return tiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tiuo *TaskInstanceUpdateOne) SetUpdatedAt(t time.Time) *TaskInstanceUpdateOne {
	tiuo.mutation.SetUpdatedAt(t)
	return tiuo
}

// Mutation returns the TaskInstanceMutation object of the builder.
func (tiuo *TaskInstanceUpdateOne) Mutation() *TaskInstanceMutation {
	return tiuo.mutation
}

// Where appends a list predicates to the TaskInstanceUpdate builder.
func (tiuo *TaskInstanceUpdateOne) Where(ps ...predicate.TaskInstance) *TaskInstanceUpdateOne {
	tiuo.mutation.Where(ps...)
	return tiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tiuo *TaskInstanceUpdateOne) Select(field string, fields ...string) *TaskInstanceUpdateOne {
	tiuo.fields = append([]string{field}, fields...)
	return tiuo
}

// Save executes the query and returns the updated TaskInstance entity.
func (tiuo *TaskInstanceUpdateOne) Save(ctx context.Context) (*TaskInstance, error) {
	tiuo.defaults()
	return withHooks(ctx, tiuo.sqlSave, tiuo.mutation, tiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tiuo *TaskInstanceUpdateOne) SaveX(ctx context.Context) *TaskInstance {
	node, err := tiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tiuo *TaskInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := tiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiuo *TaskInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := tiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tiuo *TaskInstanceUpdateOne) defaults() {
	if _, ok := tiuo.mutation.UpdatedAt(); !ok {
		v := taskinstance.UpdateDefaultUpdatedAt()
		tiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tiuo *TaskInstanceUpdateOne) check() error {
	if v, ok := tiuo.mutation.Name(); ok {
		if err := taskinstance.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.name": %w`, err)}
		}
	}
	if v, ok := tiuo.mutation.TaskDefinitionKey(); ok {
		if err := taskinstance.TaskDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "task_definition_key", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.task_definition_key": %w`, err)}
		}
	}
	if v, ok := tiuo.mutation.Assignee(); ok {
		if err := taskinstance.AssigneeValidator(v); err != nil {
			return &ValidationError{Name: "assignee", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.assignee": %w`, err)}
		}
	}
	if v, ok := tiuo.mutation.Owner(); ok {
		if err := taskinstance.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.owner": %w`, err)}
		}
	}
	if v, ok := tiuo.mutation.Delegation(); ok {
		if err := taskinstance.DelegationValidator(v); err != nil {
			return &ValidationError{Name: "delegation", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.delegation": %w`, err)}
		}
	}
	if v, ok := tiuo.mutation.FormKey(); ok {
		if err := taskinstance.FormKeyValidator(v); err != nil {
			return &ValidationError{Name: "form_key", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.form_key": %w`, err)}
		}
	}
	if v, ok := tiuo.mutation.Category(); ok {
		if err := taskinstance.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.category": %w`, err)}
		}
	}
	if v, ok := tiuo.mutation.ParentTaskID(); ok {
		if err := taskinstance.ParentTaskIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_task_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.parent_task_id": %w`, err)}
		}
	}
	if v, ok := tiuo.mutation.ExecutionID(); ok {
		if err := taskinstance.ExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "execution_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.execution_id": %w`, err)}
		}
	}
	if v, ok := tiuo.mutation.ProcessDefinitionKey(); ok {
		if err := taskinstance.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.process_definition_key": %w`, err)}
		}
	}
	if v, ok := tiuo.mutation.CaseExecutionID(); ok {
		if err := taskinstance.CaseExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "case_execution_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.case_execution_id": %w`, err)}
		}
	}
	if v, ok := tiuo.mutation.CaseInstanceID(); ok {
		if err := taskinstance.CaseInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "case_instance_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.case_instance_id": %w`, err)}
		}
	}
	if v, ok := tiuo.mutation.CaseDefinitionID(); ok {
		if err := taskinstance.CaseDefinitionIDValidator(v); err != nil {
			return &ValidationError{Name: "case_definition_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.case_definition_id": %w`, err)}
		}
	}
	if v, ok := tiuo.mutation.TenantID(); ok {
		if err := taskinstance.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.tenant_id": %w`, err)}
		}
	}
	return nil
}

func (tiuo *TaskInstanceUpdateOne) sqlSave(ctx context.Context) (_node *TaskInstance, err error) {
	if err := tiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskinstance.Table, taskinstance.Columns, sqlgraph.NewFieldSpec(taskinstance.FieldID, field.TypeInt64))
	id, ok := tiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskInstance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskinstance.FieldID)
		for _, f := range fields {
			if !taskinstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taskinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiuo.mutation.Name(); ok {
		_spec.SetField(taskinstance.FieldName, field.TypeString, value)
	}
	if tiuo.mutation.NameCleared() {
		_spec.ClearField(taskinstance.FieldName, field.TypeString)
	}
	if value, ok := tiuo.mutation.Description(); ok {
		_spec.SetField(taskinstance.FieldDescription, field.TypeString, value)
	}
	if tiuo.mutation.DescriptionCleared() {
		_spec.ClearField(taskinstance.FieldDescription, field.TypeString)
	}
	if value, ok := tiuo.mutation.TaskDefinitionKey(); ok {
		_spec.SetField(taskinstance.FieldTaskDefinitionKey, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.Assignee(); ok {
		_spec.SetField(taskinstance.FieldAssignee, field.TypeString, value)
	}
	if tiuo.mutation.AssigneeCleared() {
		_spec.ClearField(taskinstance.FieldAssignee, field.TypeString)
	}
	if value, ok := tiuo.mutation.Owner(); ok {
		_spec.SetField(taskinstance.FieldOwner, field.TypeString, value)
	}
	if tiuo.mutation.OwnerCleared() {
		_spec.ClearField(taskinstance.FieldOwner, field.TypeString)
	}
	if value, ok := tiuo.mutation.Delegation(); ok {
		_spec.SetField(taskinstance.FieldDelegation, field.TypeString, value)
	}
	if tiuo.mutation.DelegationCleared() {
		_spec.ClearField(taskinstance.FieldDelegation, field.TypeString)
	}
	if value, ok := tiuo.mutation.Priority(); ok {
		_spec.SetField(taskinstance.FieldPriority, field.TypeInt32, value)
	}
	if value, ok := tiuo.mutation.AddedPriority(); ok {
		_spec.AddField(taskinstance.FieldPriority, field.TypeInt32, value)
	}
	if value, ok := tiuo.mutation.CreateTime(); ok {
		_spec.SetField(taskinstance.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := tiuo.mutation.DueDate(); ok {
		_spec.SetField(taskinstance.FieldDueDate, field.TypeTime, value)
	}
	if tiuo.mutation.DueDateCleared() {
		_spec.ClearField(taskinstance.FieldDueDate, field.TypeTime)
	}
	if value, ok := tiuo.mutation.FollowUpDate(); ok {
		_spec.SetField(taskinstance.FieldFollowUpDate, field.TypeTime, value)
	}
	if tiuo.mutation.FollowUpDateCleared() {
		_spec.ClearField(taskinstance.FieldFollowUpDate, field.TypeTime)
	}
	if value, ok := tiuo.mutation.FormKey(); ok {
		_spec.SetField(taskinstance.FieldFormKey, field.TypeString, value)
	}
	if tiuo.mutation.FormKeyCleared() {
		_spec.ClearField(taskinstance.FieldFormKey, field.TypeString)
	}
	if value, ok := tiuo.mutation.Category(); ok {
		_spec.SetField(taskinstance.FieldCategory, field.TypeString, value)
	}
	if tiuo.mutation.CategoryCleared() {
		_spec.ClearField(taskinstance.FieldCategory, field.TypeString)
	}
	if value, ok := tiuo.mutation.ParentTaskID(); ok {
		_spec.SetField(taskinstance.FieldParentTaskID, field.TypeString, value)
	}
	if tiuo.mutation.ParentTaskIDCleared() {
		_spec.ClearField(taskinstance.FieldParentTaskID, field.TypeString)
	}
	if value, ok := tiuo.mutation.ExecutionID(); ok {
		_spec.SetField(taskinstance.FieldExecutionID, field.TypeString, value)
	}
	if tiuo.mutation.ExecutionIDCleared() {
		_spec.ClearField(taskinstance.FieldExecutionID, field.TypeString)
	}
	if value, ok := tiuo.mutation.ProcessInstanceID(); ok {
		_spec.SetField(taskinstance.FieldProcessInstanceID, field.TypeInt64, value)
	}
	if value, ok := tiuo.mutation.AddedProcessInstanceID(); ok {
		_spec.AddField(taskinstance.FieldProcessInstanceID, field.TypeInt64, value)
	}
	if value, ok := tiuo.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(taskinstance.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := tiuo.mutation.AddedProcessDefinitionID(); ok {
		_spec.AddField(taskinstance.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := tiuo.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(taskinstance.FieldProcessDefinitionKey, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.CaseExecutionID(); ok {
		_spec.SetField(taskinstance.FieldCaseExecutionID, field.TypeString, value)
	}
	if tiuo.mutation.CaseExecutionIDCleared() {
		_spec.ClearField(taskinstance.FieldCaseExecutionID, field.TypeString)
	}
	if value, ok := tiuo.mutation.CaseInstanceID(); ok {
		_spec.SetField(taskinstance.FieldCaseInstanceID, field.TypeString, value)
	}
	if tiuo.mutation.CaseInstanceIDCleared() {
		_spec.ClearField(taskinstance.FieldCaseInstanceID, field.TypeString)
	}
	if value, ok := tiuo.mutation.CaseDefinitionID(); ok {
		_spec.SetField(taskinstance.FieldCaseDefinitionID, field.TypeString, value)
	}
	if tiuo.mutation.CaseDefinitionIDCleared() {
		_spec.ClearField(taskinstance.FieldCaseDefinitionID, field.TypeString)
	}
	if value, ok := tiuo.mutation.Suspended(); ok {
		_spec.SetField(taskinstance.FieldSuspended, field.TypeBool, value)
	}
	if value, ok := tiuo.mutation.TenantID(); ok {
		_spec.SetField(taskinstance.FieldTenantID, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(taskinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &TaskInstance{config: tiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tiuo.mutation.done = true
	return _node, nil
}
