// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/predicate"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processvariable"
)

// ProcessVariableUpdate is the builder for updating ProcessVariable entities.
type ProcessVariableUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessVariableMutation
}

// Where appends a list predicates to the ProcessVariableUpdate builder.
func (pvu *ProcessVariableUpdate) Where(ps ...predicate.ProcessVariable) *ProcessVariableUpdate {
	pvu.mutation.Where(ps...)
	return pvu
}

// SetName sets the "name" field.
func (pvu *ProcessVariableUpdate) SetName(s string) *ProcessVariableUpdate {
	pvu.mutation.SetName(s)
	return pvu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableName(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetName(*s)
	}
	return pvu
}

// SetType sets the "type" field.
func (pvu *ProcessVariableUpdate) SetType(s string) *ProcessVariableUpdate {
	pvu.mutation.SetType(s)
	return pvu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableType(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetType(*s)
	}
	return pvu
}

// SetTextValue sets the "text_value" field.
func (pvu *ProcessVariableUpdate) SetTextValue(s string) *ProcessVariableUpdate {
	pvu.mutation.SetTextValue(s)
	return pvu
}

// SetNillableTextValue sets the "text_value" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableTextValue(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetTextValue(*s)
	}
	return pvu
}

// ClearTextValue clears the value of the "text_value" field.
func (pvu *ProcessVariableUpdate) ClearTextValue() *ProcessVariableUpdate {
	pvu.mutation.ClearTextValue()
	return pvu
}

// SetTextValue2 sets the "text_value2" field.
func (pvu *ProcessVariableUpdate) SetTextValue2(s string) *ProcessVariableUpdate {
	pvu.mutation.SetTextValue2(s)
	return pvu
}

// SetNillableTextValue2 sets the "text_value2" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableTextValue2(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetTextValue2(*s)
	}
	return pvu
}

// ClearTextValue2 clears the value of the "text_value2" field.
func (pvu *ProcessVariableUpdate) ClearTextValue2() *ProcessVariableUpdate {
	pvu.mutation.ClearTextValue2()
	return pvu
}

// SetLongValue sets the "long_value" field.
func (pvu *ProcessVariableUpdate) SetLongValue(i int64) *ProcessVariableUpdate {
	pvu.mutation.ResetLongValue()
	pvu.mutation.SetLongValue(i)
	return pvu
}

// SetNillableLongValue sets the "long_value" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableLongValue(i *int64) *ProcessVariableUpdate {
	if i != nil {
		pvu.SetLongValue(*i)
	}
	return pvu
}

// AddLongValue adds i to the "long_value" field.
func (pvu *ProcessVariableUpdate) AddLongValue(i int64) *ProcessVariableUpdate {
	pvu.mutation.AddLongValue(i)
	return pvu
}

// ClearLongValue clears the value of the "long_value" field.
func (pvu *ProcessVariableUpdate) ClearLongValue() *ProcessVariableUpdate {
	pvu.mutation.ClearLongValue()
	return pvu
}

// SetDoubleValue sets the "double_value" field.
func (pvu *ProcessVariableUpdate) SetDoubleValue(f float64) *ProcessVariableUpdate {
	pvu.mutation.ResetDoubleValue()
	pvu.mutation.SetDoubleValue(f)
	return pvu
}

// SetNillableDoubleValue sets the "double_value" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableDoubleValue(f *float64) *ProcessVariableUpdate {
	if f != nil {
		pvu.SetDoubleValue(*f)
	}
	return pvu
}

// AddDoubleValue adds f to the "double_value" field.
func (pvu *ProcessVariableUpdate) AddDoubleValue(f float64) *ProcessVariableUpdate {
	pvu.mutation.AddDoubleValue(f)
	return pvu
}

// ClearDoubleValue clears the value of the "double_value" field.
func (pvu *ProcessVariableUpdate) ClearDoubleValue() *ProcessVariableUpdate {
	pvu.mutation.ClearDoubleValue()
	return pvu
}

// SetByteArrayValue sets the "byte_array_value" field.
func (pvu *ProcessVariableUpdate) SetByteArrayValue(b []byte) *ProcessVariableUpdate {
	pvu.mutation.SetByteArrayValue(b)
	return pvu
}

// ClearByteArrayValue clears the value of the "byte_array_value" field.
func (pvu *ProcessVariableUpdate) ClearByteArrayValue() *ProcessVariableUpdate {
	pvu.mutation.ClearByteArrayValue()
	return pvu
}

// SetExecutionID sets the "execution_id" field.
func (pvu *ProcessVariableUpdate) SetExecutionID(s string) *ProcessVariableUpdate {
	pvu.mutation.SetExecutionID(s)
	return pvu
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableExecutionID(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetExecutionID(*s)
	}
	return pvu
}

// ClearExecutionID clears the value of the "execution_id" field.
func (pvu *ProcessVariableUpdate) ClearExecutionID() *ProcessVariableUpdate {
	pvu.mutation.ClearExecutionID()
	return pvu
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (pvu *ProcessVariableUpdate) SetProcessInstanceID(i int64) *ProcessVariableUpdate {
	pvu.mutation.ResetProcessInstanceID()
	pvu.mutation.SetProcessInstanceID(i)
	return pvu
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableProcessInstanceID(i *int64) *ProcessVariableUpdate {
	if i != nil {
		pvu.SetProcessInstanceID(*i)
	}
	return pvu
}

// AddProcessInstanceID adds i to the "process_instance_id" field.
func (pvu *ProcessVariableUpdate) AddProcessInstanceID(i int64) *ProcessVariableUpdate {
	pvu.mutation.AddProcessInstanceID(i)
	return pvu
}

// ClearProcessInstanceID clears the value of the "process_instance_id" field.
func (pvu *ProcessVariableUpdate) ClearProcessInstanceID() *ProcessVariableUpdate {
	pvu.mutation.ClearProcessInstanceID()
	return pvu
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (pvu *ProcessVariableUpdate) SetProcessDefinitionID(i int64) *ProcessVariableUpdate {
	pvu.mutation.ResetProcessDefinitionID()
	pvu.mutation.SetProcessDefinitionID(i)
	return pvu
}

// SetNillableProcessDefinitionID sets the "process_definition_id" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableProcessDefinitionID(i *int64) *ProcessVariableUpdate {
	if i != nil {
		pvu.SetProcessDefinitionID(*i)
	}
	return pvu
}

// AddProcessDefinitionID adds i to the "process_definition_id" field.
func (pvu *ProcessVariableUpdate) AddProcessDefinitionID(i int64) *ProcessVariableUpdate {
	pvu.mutation.AddProcessDefinitionID(i)
	return pvu
}

// ClearProcessDefinitionID clears the value of the "process_definition_id" field.
func (pvu *ProcessVariableUpdate) ClearProcessDefinitionID() *ProcessVariableUpdate {
	pvu.mutation.ClearProcessDefinitionID()
	return pvu
}

// SetCaseExecutionID sets the "case_execution_id" field.
func (pvu *ProcessVariableUpdate) SetCaseExecutionID(s string) *ProcessVariableUpdate {
	pvu.mutation.SetCaseExecutionID(s)
	return pvu
}

// SetNillableCaseExecutionID sets the "case_execution_id" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableCaseExecutionID(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetCaseExecutionID(*s)
	}
	return pvu
}

// ClearCaseExecutionID clears the value of the "case_execution_id" field.
func (pvu *ProcessVariableUpdate) ClearCaseExecutionID() *ProcessVariableUpdate {
	pvu.mutation.ClearCaseExecutionID()
	return pvu
}

// SetCaseInstanceID sets the "case_instance_id" field.
func (pvu *ProcessVariableUpdate) SetCaseInstanceID(s string) *ProcessVariableUpdate {
	pvu.mutation.SetCaseInstanceID(s)
	return pvu
}

// SetNillableCaseInstanceID sets the "case_instance_id" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableCaseInstanceID(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetCaseInstanceID(*s)
	}
	return pvu
}

// ClearCaseInstanceID clears the value of the "case_instance_id" field.
func (pvu *ProcessVariableUpdate) ClearCaseInstanceID() *ProcessVariableUpdate {
	pvu.mutation.ClearCaseInstanceID()
	return pvu
}

// SetTaskID sets the "task_id" field.
func (pvu *ProcessVariableUpdate) SetTaskID(i int64) *ProcessVariableUpdate {
	pvu.mutation.ResetTaskID()
	pvu.mutation.SetTaskID(i)
	return pvu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableTaskID(i *int64) *ProcessVariableUpdate {
	if i != nil {
		pvu.SetTaskID(*i)
	}
	return pvu
}

// AddTaskID adds i to the "task_id" field.
func (pvu *ProcessVariableUpdate) AddTaskID(i int64) *ProcessVariableUpdate {
	pvu.mutation.AddTaskID(i)
	return pvu
}

// ClearTaskID clears the value of the "task_id" field.
func (pvu *ProcessVariableUpdate) ClearTaskID() *ProcessVariableUpdate {
	pvu.mutation.ClearTaskID()
	return pvu
}

// SetActivityInstanceID sets the "activity_instance_id" field.
func (pvu *ProcessVariableUpdate) SetActivityInstanceID(s string) *ProcessVariableUpdate {
	pvu.mutation.SetActivityInstanceID(s)
	return pvu
}

// SetNillableActivityInstanceID sets the "activity_instance_id" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableActivityInstanceID(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetActivityInstanceID(*s)
	}
	return pvu
}

// ClearActivityInstanceID clears the value of the "activity_instance_id" field.
func (pvu *ProcessVariableUpdate) ClearActivityInstanceID() *ProcessVariableUpdate {
	pvu.mutation.ClearActivityInstanceID()
	return pvu
}

// SetTenantID sets the "tenant_id" field.
func (pvu *ProcessVariableUpdate) SetTenantID(s string) *ProcessVariableUpdate {
	pvu.mutation.SetTenantID(s)
	return pvu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableTenantID(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetTenantID(*s)
	}
	return pvu
}

// SetSequenceCounter sets the "sequence_counter" field.
func (pvu *ProcessVariableUpdate) SetSequenceCounter(i int32) *ProcessVariableUpdate {
	pvu.mutation.ResetSequenceCounter()
	pvu.mutation.SetSequenceCounter(i)
	return pvu
}

// SetNillableSequenceCounter sets the "sequence_counter" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableSequenceCounter(i *int32) *ProcessVariableUpdate {
	if i != nil {
		pvu.SetSequenceCounter(*i)
	}
	return pvu
}

// AddSequenceCounter adds i to the "sequence_counter" field.
func (pvu *ProcessVariableUpdate) AddSequenceCounter(i int32) *ProcessVariableUpdate {
	pvu.mutation.AddSequenceCounter(i)
	return pvu
}

// SetConcurrentLocal sets the "concurrent_local" field.
func (pvu *ProcessVariableUpdate) SetConcurrentLocal(b bool) *ProcessVariableUpdate {
	pvu.mutation.SetConcurrentLocal(b)
	return pvu
}

// SetNillableConcurrentLocal sets the "concurrent_local" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableConcurrentLocal(b *bool) *ProcessVariableUpdate {
	if b != nil {
		pvu.SetConcurrentLocal(*b)
	}
	return pvu
}

// SetScopeID sets the "scope_id" field.
func (pvu *ProcessVariableUpdate) SetScopeID(s string) *ProcessVariableUpdate {
	pvu.mutation.SetScopeID(s)
	return pvu
}

// SetNillableScopeID sets the "scope_id" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableScopeID(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetScopeID(*s)
	}
	return pvu
}

// ClearScopeID clears the value of the "scope_id" field.
func (pvu *ProcessVariableUpdate) ClearScopeID() *ProcessVariableUpdate {
	pvu.mutation.ClearScopeID()
	return pvu
}

// SetScopeType sets the "scope_type" field.
func (pvu *ProcessVariableUpdate) SetScopeType(s string) *ProcessVariableUpdate {
	pvu.mutation.SetScopeType(s)
	return pvu
}

// SetNillableScopeType sets the "scope_type" field if the given value is not nil.
func (pvu *ProcessVariableUpdate) SetNillableScopeType(s *string) *ProcessVariableUpdate {
	if s != nil {
		pvu.SetScopeType(*s)
	}
	return pvu
}

// ClearScopeType clears the value of the "scope_type" field.
func (pvu *ProcessVariableUpdate) ClearScopeType() *ProcessVariableUpdate {
	pvu.mutation.ClearScopeType()
	return pvu
}

// SetUpdatedAt sets the "updated_at" field.
func (pvu *ProcessVariableUpdate) SetUpdatedAt(t time.Time) *ProcessVariableUpdate {
	pvu.mutation.SetUpdatedAt(t)
	return pvu
}

// Mutation returns the ProcessVariableMutation object of the builder.
func (pvu *ProcessVariableUpdate) Mutation() *ProcessVariableMutation {
	return pvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pvu *ProcessVariableUpdate) Save(ctx context.Context) (int, error) {
	pvu.defaults()
	return withHooks(ctx, pvu.sqlSave, pvu.mutation, pvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvu *ProcessVariableUpdate) SaveX(ctx context.Context) int {
	affected, err := pvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pvu *ProcessVariableUpdate) Exec(ctx context.Context) error {
	_, err := pvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvu *ProcessVariableUpdate) ExecX(ctx context.Context) {
	if err := pvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvu *ProcessVariableUpdate) defaults() {
	if _, ok := pvu.mutation.UpdatedAt(); !ok {
		v := processvariable.UpdateDefaultUpdatedAt()
		pvu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvu *ProcessVariableUpdate) check() error {
	if v, ok := pvu.mutation.Name(); ok {
		if err := processvariable.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.name": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.GetType(); ok {
		if err := processvariable.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.type": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.ExecutionID(); ok {
		if err := processvariable.ExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "execution_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.execution_id": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.CaseExecutionID(); ok {
		if err := processvariable.CaseExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "case_execution_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.case_execution_id": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.CaseInstanceID(); ok {
		if err := processvariable.CaseInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "case_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.case_instance_id": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.ActivityInstanceID(); ok {
		if err := processvariable.ActivityInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "activity_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.activity_instance_id": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.TenantID(); ok {
		if err := processvariable.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.tenant_id": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.ScopeID(); ok {
		if err := processvariable.ScopeIDValidator(v); err != nil {
			return &ValidationError{Name: "scope_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.scope_id": %w`, err)}
		}
	}
	if v, ok := pvu.mutation.ScopeType(); ok {
		if err := processvariable.ScopeTypeValidator(v); err != nil {
			return &ValidationError{Name: "scope_type", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.scope_type": %w`, err)}
		}
	}
	return nil
}

func (pvu *ProcessVariableUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(processvariable.Table, processvariable.Columns, sqlgraph.NewFieldSpec(processvariable.FieldID, field.TypeInt64))
	if ps := pvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvu.mutation.Name(); ok {
		_spec.SetField(processvariable.FieldName, field.TypeString, value)
	}
	if value, ok := pvu.mutation.GetType(); ok {
		_spec.SetField(processvariable.FieldType, field.TypeString, value)
	}
	if value, ok := pvu.mutation.TextValue(); ok {
		_spec.SetField(processvariable.FieldTextValue, field.TypeString, value)
	}
	if pvu.mutation.TextValueCleared() {
		_spec.ClearField(processvariable.FieldTextValue, field.TypeString)
	}
	if value, ok := pvu.mutation.TextValue2(); ok {
		_spec.SetField(processvariable.FieldTextValue2, field.TypeString, value)
	}
	if pvu.mutation.TextValue2Cleared() {
		_spec.ClearField(processvariable.FieldTextValue2, field.TypeString)
	}
	if value, ok := pvu.mutation.LongValue(); ok {
		_spec.SetField(processvariable.FieldLongValue, field.TypeInt64, value)
	}
	if value, ok := pvu.mutation.AddedLongValue(); ok {
		_spec.AddField(processvariable.FieldLongValue, field.TypeInt64, value)
	}
	if pvu.mutation.LongValueCleared() {
		_spec.ClearField(processvariable.FieldLongValue, field.TypeInt64)
	}
	if value, ok := pvu.mutation.DoubleValue(); ok {
		_spec.SetField(processvariable.FieldDoubleValue, field.TypeFloat64, value)
	}
	if value, ok := pvu.mutation.AddedDoubleValue(); ok {
		_spec.AddField(processvariable.FieldDoubleValue, field.TypeFloat64, value)
	}
	if pvu.mutation.DoubleValueCleared() {
		_spec.ClearField(processvariable.FieldDoubleValue, field.TypeFloat64)
	}
	if value, ok := pvu.mutation.ByteArrayValue(); ok {
		_spec.SetField(processvariable.FieldByteArrayValue, field.TypeBytes, value)
	}
	if pvu.mutation.ByteArrayValueCleared() {
		_spec.ClearField(processvariable.FieldByteArrayValue, field.TypeBytes)
	}
	if value, ok := pvu.mutation.ExecutionID(); ok {
		_spec.SetField(processvariable.FieldExecutionID, field.TypeString, value)
	}
	if pvu.mutation.ExecutionIDCleared() {
		_spec.ClearField(processvariable.FieldExecutionID, field.TypeString)
	}
	if value, ok := pvu.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processvariable.FieldProcessInstanceID, field.TypeInt64, value)
	}
	if value, ok := pvu.mutation.AddedProcessInstanceID(); ok {
		_spec.AddField(processvariable.FieldProcessInstanceID, field.TypeInt64, value)
	}
	if pvu.mutation.ProcessInstanceIDCleared() {
		_spec.ClearField(processvariable.FieldProcessInstanceID, field.TypeInt64)
	}
	if value, ok := pvu.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(processvariable.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := pvu.mutation.AddedProcessDefinitionID(); ok {
		_spec.AddField(processvariable.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if pvu.mutation.ProcessDefinitionIDCleared() {
		_spec.ClearField(processvariable.FieldProcessDefinitionID, field.TypeInt64)
	}
	if value, ok := pvu.mutation.CaseExecutionID(); ok {
		_spec.SetField(processvariable.FieldCaseExecutionID, field.TypeString, value)
	}
	if pvu.mutation.CaseExecutionIDCleared() {
		_spec.ClearField(processvariable.FieldCaseExecutionID, field.TypeString)
	}
	if value, ok := pvu.mutation.CaseInstanceID(); ok {
		_spec.SetField(processvariable.FieldCaseInstanceID, field.TypeString, value)
	}
	if pvu.mutation.CaseInstanceIDCleared() {
		_spec.ClearField(processvariable.FieldCaseInstanceID, field.TypeString)
	}
	if value, ok := pvu.mutation.TaskID(); ok {
		_spec.SetField(processvariable.FieldTaskID, field.TypeInt64, value)
	}
	if value, ok := pvu.mutation.AddedTaskID(); ok {
		_spec.AddField(processvariable.FieldTaskID, field.TypeInt64, value)
	}
	if pvu.mutation.TaskIDCleared() {
		_spec.ClearField(processvariable.FieldTaskID, field.TypeInt64)
	}
	if value, ok := pvu.mutation.ActivityInstanceID(); ok {
		_spec.SetField(processvariable.FieldActivityInstanceID, field.TypeString, value)
	}
	if pvu.mutation.ActivityInstanceIDCleared() {
		_spec.ClearField(processvariable.FieldActivityInstanceID, field.TypeString)
	}
	if value, ok := pvu.mutation.TenantID(); ok {
		_spec.SetField(processvariable.FieldTenantID, field.TypeString, value)
	}
	if value, ok := pvu.mutation.SequenceCounter(); ok {
		_spec.SetField(processvariable.FieldSequenceCounter, field.TypeInt32, value)
	}
	if value, ok := pvu.mutation.AddedSequenceCounter(); ok {
		_spec.AddField(processvariable.FieldSequenceCounter, field.TypeInt32, value)
	}
	if value, ok := pvu.mutation.ConcurrentLocal(); ok {
		_spec.SetField(processvariable.FieldConcurrentLocal, field.TypeBool, value)
	}
	if value, ok := pvu.mutation.ScopeID(); ok {
		_spec.SetField(processvariable.FieldScopeID, field.TypeString, value)
	}
	if pvu.mutation.ScopeIDCleared() {
		_spec.ClearField(processvariable.FieldScopeID, field.TypeString)
	}
	if value, ok := pvu.mutation.ScopeType(); ok {
		_spec.SetField(processvariable.FieldScopeType, field.TypeString, value)
	}
	if pvu.mutation.ScopeTypeCleared() {
		_spec.ClearField(processvariable.FieldScopeType, field.TypeString)
	}
	if value, ok := pvu.mutation.UpdatedAt(); ok {
		_spec.SetField(processvariable.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processvariable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pvu.mutation.done = true
	return n, nil
}

// ProcessVariableUpdateOne is the builder for updating a single ProcessVariable entity.
type ProcessVariableUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessVariableMutation
}

// SetName sets the "name" field.
func (pvuo *ProcessVariableUpdateOne) SetName(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetName(s)
	return pvuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableName(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetName(*s)
	}
	return pvuo
}

// SetType sets the "type" field.
func (pvuo *ProcessVariableUpdateOne) SetType(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetType(s)
	return pvuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableType(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetType(*s)
	}
	return pvuo
}

// SetTextValue sets the "text_value" field.
func (pvuo *ProcessVariableUpdateOne) SetTextValue(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetTextValue(s)
	return pvuo
}

// SetNillableTextValue sets the "text_value" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableTextValue(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetTextValue(*s)
	}
	return pvuo
}

// ClearTextValue clears the value of the "text_value" field.
func (pvuo *ProcessVariableUpdateOne) ClearTextValue() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearTextValue()
	return pvuo
}

// SetTextValue2 sets the "text_value2" field.
func (pvuo *ProcessVariableUpdateOne) SetTextValue2(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetTextValue2(s)
	return pvuo
}

// SetNillableTextValue2 sets the "text_value2" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableTextValue2(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetTextValue2(*s)
	}
	return pvuo
}

// ClearTextValue2 clears the value of the "text_value2" field.
func (pvuo *ProcessVariableUpdateOne) ClearTextValue2() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearTextValue2()
	return pvuo
}

// SetLongValue sets the "long_value" field.
func (pvuo *ProcessVariableUpdateOne) SetLongValue(i int64) *ProcessVariableUpdateOne {
	pvuo.mutation.ResetLongValue()
	pvuo.mutation.SetLongValue(i)
	return pvuo
}

// SetNillableLongValue sets the "long_value" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableLongValue(i *int64) *ProcessVariableUpdateOne {
	if i != nil {
		pvuo.SetLongValue(*i)
	}
	return pvuo
}

// AddLongValue adds i to the "long_value" field.
func (pvuo *ProcessVariableUpdateOne) AddLongValue(i int64) *ProcessVariableUpdateOne {
	pvuo.mutation.AddLongValue(i)
	return pvuo
}

// ClearLongValue clears the value of the "long_value" field.
func (pvuo *ProcessVariableUpdateOne) ClearLongValue() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearLongValue()
	return pvuo
}

// SetDoubleValue sets the "double_value" field.
func (pvuo *ProcessVariableUpdateOne) SetDoubleValue(f float64) *ProcessVariableUpdateOne {
	pvuo.mutation.ResetDoubleValue()
	pvuo.mutation.SetDoubleValue(f)
	return pvuo
}

// SetNillableDoubleValue sets the "double_value" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableDoubleValue(f *float64) *ProcessVariableUpdateOne {
	if f != nil {
		pvuo.SetDoubleValue(*f)
	}
	return pvuo
}

// AddDoubleValue adds f to the "double_value" field.
func (pvuo *ProcessVariableUpdateOne) AddDoubleValue(f float64) *ProcessVariableUpdateOne {
	pvuo.mutation.AddDoubleValue(f)
	return pvuo
}

// ClearDoubleValue clears the value of the "double_value" field.
func (pvuo *ProcessVariableUpdateOne) ClearDoubleValue() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearDoubleValue()
	return pvuo
}

// SetByteArrayValue sets the "byte_array_value" field.
func (pvuo *ProcessVariableUpdateOne) SetByteArrayValue(b []byte) *ProcessVariableUpdateOne {
	pvuo.mutation.SetByteArrayValue(b)
	return pvuo
}

// ClearByteArrayValue clears the value of the "byte_array_value" field.
func (pvuo *ProcessVariableUpdateOne) ClearByteArrayValue() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearByteArrayValue()
	return pvuo
}

// SetExecutionID sets the "execution_id" field.
func (pvuo *ProcessVariableUpdateOne) SetExecutionID(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetExecutionID(s)
	return pvuo
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableExecutionID(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetExecutionID(*s)
	}
	return pvuo
}

// ClearExecutionID clears the value of the "execution_id" field.
func (pvuo *ProcessVariableUpdateOne) ClearExecutionID() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearExecutionID()
	return pvuo
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (pvuo *ProcessVariableUpdateOne) SetProcessInstanceID(i int64) *ProcessVariableUpdateOne {
	pvuo.mutation.ResetProcessInstanceID()
	pvuo.mutation.SetProcessInstanceID(i)
	return pvuo
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableProcessInstanceID(i *int64) *ProcessVariableUpdateOne {
	if i != nil {
		pvuo.SetProcessInstanceID(*i)
	}
	return pvuo
}

// AddProcessInstanceID adds i to the "process_instance_id" field.
func (pvuo *ProcessVariableUpdateOne) AddProcessInstanceID(i int64) *ProcessVariableUpdateOne {
	pvuo.mutation.AddProcessInstanceID(i)
	return pvuo
}

// ClearProcessInstanceID clears the value of the "process_instance_id" field.
func (pvuo *ProcessVariableUpdateOne) ClearProcessInstanceID() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearProcessInstanceID()
	return pvuo
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (pvuo *ProcessVariableUpdateOne) SetProcessDefinitionID(i int64) *ProcessVariableUpdateOne {
	pvuo.mutation.ResetProcessDefinitionID()
	pvuo.mutation.SetProcessDefinitionID(i)
	return pvuo
}

// SetNillableProcessDefinitionID sets the "process_definition_id" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableProcessDefinitionID(i *int64) *ProcessVariableUpdateOne {
	if i != nil {
		pvuo.SetProcessDefinitionID(*i)
	}
	return pvuo
}

// AddProcessDefinitionID adds i to the "process_definition_id" field.
func (pvuo *ProcessVariableUpdateOne) AddProcessDefinitionID(i int64) *ProcessVariableUpdateOne {
	pvuo.mutation.AddProcessDefinitionID(i)
	return pvuo
}

// ClearProcessDefinitionID clears the value of the "process_definition_id" field.
func (pvuo *ProcessVariableUpdateOne) ClearProcessDefinitionID() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearProcessDefinitionID()
	return pvuo
}

// SetCaseExecutionID sets the "case_execution_id" field.
func (pvuo *ProcessVariableUpdateOne) SetCaseExecutionID(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetCaseExecutionID(s)
	return pvuo
}

// SetNillableCaseExecutionID sets the "case_execution_id" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableCaseExecutionID(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetCaseExecutionID(*s)
	}
	return pvuo
}

// ClearCaseExecutionID clears the value of the "case_execution_id" field.
func (pvuo *ProcessVariableUpdateOne) ClearCaseExecutionID() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearCaseExecutionID()
	return pvuo
}

// SetCaseInstanceID sets the "case_instance_id" field.
func (pvuo *ProcessVariableUpdateOne) SetCaseInstanceID(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetCaseInstanceID(s)
	return pvuo
}

// SetNillableCaseInstanceID sets the "case_instance_id" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableCaseInstanceID(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetCaseInstanceID(*s)
	}
	return pvuo
}

// ClearCaseInstanceID clears the value of the "case_instance_id" field.
func (pvuo *ProcessVariableUpdateOne) ClearCaseInstanceID() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearCaseInstanceID()
	return pvuo
}

// SetTaskID sets the "task_id" field.
func (pvuo *ProcessVariableUpdateOne) SetTaskID(i int64) *ProcessVariableUpdateOne {
	pvuo.mutation.ResetTaskID()
	pvuo.mutation.SetTaskID(i)
	return pvuo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableTaskID(i *int64) *ProcessVariableUpdateOne {
	if i != nil {
		pvuo.SetTaskID(*i)
	}
	return pvuo
}

// AddTaskID adds i to the "task_id" field.
func (pvuo *ProcessVariableUpdateOne) AddTaskID(i int64) *ProcessVariableUpdateOne {
	pvuo.mutation.AddTaskID(i)
	return pvuo
}

// ClearTaskID clears the value of the "task_id" field.
func (pvuo *ProcessVariableUpdateOne) ClearTaskID() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearTaskID()
	return pvuo
}

// SetActivityInstanceID sets the "activity_instance_id" field.
func (pvuo *ProcessVariableUpdateOne) SetActivityInstanceID(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetActivityInstanceID(s)
	return pvuo
}

// SetNillableActivityInstanceID sets the "activity_instance_id" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableActivityInstanceID(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetActivityInstanceID(*s)
	}
	return pvuo
}

// ClearActivityInstanceID clears the value of the "activity_instance_id" field.
func (pvuo *ProcessVariableUpdateOne) ClearActivityInstanceID() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearActivityInstanceID()
	return pvuo
}

// SetTenantID sets the "tenant_id" field.
func (pvuo *ProcessVariableUpdateOne) SetTenantID(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetTenantID(s)
	return pvuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableTenantID(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetTenantID(*s)
	}
	return pvuo
}

// SetSequenceCounter sets the "sequence_counter" field.
func (pvuo *ProcessVariableUpdateOne) SetSequenceCounter(i int32) *ProcessVariableUpdateOne {
	pvuo.mutation.ResetSequenceCounter()
	pvuo.mutation.SetSequenceCounter(i)
	return pvuo
}

// SetNillableSequenceCounter sets the "sequence_counter" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableSequenceCounter(i *int32) *ProcessVariableUpdateOne {
	if i != nil {
		pvuo.SetSequenceCounter(*i)
	}
	return pvuo
}

// AddSequenceCounter adds i to the "sequence_counter" field.
func (pvuo *ProcessVariableUpdateOne) AddSequenceCounter(i int32) *ProcessVariableUpdateOne {
	pvuo.mutation.AddSequenceCounter(i)
	return pvuo
}

// SetConcurrentLocal sets the "concurrent_local" field.
func (pvuo *ProcessVariableUpdateOne) SetConcurrentLocal(b bool) *ProcessVariableUpdateOne {
	pvuo.mutation.SetConcurrentLocal(b)
	return pvuo
}

// SetNillableConcurrentLocal sets the "concurrent_local" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableConcurrentLocal(b *bool) *ProcessVariableUpdateOne {
	if b != nil {
		pvuo.SetConcurrentLocal(*b)
	}
	return pvuo
}

// SetScopeID sets the "scope_id" field.
func (pvuo *ProcessVariableUpdateOne) SetScopeID(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetScopeID(s)
	return pvuo
}

// SetNillableScopeID sets the "scope_id" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableScopeID(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetScopeID(*s)
	}
	return pvuo
}

// ClearScopeID clears the value of the "scope_id" field.
func (pvuo *ProcessVariableUpdateOne) ClearScopeID() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearScopeID()
	return pvuo
}

// SetScopeType sets the "scope_type" field.
func (pvuo *ProcessVariableUpdateOne) SetScopeType(s string) *ProcessVariableUpdateOne {
	pvuo.mutation.SetScopeType(s)
	return pvuo
}

// SetNillableScopeType sets the "scope_type" field if the given value is not nil.
func (pvuo *ProcessVariableUpdateOne) SetNillableScopeType(s *string) *ProcessVariableUpdateOne {
	if s != nil {
		pvuo.SetScopeType(*s)
	}
	return pvuo
}

// ClearScopeType clears the value of the "scope_type" field.
func (pvuo *ProcessVariableUpdateOne) ClearScopeType() *ProcessVariableUpdateOne {
	pvuo.mutation.ClearScopeType()
	return pvuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pvuo *ProcessVariableUpdateOne) SetUpdatedAt(t time.Time) *ProcessVariableUpdateOne {
	pvuo.mutation.SetUpdatedAt(t)
	return pvuo
}

// Mutation returns the ProcessVariableMutation object of the builder.
func (pvuo *ProcessVariableUpdateOne) Mutation() *ProcessVariableMutation {
	return pvuo.mutation
}

// Where appends a list predicates to the ProcessVariableUpdate builder.
func (pvuo *ProcessVariableUpdateOne) Where(ps ...predicate.ProcessVariable) *ProcessVariableUpdateOne {
	pvuo.mutation.Where(ps...)
	return pvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pvuo *ProcessVariableUpdateOne) Select(field string, fields ...string) *ProcessVariableUpdateOne {
	pvuo.fields = append([]string{field}, fields...)
	return pvuo
}

// Save executes the query and returns the updated ProcessVariable entity.
func (pvuo *ProcessVariableUpdateOne) Save(ctx context.Context) (*ProcessVariable, error) {
	pvuo.defaults()
	return withHooks(ctx, pvuo.sqlSave, pvuo.mutation, pvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pvuo *ProcessVariableUpdateOne) SaveX(ctx context.Context) *ProcessVariable {
	node, err := pvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pvuo *ProcessVariableUpdateOne) Exec(ctx context.Context) error {
	_, err := pvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvuo *ProcessVariableUpdateOne) ExecX(ctx context.Context) {
	if err := pvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvuo *ProcessVariableUpdateOne) defaults() {
	if _, ok := pvuo.mutation.UpdatedAt(); !ok {
		v := processvariable.UpdateDefaultUpdatedAt()
		pvuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvuo *ProcessVariableUpdateOne) check() error {
	if v, ok := pvuo.mutation.Name(); ok {
		if err := processvariable.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.name": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.GetType(); ok {
		if err := processvariable.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.type": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.ExecutionID(); ok {
		if err := processvariable.ExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "execution_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.execution_id": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.CaseExecutionID(); ok {
		if err := processvariable.CaseExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "case_execution_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.case_execution_id": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.CaseInstanceID(); ok {
		if err := processvariable.CaseInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "case_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.case_instance_id": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.ActivityInstanceID(); ok {
		if err := processvariable.ActivityInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "activity_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.activity_instance_id": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.TenantID(); ok {
		if err := processvariable.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.tenant_id": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.ScopeID(); ok {
		if err := processvariable.ScopeIDValidator(v); err != nil {
			return &ValidationError{Name: "scope_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.scope_id": %w`, err)}
		}
	}
	if v, ok := pvuo.mutation.ScopeType(); ok {
		if err := processvariable.ScopeTypeValidator(v); err != nil {
			return &ValidationError{Name: "scope_type", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.scope_type": %w`, err)}
		}
	}
	return nil
}

func (pvuo *ProcessVariableUpdateOne) sqlSave(ctx context.Context) (_node *ProcessVariable, err error) {
	if err := pvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(processvariable.Table, processvariable.Columns, sqlgraph.NewFieldSpec(processvariable.FieldID, field.TypeInt64))
	id, ok := pvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProcessVariable.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, processvariable.FieldID)
		for _, f := range fields {
			if !processvariable.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != processvariable.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvuo.mutation.Name(); ok {
		_spec.SetField(processvariable.FieldName, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.GetType(); ok {
		_spec.SetField(processvariable.FieldType, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.TextValue(); ok {
		_spec.SetField(processvariable.FieldTextValue, field.TypeString, value)
	}
	if pvuo.mutation.TextValueCleared() {
		_spec.ClearField(processvariable.FieldTextValue, field.TypeString)
	}
	if value, ok := pvuo.mutation.TextValue2(); ok {
		_spec.SetField(processvariable.FieldTextValue2, field.TypeString, value)
	}
	if pvuo.mutation.TextValue2Cleared() {
		_spec.ClearField(processvariable.FieldTextValue2, field.TypeString)
	}
	if value, ok := pvuo.mutation.LongValue(); ok {
		_spec.SetField(processvariable.FieldLongValue, field.TypeInt64, value)
	}
	if value, ok := pvuo.mutation.AddedLongValue(); ok {
		_spec.AddField(processvariable.FieldLongValue, field.TypeInt64, value)
	}
	if pvuo.mutation.LongValueCleared() {
		_spec.ClearField(processvariable.FieldLongValue, field.TypeInt64)
	}
	if value, ok := pvuo.mutation.DoubleValue(); ok {
		_spec.SetField(processvariable.FieldDoubleValue, field.TypeFloat64, value)
	}
	if value, ok := pvuo.mutation.AddedDoubleValue(); ok {
		_spec.AddField(processvariable.FieldDoubleValue, field.TypeFloat64, value)
	}
	if pvuo.mutation.DoubleValueCleared() {
		_spec.ClearField(processvariable.FieldDoubleValue, field.TypeFloat64)
	}
	if value, ok := pvuo.mutation.ByteArrayValue(); ok {
		_spec.SetField(processvariable.FieldByteArrayValue, field.TypeBytes, value)
	}
	if pvuo.mutation.ByteArrayValueCleared() {
		_spec.ClearField(processvariable.FieldByteArrayValue, field.TypeBytes)
	}
	if value, ok := pvuo.mutation.ExecutionID(); ok {
		_spec.SetField(processvariable.FieldExecutionID, field.TypeString, value)
	}
	if pvuo.mutation.ExecutionIDCleared() {
		_spec.ClearField(processvariable.FieldExecutionID, field.TypeString)
	}
	if value, ok := pvuo.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processvariable.FieldProcessInstanceID, field.TypeInt64, value)
	}
	if value, ok := pvuo.mutation.AddedProcessInstanceID(); ok {
		_spec.AddField(processvariable.FieldProcessInstanceID, field.TypeInt64, value)
	}
	if pvuo.mutation.ProcessInstanceIDCleared() {
		_spec.ClearField(processvariable.FieldProcessInstanceID, field.TypeInt64)
	}
	if value, ok := pvuo.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(processvariable.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := pvuo.mutation.AddedProcessDefinitionID(); ok {
		_spec.AddField(processvariable.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if pvuo.mutation.ProcessDefinitionIDCleared() {
		_spec.ClearField(processvariable.FieldProcessDefinitionID, field.TypeInt64)
	}
	if value, ok := pvuo.mutation.CaseExecutionID(); ok {
		_spec.SetField(processvariable.FieldCaseExecutionID, field.TypeString, value)
	}
	if pvuo.mutation.CaseExecutionIDCleared() {
		_spec.ClearField(processvariable.FieldCaseExecutionID, field.TypeString)
	}
	if value, ok := pvuo.mutation.CaseInstanceID(); ok {
		_spec.SetField(processvariable.FieldCaseInstanceID, field.TypeString, value)
	}
	if pvuo.mutation.CaseInstanceIDCleared() {
		_spec.ClearField(processvariable.FieldCaseInstanceID, field.TypeString)
	}
	if value, ok := pvuo.mutation.TaskID(); ok {
		_spec.SetField(processvariable.FieldTaskID, field.TypeInt64, value)
	}
	if value, ok := pvuo.mutation.AddedTaskID(); ok {
		_spec.AddField(processvariable.FieldTaskID, field.TypeInt64, value)
	}
	if pvuo.mutation.TaskIDCleared() {
		_spec.ClearField(processvariable.FieldTaskID, field.TypeInt64)
	}
	if value, ok := pvuo.mutation.ActivityInstanceID(); ok {
		_spec.SetField(processvariable.FieldActivityInstanceID, field.TypeString, value)
	}
	if pvuo.mutation.ActivityInstanceIDCleared() {
		_spec.ClearField(processvariable.FieldActivityInstanceID, field.TypeString)
	}
	if value, ok := pvuo.mutation.TenantID(); ok {
		_spec.SetField(processvariable.FieldTenantID, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.SequenceCounter(); ok {
		_spec.SetField(processvariable.FieldSequenceCounter, field.TypeInt32, value)
	}
	if value, ok := pvuo.mutation.AddedSequenceCounter(); ok {
		_spec.AddField(processvariable.FieldSequenceCounter, field.TypeInt32, value)
	}
	if value, ok := pvuo.mutation.ConcurrentLocal(); ok {
		_spec.SetField(processvariable.FieldConcurrentLocal, field.TypeBool, value)
	}
	if value, ok := pvuo.mutation.ScopeID(); ok {
		_spec.SetField(processvariable.FieldScopeID, field.TypeString, value)
	}
	if pvuo.mutation.ScopeIDCleared() {
		_spec.ClearField(processvariable.FieldScopeID, field.TypeString)
	}
	if value, ok := pvuo.mutation.ScopeType(); ok {
		_spec.SetField(processvariable.FieldScopeType, field.TypeString, value)
	}
	if pvuo.mutation.ScopeTypeCleared() {
		_spec.ClearField(processvariable.FieldScopeType, field.TypeString)
	}
	if value, ok := pvuo.mutation.UpdatedAt(); ok {
		_spec.SetField(processvariable.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ProcessVariable{config: pvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processvariable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pvuo.mutation.done = true
	return _node, nil
}
