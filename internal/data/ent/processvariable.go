// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processvariable"
)

// ProcessVariable is the model entity for the ProcessVariable schema.
type ProcessVariable struct {
	config `json:"-"`
	// ID of the ent.
	// 变量ID
	ID int64 `json:"id,omitempty"`
	// 变量名称
	Name string `json:"name,omitempty"`
	// 变量类型: string, integer, boolean, date, json, bytes
	Type string `json:"type,omitempty"`
	// 文本值
	TextValue string `json:"text_value,omitempty"`
	// 文本值2(用于长文本)
	TextValue2 string `json:"text_value2,omitempty"`
	// 长整型值
	LongValue int64 `json:"long_value,omitempty"`
	// 浮点型值
	DoubleValue float64 `json:"double_value,omitempty"`
	// 字节数组值
	ByteArrayValue []byte `json:"byte_array_value,omitempty"`
	// 执行ID
	ExecutionID string `json:"execution_id,omitempty"`
	// 流程实例ID
	ProcessInstanceID int64 `json:"process_instance_id,omitempty"`
	// 流程定义ID
	ProcessDefinitionID int64 `json:"process_definition_id,omitempty"`
	// 案例执行ID
	CaseExecutionID string `json:"case_execution_id,omitempty"`
	// 案例实例ID
	CaseInstanceID string `json:"case_instance_id,omitempty"`
	// 任务ID
	TaskID int64 `json:"task_id,omitempty"`
	// 活动实例ID
	ActivityInstanceID string `json:"activity_instance_id,omitempty"`
	// 租户ID
	TenantID string `json:"tenant_id,omitempty"`
	// 序列计数器
	SequenceCounter int32 `json:"sequence_counter,omitempty"`
	// 是否并发本地变量
	ConcurrentLocal bool `json:"concurrent_local,omitempty"`
	// 作用域ID
	ScopeID string `json:"scope_id,omitempty"`
	// 作用域类型
	ScopeType string `json:"scope_type,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcessVariable) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case processvariable.FieldByteArrayValue:
			values[i] = new([]byte)
		case processvariable.FieldConcurrentLocal:
			values[i] = new(sql.NullBool)
		case processvariable.FieldDoubleValue:
			values[i] = new(sql.NullFloat64)
		case processvariable.FieldID, processvariable.FieldLongValue, processvariable.FieldProcessInstanceID, processvariable.FieldProcessDefinitionID, processvariable.FieldTaskID, processvariable.FieldSequenceCounter:
			values[i] = new(sql.NullInt64)
		case processvariable.FieldName, processvariable.FieldType, processvariable.FieldTextValue, processvariable.FieldTextValue2, processvariable.FieldExecutionID, processvariable.FieldCaseExecutionID, processvariable.FieldCaseInstanceID, processvariable.FieldActivityInstanceID, processvariable.FieldTenantID, processvariable.FieldScopeID, processvariable.FieldScopeType:
			values[i] = new(sql.NullString)
		case processvariable.FieldCreatedAt, processvariable.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcessVariable fields.
func (pv *ProcessVariable) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case processvariable.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pv.ID = int64(value.Int64)
		case processvariable.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pv.Name = value.String
			}
		case processvariable.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pv.Type = value.String
			}
		case processvariable.FieldTextValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text_value", values[i])
			} else if value.Valid {
				pv.TextValue = value.String
			}
		case processvariable.FieldTextValue2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text_value2", values[i])
			} else if value.Valid {
				pv.TextValue2 = value.String
			}
		case processvariable.FieldLongValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field long_value", values[i])
			} else if value.Valid {
				pv.LongValue = value.Int64
			}
		case processvariable.FieldDoubleValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field double_value", values[i])
			} else if value.Valid {
				pv.DoubleValue = value.Float64
			}
		case processvariable.FieldByteArrayValue:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field byte_array_value", values[i])
			} else if value != nil {
				pv.ByteArrayValue = *value
			}
		case processvariable.FieldExecutionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field execution_id", values[i])
			} else if value.Valid {
				pv.ExecutionID = value.String
			}
		case processvariable.FieldProcessInstanceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field process_instance_id", values[i])
			} else if value.Valid {
				pv.ProcessInstanceID = value.Int64
			}
		case processvariable.FieldProcessDefinitionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field process_definition_id", values[i])
			} else if value.Valid {
				pv.ProcessDefinitionID = value.Int64
			}
		case processvariable.FieldCaseExecutionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field case_execution_id", values[i])
			} else if value.Valid {
				pv.CaseExecutionID = value.String
			}
		case processvariable.FieldCaseInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field case_instance_id", values[i])
			} else if value.Valid {
				pv.CaseInstanceID = value.String
			}
		case processvariable.FieldTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				pv.TaskID = value.Int64
			}
		case processvariable.FieldActivityInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_instance_id", values[i])
			} else if value.Valid {
				pv.ActivityInstanceID = value.String
			}
		case processvariable.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				pv.TenantID = value.String
			}
		case processvariable.FieldSequenceCounter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sequence_counter", values[i])
			} else if value.Valid {
				pv.SequenceCounter = int32(value.Int64)
			}
		case processvariable.FieldConcurrentLocal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field concurrent_local", values[i])
			} else if value.Valid {
				pv.ConcurrentLocal = value.Bool
			}
		case processvariable.FieldScopeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope_id", values[i])
			} else if value.Valid {
				pv.ScopeID = value.String
			}
		case processvariable.FieldScopeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scope_type", values[i])
			} else if value.Valid {
				pv.ScopeType = value.String
			}
		case processvariable.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pv.CreatedAt = value.Time
			}
		case processvariable.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pv.UpdatedAt = value.Time
			}
		default:
			pv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProcessVariable.
// This includes values selected through modifiers, order, etc.
func (pv *ProcessVariable) Value(name string) (ent.Value, error) {
	return pv.selectValues.Get(name)
}

// Update returns a builder for updating this ProcessVariable.
// Note that you need to call ProcessVariable.Unwrap() before calling this method if this ProcessVariable
// was returned from a transaction, and the transaction was committed or rolled back.
func (pv *ProcessVariable) Update() *ProcessVariableUpdateOne {
	return NewProcessVariableClient(pv.config).UpdateOne(pv)
}

// Unwrap unwraps the ProcessVariable entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pv *ProcessVariable) Unwrap() *ProcessVariable {
	_tx, ok := pv.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProcessVariable is not a transactional entity")
	}
	pv.config.driver = _tx.drv
	return pv
}

// String implements the fmt.Stringer.
func (pv *ProcessVariable) String() string {
	var builder strings.Builder
	builder.WriteString("ProcessVariable(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pv.ID))
	builder.WriteString("name=")
	builder.WriteString(pv.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(pv.Type)
	builder.WriteString(", ")
	builder.WriteString("text_value=")
	builder.WriteString(pv.TextValue)
	builder.WriteString(", ")
	builder.WriteString("text_value2=")
	builder.WriteString(pv.TextValue2)
	builder.WriteString(", ")
	builder.WriteString("long_value=")
	builder.WriteString(fmt.Sprintf("%v", pv.LongValue))
	builder.WriteString(", ")
	builder.WriteString("double_value=")
	builder.WriteString(fmt.Sprintf("%v", pv.DoubleValue))
	builder.WriteString(", ")
	builder.WriteString("byte_array_value=")
	builder.WriteString(fmt.Sprintf("%v", pv.ByteArrayValue))
	builder.WriteString(", ")
	builder.WriteString("execution_id=")
	builder.WriteString(pv.ExecutionID)
	builder.WriteString(", ")
	builder.WriteString("process_instance_id=")
	builder.WriteString(fmt.Sprintf("%v", pv.ProcessInstanceID))
	builder.WriteString(", ")
	builder.WriteString("process_definition_id=")
	builder.WriteString(fmt.Sprintf("%v", pv.ProcessDefinitionID))
	builder.WriteString(", ")
	builder.WriteString("case_execution_id=")
	builder.WriteString(pv.CaseExecutionID)
	builder.WriteString(", ")
	builder.WriteString("case_instance_id=")
	builder.WriteString(pv.CaseInstanceID)
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", pv.TaskID))
	builder.WriteString(", ")
	builder.WriteString("activity_instance_id=")
	builder.WriteString(pv.ActivityInstanceID)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(pv.TenantID)
	builder.WriteString(", ")
	builder.WriteString("sequence_counter=")
	builder.WriteString(fmt.Sprintf("%v", pv.SequenceCounter))
	builder.WriteString(", ")
	builder.WriteString("concurrent_local=")
	builder.WriteString(fmt.Sprintf("%v", pv.ConcurrentLocal))
	builder.WriteString(", ")
	builder.WriteString("scope_id=")
	builder.WriteString(pv.ScopeID)
	builder.WriteString(", ")
	builder.WriteString("scope_type=")
	builder.WriteString(pv.ScopeType)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pv.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProcessVariables is a parsable slice of ProcessVariable.
type ProcessVariables []*ProcessVariable
