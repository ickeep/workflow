// Code generated by ent, DO NOT EDIT.

package processinstance

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the processinstance type in the database.
	Label = "process_instance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBusinessKey holds the string denoting the business_key field in the database.
	FieldBusinessKey = "business_key"
	// FieldProcessDefinitionID holds the string denoting the process_definition_id field in the database.
	FieldProcessDefinitionID = "process_definition_id"
	// FieldProcessDefinitionKey holds the string denoting the process_definition_key field in the database.
	FieldProcessDefinitionKey = "process_definition_key"
	// FieldProcessDefinitionName holds the string denoting the process_definition_name field in the database.
	FieldProcessDefinitionName = "process_definition_name"
	// FieldProcessDefinitionVersion holds the string denoting the process_definition_version field in the database.
	FieldProcessDefinitionVersion = "process_definition_version"
	// FieldDeploymentID holds the string denoting the deployment_id field in the database.
	FieldDeploymentID = "deployment_id"
	// FieldStartUserID holds the string denoting the start_user_id field in the database.
	FieldStartUserID = "start_user_id"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldDeleteReason holds the string denoting the delete_reason field in the database.
	FieldDeleteReason = "delete_reason"
	// FieldSuperProcessInstanceID holds the string denoting the super_process_instance_id field in the database.
	FieldSuperProcessInstanceID = "super_process_instance_id"
	// FieldRootProcessInstanceID holds the string denoting the root_process_instance_id field in the database.
	FieldRootProcessInstanceID = "root_process_instance_id"
	// FieldSuspended holds the string denoting the suspended field in the database.
	FieldSuspended = "suspended"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCallbackID holds the string denoting the callback_id field in the database.
	FieldCallbackID = "callback_id"
	// FieldCallbackType holds the string denoting the callback_type field in the database.
	FieldCallbackType = "callback_type"
	// FieldReferenceID holds the string denoting the reference_id field in the database.
	FieldReferenceID = "reference_id"
	// FieldReferenceType holds the string denoting the reference_type field in the database.
	FieldReferenceType = "reference_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the processinstance in the database.
	Table = "process_instances"
)

// Columns holds all SQL columns for processinstance fields.
var Columns = []string{
	FieldID,
	FieldBusinessKey,
	FieldProcessDefinitionID,
	FieldProcessDefinitionKey,
	FieldProcessDefinitionName,
	FieldProcessDefinitionVersion,
	FieldDeploymentID,
	FieldStartUserID,
	FieldStartTime,
	FieldEndTime,
	FieldDuration,
	FieldDeleteReason,
	FieldSuperProcessInstanceID,
	FieldRootProcessInstanceID,
	FieldSuspended,
	FieldTenantID,
	FieldName,
	FieldDescription,
	FieldCallbackID,
	FieldCallbackType,
	FieldReferenceID,
	FieldReferenceType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// BusinessKeyValidator is a validator for the "business_key" field. It is called by the builders before save.
	BusinessKeyValidator func(string) error
	// ProcessDefinitionKeyValidator is a validator for the "process_definition_key" field. It is called by the builders before save.
	ProcessDefinitionKeyValidator func(string) error
	// ProcessDefinitionNameValidator is a validator for the "process_definition_name" field. It is called by the builders before save.
	ProcessDefinitionNameValidator func(string) error
	// DeploymentIDValidator is a validator for the "deployment_id" field. It is called by the builders before save.
	DeploymentIDValidator func(string) error
	// StartUserIDValidator is a validator for the "start_user_id" field. It is called by the builders before save.
	StartUserIDValidator func(string) error
	// DefaultStartTime holds the default value on creation for the "start_time" field.
	DefaultStartTime func() time.Time
	// DeleteReasonValidator is a validator for the "delete_reason" field. It is called by the builders before save.
	DeleteReasonValidator func(string) error
	// SuperProcessInstanceIDValidator is a validator for the "super_process_instance_id" field. It is called by the builders before save.
	SuperProcessInstanceIDValidator func(string) error
	// RootProcessInstanceIDValidator is a validator for the "root_process_instance_id" field. It is called by the builders before save.
	RootProcessInstanceIDValidator func(string) error
	// DefaultSuspended holds the default value on creation for the "suspended" field.
	DefaultSuspended bool
	// DefaultTenantID holds the default value on creation for the "tenant_id" field.
	DefaultTenantID string
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CallbackIDValidator is a validator for the "callback_id" field. It is called by the builders before save.
	CallbackIDValidator func(string) error
	// CallbackTypeValidator is a validator for the "callback_type" field. It is called by the builders before save.
	CallbackTypeValidator func(string) error
	// ReferenceIDValidator is a validator for the "reference_id" field. It is called by the builders before save.
	ReferenceIDValidator func(string) error
	// ReferenceTypeValidator is a validator for the "reference_type" field. It is called by the builders before save.
	ReferenceTypeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ProcessInstance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBusinessKey orders the results by the business_key field.
func ByBusinessKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessKey, opts...).ToFunc()
}

// ByProcessDefinitionID orders the results by the process_definition_id field.
func ByProcessDefinitionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionID, opts...).ToFunc()
}

// ByProcessDefinitionKey orders the results by the process_definition_key field.
func ByProcessDefinitionKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionKey, opts...).ToFunc()
}

// ByProcessDefinitionName orders the results by the process_definition_name field.
func ByProcessDefinitionName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionName, opts...).ToFunc()
}

// ByProcessDefinitionVersion orders the results by the process_definition_version field.
func ByProcessDefinitionVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionVersion, opts...).ToFunc()
}

// ByDeploymentID orders the results by the deployment_id field.
func ByDeploymentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploymentID, opts...).ToFunc()
}

// ByStartUserID orders the results by the start_user_id field.
func ByStartUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartUserID, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByDeleteReason orders the results by the delete_reason field.
func ByDeleteReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteReason, opts...).ToFunc()
}

// BySuperProcessInstanceID orders the results by the super_process_instance_id field.
func BySuperProcessInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuperProcessInstanceID, opts...).ToFunc()
}

// ByRootProcessInstanceID orders the results by the root_process_instance_id field.
func ByRootProcessInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRootProcessInstanceID, opts...).ToFunc()
}

// BySuspended orders the results by the suspended field.
func BySuspended(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuspended, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCallbackID orders the results by the callback_id field.
func ByCallbackID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCallbackID, opts...).ToFunc()
}

// ByCallbackType orders the results by the callback_type field.
func ByCallbackType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCallbackType, opts...).ToFunc()
}

// ByReferenceID orders the results by the reference_id field.
func ByReferenceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferenceID, opts...).ToFunc()
}

// ByReferenceType orders the results by the reference_type field.
func ByReferenceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferenceType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
