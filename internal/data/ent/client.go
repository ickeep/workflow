// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/workflow-engine/workflow-engine/internal/data/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/historicprocessinstance"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processdefinition"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processevent"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processinstance"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processvariable"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/taskinstance"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// HistoricProcessInstance is the client for interacting with the HistoricProcessInstance builders.
	HistoricProcessInstance *HistoricProcessInstanceClient
	// ProcessDefinition is the client for interacting with the ProcessDefinition builders.
	ProcessDefinition *ProcessDefinitionClient
	// ProcessEvent is the client for interacting with the ProcessEvent builders.
	ProcessEvent *ProcessEventClient
	// ProcessInstance is the client for interacting with the ProcessInstance builders.
	ProcessInstance *ProcessInstanceClient
	// ProcessVariable is the client for interacting with the ProcessVariable builders.
	ProcessVariable *ProcessVariableClient
	// TaskInstance is the client for interacting with the TaskInstance builders.
	TaskInstance *TaskInstanceClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.HistoricProcessInstance = NewHistoricProcessInstanceClient(c.config)
	c.ProcessDefinition = NewProcessDefinitionClient(c.config)
	c.ProcessEvent = NewProcessEventClient(c.config)
	c.ProcessInstance = NewProcessInstanceClient(c.config)
	c.ProcessVariable = NewProcessVariableClient(c.config)
	c.TaskInstance = NewTaskInstanceClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		HistoricProcessInstance: NewHistoricProcessInstanceClient(cfg),
		ProcessDefinition:       NewProcessDefinitionClient(cfg),
		ProcessEvent:            NewProcessEventClient(cfg),
		ProcessInstance:         NewProcessInstanceClient(cfg),
		ProcessVariable:         NewProcessVariableClient(cfg),
		TaskInstance:            NewTaskInstanceClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		HistoricProcessInstance: NewHistoricProcessInstanceClient(cfg),
		ProcessDefinition:       NewProcessDefinitionClient(cfg),
		ProcessEvent:            NewProcessEventClient(cfg),
		ProcessInstance:         NewProcessInstanceClient(cfg),
		ProcessVariable:         NewProcessVariableClient(cfg),
		TaskInstance:            NewTaskInstanceClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		HistoricProcessInstance.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.HistoricProcessInstance, c.ProcessDefinition, c.ProcessEvent,
		c.ProcessInstance, c.ProcessVariable, c.TaskInstance,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.HistoricProcessInstance, c.ProcessDefinition, c.ProcessEvent,
		c.ProcessInstance, c.ProcessVariable, c.TaskInstance,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *HistoricProcessInstanceMutation:
		return c.HistoricProcessInstance.mutate(ctx, m)
	case *ProcessDefinitionMutation:
		return c.ProcessDefinition.mutate(ctx, m)
	case *ProcessEventMutation:
		return c.ProcessEvent.mutate(ctx, m)
	case *ProcessInstanceMutation:
		return c.ProcessInstance.mutate(ctx, m)
	case *ProcessVariableMutation:
		return c.ProcessVariable.mutate(ctx, m)
	case *TaskInstanceMutation:
		return c.TaskInstance.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// HistoricProcessInstanceClient is a client for the HistoricProcessInstance schema.
type HistoricProcessInstanceClient struct {
	config
}

// NewHistoricProcessInstanceClient returns a client for the HistoricProcessInstance from the given config.
func NewHistoricProcessInstanceClient(c config) *HistoricProcessInstanceClient {
	return &HistoricProcessInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `historicprocessinstance.Hooks(f(g(h())))`.
func (c *HistoricProcessInstanceClient) Use(hooks ...Hook) {
	c.hooks.HistoricProcessInstance = append(c.hooks.HistoricProcessInstance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `historicprocessinstance.Intercept(f(g(h())))`.
func (c *HistoricProcessInstanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.HistoricProcessInstance = append(c.inters.HistoricProcessInstance, interceptors...)
}

// Create returns a builder for creating a HistoricProcessInstance entity.
func (c *HistoricProcessInstanceClient) Create() *HistoricProcessInstanceCreate {
	mutation := newHistoricProcessInstanceMutation(c.config, OpCreate)
	return &HistoricProcessInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HistoricProcessInstance entities.
func (c *HistoricProcessInstanceClient) CreateBulk(builders ...*HistoricProcessInstanceCreate) *HistoricProcessInstanceCreateBulk {
	return &HistoricProcessInstanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HistoricProcessInstanceClient) MapCreateBulk(slice any, setFunc func(*HistoricProcessInstanceCreate, int)) *HistoricProcessInstanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HistoricProcessInstanceCreateBulk{err: fmt.Errorf("calling to HistoricProcessInstanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HistoricProcessInstanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HistoricProcessInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HistoricProcessInstance.
func (c *HistoricProcessInstanceClient) Update() *HistoricProcessInstanceUpdate {
	mutation := newHistoricProcessInstanceMutation(c.config, OpUpdate)
	return &HistoricProcessInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HistoricProcessInstanceClient) UpdateOne(hpi *HistoricProcessInstance) *HistoricProcessInstanceUpdateOne {
	mutation := newHistoricProcessInstanceMutation(c.config, OpUpdateOne, withHistoricProcessInstance(hpi))
	return &HistoricProcessInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HistoricProcessInstanceClient) UpdateOneID(id int64) *HistoricProcessInstanceUpdateOne {
	mutation := newHistoricProcessInstanceMutation(c.config, OpUpdateOne, withHistoricProcessInstanceID(id))
	return &HistoricProcessInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HistoricProcessInstance.
func (c *HistoricProcessInstanceClient) Delete() *HistoricProcessInstanceDelete {
	mutation := newHistoricProcessInstanceMutation(c.config, OpDelete)
	return &HistoricProcessInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HistoricProcessInstanceClient) DeleteOne(hpi *HistoricProcessInstance) *HistoricProcessInstanceDeleteOne {
	return c.DeleteOneID(hpi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HistoricProcessInstanceClient) DeleteOneID(id int64) *HistoricProcessInstanceDeleteOne {
	builder := c.Delete().Where(historicprocessinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HistoricProcessInstanceDeleteOne{builder}
}

// Query returns a query builder for HistoricProcessInstance.
func (c *HistoricProcessInstanceClient) Query() *HistoricProcessInstanceQuery {
	return &HistoricProcessInstanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHistoricProcessInstance},
		inters: c.Interceptors(),
	}
}

// Get returns a HistoricProcessInstance entity by its id.
func (c *HistoricProcessInstanceClient) Get(ctx context.Context, id int64) (*HistoricProcessInstance, error) {
	return c.Query().Where(historicprocessinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HistoricProcessInstanceClient) GetX(ctx context.Context, id int64) *HistoricProcessInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *HistoricProcessInstanceClient) Hooks() []Hook {
	return c.hooks.HistoricProcessInstance
}

// Interceptors returns the client interceptors.
func (c *HistoricProcessInstanceClient) Interceptors() []Interceptor {
	return c.inters.HistoricProcessInstance
}

func (c *HistoricProcessInstanceClient) mutate(ctx context.Context, m *HistoricProcessInstanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HistoricProcessInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HistoricProcessInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HistoricProcessInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HistoricProcessInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HistoricProcessInstance mutation op: %q", m.Op())
	}
}

// ProcessDefinitionClient is a client for the ProcessDefinition schema.
type ProcessDefinitionClient struct {
	config
}

// NewProcessDefinitionClient returns a client for the ProcessDefinition from the given config.
func NewProcessDefinitionClient(c config) *ProcessDefinitionClient {
	return &ProcessDefinitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `processdefinition.Hooks(f(g(h())))`.
func (c *ProcessDefinitionClient) Use(hooks ...Hook) {
	c.hooks.ProcessDefinition = append(c.hooks.ProcessDefinition, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `processdefinition.Intercept(f(g(h())))`.
func (c *ProcessDefinitionClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProcessDefinition = append(c.inters.ProcessDefinition, interceptors...)
}

// Create returns a builder for creating a ProcessDefinition entity.
func (c *ProcessDefinitionClient) Create() *ProcessDefinitionCreate {
	mutation := newProcessDefinitionMutation(c.config, OpCreate)
	return &ProcessDefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProcessDefinition entities.
func (c *ProcessDefinitionClient) CreateBulk(builders ...*ProcessDefinitionCreate) *ProcessDefinitionCreateBulk {
	return &ProcessDefinitionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProcessDefinitionClient) MapCreateBulk(slice any, setFunc func(*ProcessDefinitionCreate, int)) *ProcessDefinitionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProcessDefinitionCreateBulk{err: fmt.Errorf("calling to ProcessDefinitionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProcessDefinitionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProcessDefinitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProcessDefinition.
func (c *ProcessDefinitionClient) Update() *ProcessDefinitionUpdate {
	mutation := newProcessDefinitionMutation(c.config, OpUpdate)
	return &ProcessDefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProcessDefinitionClient) UpdateOne(pd *ProcessDefinition) *ProcessDefinitionUpdateOne {
	mutation := newProcessDefinitionMutation(c.config, OpUpdateOne, withProcessDefinition(pd))
	return &ProcessDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProcessDefinitionClient) UpdateOneID(id int64) *ProcessDefinitionUpdateOne {
	mutation := newProcessDefinitionMutation(c.config, OpUpdateOne, withProcessDefinitionID(id))
	return &ProcessDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProcessDefinition.
func (c *ProcessDefinitionClient) Delete() *ProcessDefinitionDelete {
	mutation := newProcessDefinitionMutation(c.config, OpDelete)
	return &ProcessDefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProcessDefinitionClient) DeleteOne(pd *ProcessDefinition) *ProcessDefinitionDeleteOne {
	return c.DeleteOneID(pd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProcessDefinitionClient) DeleteOneID(id int64) *ProcessDefinitionDeleteOne {
	builder := c.Delete().Where(processdefinition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProcessDefinitionDeleteOne{builder}
}

// Query returns a query builder for ProcessDefinition.
func (c *ProcessDefinitionClient) Query() *ProcessDefinitionQuery {
	return &ProcessDefinitionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProcessDefinition},
		inters: c.Interceptors(),
	}
}

// Get returns a ProcessDefinition entity by its id.
func (c *ProcessDefinitionClient) Get(ctx context.Context, id int64) (*ProcessDefinition, error) {
	return c.Query().Where(processdefinition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProcessDefinitionClient) GetX(ctx context.Context, id int64) *ProcessDefinition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProcessDefinitionClient) Hooks() []Hook {
	return c.hooks.ProcessDefinition
}

// Interceptors returns the client interceptors.
func (c *ProcessDefinitionClient) Interceptors() []Interceptor {
	return c.inters.ProcessDefinition
}

func (c *ProcessDefinitionClient) mutate(ctx context.Context, m *ProcessDefinitionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProcessDefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProcessDefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProcessDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProcessDefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProcessDefinition mutation op: %q", m.Op())
	}
}

// ProcessEventClient is a client for the ProcessEvent schema.
type ProcessEventClient struct {
	config
}

// NewProcessEventClient returns a client for the ProcessEvent from the given config.
func NewProcessEventClient(c config) *ProcessEventClient {
	return &ProcessEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `processevent.Hooks(f(g(h())))`.
func (c *ProcessEventClient) Use(hooks ...Hook) {
	c.hooks.ProcessEvent = append(c.hooks.ProcessEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `processevent.Intercept(f(g(h())))`.
func (c *ProcessEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProcessEvent = append(c.inters.ProcessEvent, interceptors...)
}

// Create returns a builder for creating a ProcessEvent entity.
func (c *ProcessEventClient) Create() *ProcessEventCreate {
	mutation := newProcessEventMutation(c.config, OpCreate)
	return &ProcessEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProcessEvent entities.
func (c *ProcessEventClient) CreateBulk(builders ...*ProcessEventCreate) *ProcessEventCreateBulk {
	return &ProcessEventCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProcessEventClient) MapCreateBulk(slice any, setFunc func(*ProcessEventCreate, int)) *ProcessEventCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProcessEventCreateBulk{err: fmt.Errorf("calling to ProcessEventClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProcessEventCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProcessEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProcessEvent.
func (c *ProcessEventClient) Update() *ProcessEventUpdate {
	mutation := newProcessEventMutation(c.config, OpUpdate)
	return &ProcessEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProcessEventClient) UpdateOne(pe *ProcessEvent) *ProcessEventUpdateOne {
	mutation := newProcessEventMutation(c.config, OpUpdateOne, withProcessEvent(pe))
	return &ProcessEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProcessEventClient) UpdateOneID(id int64) *ProcessEventUpdateOne {
	mutation := newProcessEventMutation(c.config, OpUpdateOne, withProcessEventID(id))
	return &ProcessEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProcessEvent.
func (c *ProcessEventClient) Delete() *ProcessEventDelete {
	mutation := newProcessEventMutation(c.config, OpDelete)
	return &ProcessEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProcessEventClient) DeleteOne(pe *ProcessEvent) *ProcessEventDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProcessEventClient) DeleteOneID(id int64) *ProcessEventDeleteOne {
	builder := c.Delete().Where(processevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProcessEventDeleteOne{builder}
}

// Query returns a query builder for ProcessEvent.
func (c *ProcessEventClient) Query() *ProcessEventQuery {
	return &ProcessEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProcessEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a ProcessEvent entity by its id.
func (c *ProcessEventClient) Get(ctx context.Context, id int64) (*ProcessEvent, error) {
	return c.Query().Where(processevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProcessEventClient) GetX(ctx context.Context, id int64) *ProcessEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProcessEventClient) Hooks() []Hook {
	return c.hooks.ProcessEvent
}

// Interceptors returns the client interceptors.
func (c *ProcessEventClient) Interceptors() []Interceptor {
	return c.inters.ProcessEvent
}

func (c *ProcessEventClient) mutate(ctx context.Context, m *ProcessEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProcessEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProcessEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProcessEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProcessEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProcessEvent mutation op: %q", m.Op())
	}
}

// ProcessInstanceClient is a client for the ProcessInstance schema.
type ProcessInstanceClient struct {
	config
}

// NewProcessInstanceClient returns a client for the ProcessInstance from the given config.
func NewProcessInstanceClient(c config) *ProcessInstanceClient {
	return &ProcessInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `processinstance.Hooks(f(g(h())))`.
func (c *ProcessInstanceClient) Use(hooks ...Hook) {
	c.hooks.ProcessInstance = append(c.hooks.ProcessInstance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `processinstance.Intercept(f(g(h())))`.
func (c *ProcessInstanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProcessInstance = append(c.inters.ProcessInstance, interceptors...)
}

// Create returns a builder for creating a ProcessInstance entity.
func (c *ProcessInstanceClient) Create() *ProcessInstanceCreate {
	mutation := newProcessInstanceMutation(c.config, OpCreate)
	return &ProcessInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProcessInstance entities.
func (c *ProcessInstanceClient) CreateBulk(builders ...*ProcessInstanceCreate) *ProcessInstanceCreateBulk {
	return &ProcessInstanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProcessInstanceClient) MapCreateBulk(slice any, setFunc func(*ProcessInstanceCreate, int)) *ProcessInstanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProcessInstanceCreateBulk{err: fmt.Errorf("calling to ProcessInstanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProcessInstanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProcessInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProcessInstance.
func (c *ProcessInstanceClient) Update() *ProcessInstanceUpdate {
	mutation := newProcessInstanceMutation(c.config, OpUpdate)
	return &ProcessInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProcessInstanceClient) UpdateOne(pi *ProcessInstance) *ProcessInstanceUpdateOne {
	mutation := newProcessInstanceMutation(c.config, OpUpdateOne, withProcessInstance(pi))
	return &ProcessInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProcessInstanceClient) UpdateOneID(id int64) *ProcessInstanceUpdateOne {
	mutation := newProcessInstanceMutation(c.config, OpUpdateOne, withProcessInstanceID(id))
	return &ProcessInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProcessInstance.
func (c *ProcessInstanceClient) Delete() *ProcessInstanceDelete {
	mutation := newProcessInstanceMutation(c.config, OpDelete)
	return &ProcessInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProcessInstanceClient) DeleteOne(pi *ProcessInstance) *ProcessInstanceDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProcessInstanceClient) DeleteOneID(id int64) *ProcessInstanceDeleteOne {
	builder := c.Delete().Where(processinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProcessInstanceDeleteOne{builder}
}

// Query returns a query builder for ProcessInstance.
func (c *ProcessInstanceClient) Query() *ProcessInstanceQuery {
	return &ProcessInstanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProcessInstance},
		inters: c.Interceptors(),
	}
}

// Get returns a ProcessInstance entity by its id.
func (c *ProcessInstanceClient) Get(ctx context.Context, id int64) (*ProcessInstance, error) {
	return c.Query().Where(processinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProcessInstanceClient) GetX(ctx context.Context, id int64) *ProcessInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProcessInstanceClient) Hooks() []Hook {
	return c.hooks.ProcessInstance
}

// Interceptors returns the client interceptors.
func (c *ProcessInstanceClient) Interceptors() []Interceptor {
	return c.inters.ProcessInstance
}

func (c *ProcessInstanceClient) mutate(ctx context.Context, m *ProcessInstanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProcessInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProcessInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProcessInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProcessInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProcessInstance mutation op: %q", m.Op())
	}
}

// ProcessVariableClient is a client for the ProcessVariable schema.
type ProcessVariableClient struct {
	config
}

// NewProcessVariableClient returns a client for the ProcessVariable from the given config.
func NewProcessVariableClient(c config) *ProcessVariableClient {
	return &ProcessVariableClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `processvariable.Hooks(f(g(h())))`.
func (c *ProcessVariableClient) Use(hooks ...Hook) {
	c.hooks.ProcessVariable = append(c.hooks.ProcessVariable, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `processvariable.Intercept(f(g(h())))`.
func (c *ProcessVariableClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProcessVariable = append(c.inters.ProcessVariable, interceptors...)
}

// Create returns a builder for creating a ProcessVariable entity.
func (c *ProcessVariableClient) Create() *ProcessVariableCreate {
	mutation := newProcessVariableMutation(c.config, OpCreate)
	return &ProcessVariableCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProcessVariable entities.
func (c *ProcessVariableClient) CreateBulk(builders ...*ProcessVariableCreate) *ProcessVariableCreateBulk {
	return &ProcessVariableCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProcessVariableClient) MapCreateBulk(slice any, setFunc func(*ProcessVariableCreate, int)) *ProcessVariableCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProcessVariableCreateBulk{err: fmt.Errorf("calling to ProcessVariableClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProcessVariableCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProcessVariableCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProcessVariable.
func (c *ProcessVariableClient) Update() *ProcessVariableUpdate {
	mutation := newProcessVariableMutation(c.config, OpUpdate)
	return &ProcessVariableUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProcessVariableClient) UpdateOne(pv *ProcessVariable) *ProcessVariableUpdateOne {
	mutation := newProcessVariableMutation(c.config, OpUpdateOne, withProcessVariable(pv))
	return &ProcessVariableUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProcessVariableClient) UpdateOneID(id int64) *ProcessVariableUpdateOne {
	mutation := newProcessVariableMutation(c.config, OpUpdateOne, withProcessVariableID(id))
	return &ProcessVariableUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProcessVariable.
func (c *ProcessVariableClient) Delete() *ProcessVariableDelete {
	mutation := newProcessVariableMutation(c.config, OpDelete)
	return &ProcessVariableDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProcessVariableClient) DeleteOne(pv *ProcessVariable) *ProcessVariableDeleteOne {
	return c.DeleteOneID(pv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProcessVariableClient) DeleteOneID(id int64) *ProcessVariableDeleteOne {
	builder := c.Delete().Where(processvariable.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProcessVariableDeleteOne{builder}
}

// Query returns a query builder for ProcessVariable.
func (c *ProcessVariableClient) Query() *ProcessVariableQuery {
	return &ProcessVariableQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProcessVariable},
		inters: c.Interceptors(),
	}
}

// Get returns a ProcessVariable entity by its id.
func (c *ProcessVariableClient) Get(ctx context.Context, id int64) (*ProcessVariable, error) {
	return c.Query().Where(processvariable.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProcessVariableClient) GetX(ctx context.Context, id int64) *ProcessVariable {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProcessVariableClient) Hooks() []Hook {
	return c.hooks.ProcessVariable
}

// Interceptors returns the client interceptors.
func (c *ProcessVariableClient) Interceptors() []Interceptor {
	return c.inters.ProcessVariable
}

func (c *ProcessVariableClient) mutate(ctx context.Context, m *ProcessVariableMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProcessVariableCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProcessVariableUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProcessVariableUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProcessVariableDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProcessVariable mutation op: %q", m.Op())
	}
}

// TaskInstanceClient is a client for the TaskInstance schema.
type TaskInstanceClient struct {
	config
}

// NewTaskInstanceClient returns a client for the TaskInstance from the given config.
func NewTaskInstanceClient(c config) *TaskInstanceClient {
	return &TaskInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `taskinstance.Hooks(f(g(h())))`.
func (c *TaskInstanceClient) Use(hooks ...Hook) {
	c.hooks.TaskInstance = append(c.hooks.TaskInstance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `taskinstance.Intercept(f(g(h())))`.
func (c *TaskInstanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.TaskInstance = append(c.inters.TaskInstance, interceptors...)
}

// Create returns a builder for creating a TaskInstance entity.
func (c *TaskInstanceClient) Create() *TaskInstanceCreate {
	mutation := newTaskInstanceMutation(c.config, OpCreate)
	return &TaskInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TaskInstance entities.
func (c *TaskInstanceClient) CreateBulk(builders ...*TaskInstanceCreate) *TaskInstanceCreateBulk {
	return &TaskInstanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TaskInstanceClient) MapCreateBulk(slice any, setFunc func(*TaskInstanceCreate, int)) *TaskInstanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TaskInstanceCreateBulk{err: fmt.Errorf("calling to TaskInstanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TaskInstanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TaskInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TaskInstance.
func (c *TaskInstanceClient) Update() *TaskInstanceUpdate {
	mutation := newTaskInstanceMutation(c.config, OpUpdate)
	return &TaskInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskInstanceClient) UpdateOne(ti *TaskInstance) *TaskInstanceUpdateOne {
	mutation := newTaskInstanceMutation(c.config, OpUpdateOne, withTaskInstance(ti))
	return &TaskInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskInstanceClient) UpdateOneID(id int64) *TaskInstanceUpdateOne {
	mutation := newTaskInstanceMutation(c.config, OpUpdateOne, withTaskInstanceID(id))
	return &TaskInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TaskInstance.
func (c *TaskInstanceClient) Delete() *TaskInstanceDelete {
	mutation := newTaskInstanceMutation(c.config, OpDelete)
	return &TaskInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskInstanceClient) DeleteOne(ti *TaskInstance) *TaskInstanceDeleteOne {
	return c.DeleteOneID(ti.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskInstanceClient) DeleteOneID(id int64) *TaskInstanceDeleteOne {
	builder := c.Delete().Where(taskinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskInstanceDeleteOne{builder}
}

// Query returns a query builder for TaskInstance.
func (c *TaskInstanceClient) Query() *TaskInstanceQuery {
	return &TaskInstanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTaskInstance},
		inters: c.Interceptors(),
	}
}

// Get returns a TaskInstance entity by its id.
func (c *TaskInstanceClient) Get(ctx context.Context, id int64) (*TaskInstance, error) {
	return c.Query().Where(taskinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskInstanceClient) GetX(ctx context.Context, id int64) *TaskInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskInstanceClient) Hooks() []Hook {
	return c.hooks.TaskInstance
}

// Interceptors returns the client interceptors.
func (c *TaskInstanceClient) Interceptors() []Interceptor {
	return c.inters.TaskInstance
}

func (c *TaskInstanceClient) mutate(ctx context.Context, m *TaskInstanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TaskInstance mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		HistoricProcessInstance, ProcessDefinition, ProcessEvent, ProcessInstance,
		ProcessVariable, TaskInstance []ent.Hook
	}
	inters struct {
		HistoricProcessInstance, ProcessDefinition, ProcessEvent, ProcessInstance,
		ProcessVariable, TaskInstance []ent.Interceptor
	}
)
