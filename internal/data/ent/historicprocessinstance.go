// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/historicprocessinstance"
)

// HistoricProcessInstance is the model entity for the HistoricProcessInstance schema.
type HistoricProcessInstance struct {
	config `json:"-"`
	// ID of the ent.
	// 历史流程实例ID
	ID int64 `json:"id,omitempty"`
	// 流程实例ID
	ProcessInstanceID string `json:"process_instance_id,omitempty"`
	// 业务标识
	BusinessKey string `json:"business_key,omitempty"`
	// 流程定义ID
	ProcessDefinitionID int64 `json:"process_definition_id,omitempty"`
	// 流程定义标识
	ProcessDefinitionKey string `json:"process_definition_key,omitempty"`
	// 流程定义名称
	ProcessDefinitionName string `json:"process_definition_name,omitempty"`
	// 流程定义版本
	ProcessDefinitionVersion int32 `json:"process_definition_version,omitempty"`
	// 部署ID
	DeploymentID string `json:"deployment_id,omitempty"`
	// 启动用户ID
	StartUserID string `json:"start_user_id,omitempty"`
	// 启动时间
	StartTime time.Time `json:"start_time,omitempty"`
	// 结束时间
	EndTime *time.Time `json:"end_time,omitempty"`
	// 持续时间(毫秒)
	Duration int64 `json:"duration,omitempty"`
	// 启动活动ID
	StartActivityID string `json:"start_activity_id,omitempty"`
	// 结束活动ID
	EndActivityID string `json:"end_activity_id,omitempty"`
	// 父流程实例ID
	SuperProcessInstanceID string `json:"super_process_instance_id,omitempty"`
	// 根流程实例ID
	RootProcessInstanceID string `json:"root_process_instance_id,omitempty"`
	// 父案例实例ID
	SuperCaseInstanceID string `json:"super_case_instance_id,omitempty"`
	// 案例实例ID
	CaseInstanceID string `json:"case_instance_id,omitempty"`
	// 删除原因
	DeleteReason string `json:"delete_reason,omitempty"`
	// 租户ID
	TenantID string `json:"tenant_id,omitempty"`
	// 流程状态: ACTIVE, SUSPENDED, COMPLETED, EXTERNALLY_TERMINATED, INTERNALLY_TERMINATED
	State string `json:"state,omitempty"`
	// 移除时间
	RemovalTime string `json:"removal_time,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HistoricProcessInstance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case historicprocessinstance.FieldID, historicprocessinstance.FieldProcessDefinitionID, historicprocessinstance.FieldProcessDefinitionVersion, historicprocessinstance.FieldDuration:
			values[i] = new(sql.NullInt64)
		case historicprocessinstance.FieldProcessInstanceID, historicprocessinstance.FieldBusinessKey, historicprocessinstance.FieldProcessDefinitionKey, historicprocessinstance.FieldProcessDefinitionName, historicprocessinstance.FieldDeploymentID, historicprocessinstance.FieldStartUserID, historicprocessinstance.FieldStartActivityID, historicprocessinstance.FieldEndActivityID, historicprocessinstance.FieldSuperProcessInstanceID, historicprocessinstance.FieldRootProcessInstanceID, historicprocessinstance.FieldSuperCaseInstanceID, historicprocessinstance.FieldCaseInstanceID, historicprocessinstance.FieldDeleteReason, historicprocessinstance.FieldTenantID, historicprocessinstance.FieldState, historicprocessinstance.FieldRemovalTime:
			values[i] = new(sql.NullString)
		case historicprocessinstance.FieldStartTime, historicprocessinstance.FieldEndTime, historicprocessinstance.FieldCreatedAt, historicprocessinstance.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HistoricProcessInstance fields.
func (hpi *HistoricProcessInstance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case historicprocessinstance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hpi.ID = int64(value.Int64)
		case historicprocessinstance.FieldProcessInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_instance_id", values[i])
			} else if value.Valid {
				hpi.ProcessInstanceID = value.String
			}
		case historicprocessinstance.FieldBusinessKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_key", values[i])
			} else if value.Valid {
				hpi.BusinessKey = value.String
			}
		case historicprocessinstance.FieldProcessDefinitionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field process_definition_id", values[i])
			} else if value.Valid {
				hpi.ProcessDefinitionID = value.Int64
			}
		case historicprocessinstance.FieldProcessDefinitionKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_definition_key", values[i])
			} else if value.Valid {
				hpi.ProcessDefinitionKey = value.String
			}
		case historicprocessinstance.FieldProcessDefinitionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_definition_name", values[i])
			} else if value.Valid {
				hpi.ProcessDefinitionName = value.String
			}
		case historicprocessinstance.FieldProcessDefinitionVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field process_definition_version", values[i])
			} else if value.Valid {
				hpi.ProcessDefinitionVersion = int32(value.Int64)
			}
		case historicprocessinstance.FieldDeploymentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_id", values[i])
			} else if value.Valid {
				hpi.DeploymentID = value.String
			}
		case historicprocessinstance.FieldStartUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_user_id", values[i])
			} else if value.Valid {
				hpi.StartUserID = value.String
			}
		case historicprocessinstance.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				hpi.StartTime = value.Time
			}
		case historicprocessinstance.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				hpi.EndTime = new(time.Time)
				*hpi.EndTime = value.Time
			}
		case historicprocessinstance.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				hpi.Duration = value.Int64
			}
		case historicprocessinstance.FieldStartActivityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_activity_id", values[i])
			} else if value.Valid {
				hpi.StartActivityID = value.String
			}
		case historicprocessinstance.FieldEndActivityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field end_activity_id", values[i])
			} else if value.Valid {
				hpi.EndActivityID = value.String
			}
		case historicprocessinstance.FieldSuperProcessInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field super_process_instance_id", values[i])
			} else if value.Valid {
				hpi.SuperProcessInstanceID = value.String
			}
		case historicprocessinstance.FieldRootProcessInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field root_process_instance_id", values[i])
			} else if value.Valid {
				hpi.RootProcessInstanceID = value.String
			}
		case historicprocessinstance.FieldSuperCaseInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field super_case_instance_id", values[i])
			} else if value.Valid {
				hpi.SuperCaseInstanceID = value.String
			}
		case historicprocessinstance.FieldCaseInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field case_instance_id", values[i])
			} else if value.Valid {
				hpi.CaseInstanceID = value.String
			}
		case historicprocessinstance.FieldDeleteReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field delete_reason", values[i])
			} else if value.Valid {
				hpi.DeleteReason = value.String
			}
		case historicprocessinstance.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				hpi.TenantID = value.String
			}
		case historicprocessinstance.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				hpi.State = value.String
			}
		case historicprocessinstance.FieldRemovalTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field removal_time", values[i])
			} else if value.Valid {
				hpi.RemovalTime = value.String
			}
		case historicprocessinstance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				hpi.CreatedAt = value.Time
			}
		case historicprocessinstance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				hpi.UpdatedAt = value.Time
			}
		default:
			hpi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HistoricProcessInstance.
// This includes values selected through modifiers, order, etc.
func (hpi *HistoricProcessInstance) Value(name string) (ent.Value, error) {
	return hpi.selectValues.Get(name)
}

// Update returns a builder for updating this HistoricProcessInstance.
// Note that you need to call HistoricProcessInstance.Unwrap() before calling this method if this HistoricProcessInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (hpi *HistoricProcessInstance) Update() *HistoricProcessInstanceUpdateOne {
	return NewHistoricProcessInstanceClient(hpi.config).UpdateOne(hpi)
}

// Unwrap unwraps the HistoricProcessInstance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hpi *HistoricProcessInstance) Unwrap() *HistoricProcessInstance {
	_tx, ok := hpi.config.driver.(*txDriver)
	if !ok {
		panic("ent: HistoricProcessInstance is not a transactional entity")
	}
	hpi.config.driver = _tx.drv
	return hpi
}

// String implements the fmt.Stringer.
func (hpi *HistoricProcessInstance) String() string {
	var builder strings.Builder
	builder.WriteString("HistoricProcessInstance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hpi.ID))
	builder.WriteString("process_instance_id=")
	builder.WriteString(hpi.ProcessInstanceID)
	builder.WriteString(", ")
	builder.WriteString("business_key=")
	builder.WriteString(hpi.BusinessKey)
	builder.WriteString(", ")
	builder.WriteString("process_definition_id=")
	builder.WriteString(fmt.Sprintf("%v", hpi.ProcessDefinitionID))
	builder.WriteString(", ")
	builder.WriteString("process_definition_key=")
	builder.WriteString(hpi.ProcessDefinitionKey)
	builder.WriteString(", ")
	builder.WriteString("process_definition_name=")
	builder.WriteString(hpi.ProcessDefinitionName)
	builder.WriteString(", ")
	builder.WriteString("process_definition_version=")
	builder.WriteString(fmt.Sprintf("%v", hpi.ProcessDefinitionVersion))
	builder.WriteString(", ")
	builder.WriteString("deployment_id=")
	builder.WriteString(hpi.DeploymentID)
	builder.WriteString(", ")
	builder.WriteString("start_user_id=")
	builder.WriteString(hpi.StartUserID)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(hpi.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := hpi.EndTime; v != nil {
		builder.WriteString("end_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", hpi.Duration))
	builder.WriteString(", ")
	builder.WriteString("start_activity_id=")
	builder.WriteString(hpi.StartActivityID)
	builder.WriteString(", ")
	builder.WriteString("end_activity_id=")
	builder.WriteString(hpi.EndActivityID)
	builder.WriteString(", ")
	builder.WriteString("super_process_instance_id=")
	builder.WriteString(hpi.SuperProcessInstanceID)
	builder.WriteString(", ")
	builder.WriteString("root_process_instance_id=")
	builder.WriteString(hpi.RootProcessInstanceID)
	builder.WriteString(", ")
	builder.WriteString("super_case_instance_id=")
	builder.WriteString(hpi.SuperCaseInstanceID)
	builder.WriteString(", ")
	builder.WriteString("case_instance_id=")
	builder.WriteString(hpi.CaseInstanceID)
	builder.WriteString(", ")
	builder.WriteString("delete_reason=")
	builder.WriteString(hpi.DeleteReason)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(hpi.TenantID)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(hpi.State)
	builder.WriteString(", ")
	builder.WriteString("removal_time=")
	builder.WriteString(hpi.RemovalTime)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(hpi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(hpi.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// HistoricProcessInstances is a parsable slice of HistoricProcessInstance.
type HistoricProcessInstances []*HistoricProcessInstance
