// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/historicprocessinstance"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/predicate"
)

// HistoricProcessInstanceDelete is the builder for deleting a HistoricProcessInstance entity.
type HistoricProcessInstanceDelete struct {
	config
	hooks    []Hook
	mutation *HistoricProcessInstanceMutation
}

// Where appends a list predicates to the HistoricProcessInstanceDelete builder.
func (hpid *HistoricProcessInstanceDelete) Where(ps ...predicate.HistoricProcessInstance) *HistoricProcessInstanceDelete {
	hpid.mutation.Where(ps...)
	return hpid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hpid *HistoricProcessInstanceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, hpid.sqlExec, hpid.mutation, hpid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hpid *HistoricProcessInstanceDelete) ExecX(ctx context.Context) int {
	n, err := hpid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hpid *HistoricProcessInstanceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(historicprocessinstance.Table, sqlgraph.NewFieldSpec(historicprocessinstance.FieldID, field.TypeInt64))
	if ps := hpid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hpid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hpid.mutation.done = true
	return affected, err
}

// HistoricProcessInstanceDeleteOne is the builder for deleting a single HistoricProcessInstance entity.
type HistoricProcessInstanceDeleteOne struct {
	hpid *HistoricProcessInstanceDelete
}

// Where appends a list predicates to the HistoricProcessInstanceDelete builder.
func (hpido *HistoricProcessInstanceDeleteOne) Where(ps ...predicate.HistoricProcessInstance) *HistoricProcessInstanceDeleteOne {
	hpido.hpid.mutation.Where(ps...)
	return hpido
}

// Exec executes the deletion query.
func (hpido *HistoricProcessInstanceDeleteOne) Exec(ctx context.Context) error {
	n, err := hpido.hpid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{historicprocessinstance.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hpido *HistoricProcessInstanceDeleteOne) ExecX(ctx context.Context) {
	if err := hpido.Exec(ctx); err != nil {
		panic(err)
	}
}
