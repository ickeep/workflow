// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/historicprocessinstance"
)

// HistoricProcessInstanceCreate is the builder for creating a HistoricProcessInstance entity.
type HistoricProcessInstanceCreate struct {
	config
	mutation *HistoricProcessInstanceMutation
	hooks    []Hook
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (hpic *HistoricProcessInstanceCreate) SetProcessInstanceID(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetProcessInstanceID(s)
	return hpic
}

// SetBusinessKey sets the "business_key" field.
func (hpic *HistoricProcessInstanceCreate) SetBusinessKey(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetBusinessKey(s)
	return hpic
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableBusinessKey(s *string) *HistoricProcessInstanceCreate {
	if s != nil {
		hpic.SetBusinessKey(*s)
	}
	return hpic
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (hpic *HistoricProcessInstanceCreate) SetProcessDefinitionID(i int64) *HistoricProcessInstanceCreate {
	hpic.mutation.SetProcessDefinitionID(i)
	return hpic
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (hpic *HistoricProcessInstanceCreate) SetProcessDefinitionKey(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetProcessDefinitionKey(s)
	return hpic
}

// SetProcessDefinitionName sets the "process_definition_name" field.
func (hpic *HistoricProcessInstanceCreate) SetProcessDefinitionName(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetProcessDefinitionName(s)
	return hpic
}

// SetNillableProcessDefinitionName sets the "process_definition_name" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableProcessDefinitionName(s *string) *HistoricProcessInstanceCreate {
	if s != nil {
		hpic.SetProcessDefinitionName(*s)
	}
	return hpic
}

// SetProcessDefinitionVersion sets the "process_definition_version" field.
func (hpic *HistoricProcessInstanceCreate) SetProcessDefinitionVersion(i int32) *HistoricProcessInstanceCreate {
	hpic.mutation.SetProcessDefinitionVersion(i)
	return hpic
}

// SetDeploymentID sets the "deployment_id" field.
func (hpic *HistoricProcessInstanceCreate) SetDeploymentID(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetDeploymentID(s)
	return hpic
}

// SetNillableDeploymentID sets the "deployment_id" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableDeploymentID(s *string) *HistoricProcessInstanceCreate {
	if s != nil {
		hpic.SetDeploymentID(*s)
	}
	return hpic
}

// SetStartUserID sets the "start_user_id" field.
func (hpic *HistoricProcessInstanceCreate) SetStartUserID(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetStartUserID(s)
	return hpic
}

// SetNillableStartUserID sets the "start_user_id" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableStartUserID(s *string) *HistoricProcessInstanceCreate {
	if s != nil {
		hpic.SetStartUserID(*s)
	}
	return hpic
}

// SetStartTime sets the "start_time" field.
func (hpic *HistoricProcessInstanceCreate) SetStartTime(t time.Time) *HistoricProcessInstanceCreate {
	hpic.mutation.SetStartTime(t)
	return hpic
}

// SetEndTime sets the "end_time" field.
func (hpic *HistoricProcessInstanceCreate) SetEndTime(t time.Time) *HistoricProcessInstanceCreate {
	hpic.mutation.SetEndTime(t)
	return hpic
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableEndTime(t *time.Time) *HistoricProcessInstanceCreate {
	if t != nil {
		hpic.SetEndTime(*t)
	}
	return hpic
}

// SetDuration sets the "duration" field.
func (hpic *HistoricProcessInstanceCreate) SetDuration(i int64) *HistoricProcessInstanceCreate {
	hpic.mutation.SetDuration(i)
	return hpic
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableDuration(i *int64) *HistoricProcessInstanceCreate {
	if i != nil {
		hpic.SetDuration(*i)
	}
	return hpic
}

// SetStartActivityID sets the "start_activity_id" field.
func (hpic *HistoricProcessInstanceCreate) SetStartActivityID(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetStartActivityID(s)
	return hpic
}

// SetNillableStartActivityID sets the "start_activity_id" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableStartActivityID(s *string) *HistoricProcessInstanceCreate {
	if s != nil {
		hpic.SetStartActivityID(*s)
	}
	return hpic
}

// SetEndActivityID sets the "end_activity_id" field.
func (hpic *HistoricProcessInstanceCreate) SetEndActivityID(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetEndActivityID(s)
	return hpic
}

// SetNillableEndActivityID sets the "end_activity_id" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableEndActivityID(s *string) *HistoricProcessInstanceCreate {
	if s != nil {
		hpic.SetEndActivityID(*s)
	}
	return hpic
}

// SetSuperProcessInstanceID sets the "super_process_instance_id" field.
func (hpic *HistoricProcessInstanceCreate) SetSuperProcessInstanceID(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetSuperProcessInstanceID(s)
	return hpic
}

// SetNillableSuperProcessInstanceID sets the "super_process_instance_id" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableSuperProcessInstanceID(s *string) *HistoricProcessInstanceCreate {
	if s != nil {
		hpic.SetSuperProcessInstanceID(*s)
	}
	return hpic
}

// SetRootProcessInstanceID sets the "root_process_instance_id" field.
func (hpic *HistoricProcessInstanceCreate) SetRootProcessInstanceID(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetRootProcessInstanceID(s)
	return hpic
}

// SetNillableRootProcessInstanceID sets the "root_process_instance_id" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableRootProcessInstanceID(s *string) *HistoricProcessInstanceCreate {
	if s != nil {
		hpic.SetRootProcessInstanceID(*s)
	}
	return hpic
}

// SetSuperCaseInstanceID sets the "super_case_instance_id" field.
func (hpic *HistoricProcessInstanceCreate) SetSuperCaseInstanceID(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetSuperCaseInstanceID(s)
	return hpic
}

// SetNillableSuperCaseInstanceID sets the "super_case_instance_id" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableSuperCaseInstanceID(s *string) *HistoricProcessInstanceCreate {
	if s != nil {
		hpic.SetSuperCaseInstanceID(*s)
	}
	return hpic
}

// SetCaseInstanceID sets the "case_instance_id" field.
func (hpic *HistoricProcessInstanceCreate) SetCaseInstanceID(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetCaseInstanceID(s)
	return hpic
}

// SetNillableCaseInstanceID sets the "case_instance_id" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableCaseInstanceID(s *string) *HistoricProcessInstanceCreate {
	if s != nil {
		hpic.SetCaseInstanceID(*s)
	}
	return hpic
}

// SetDeleteReason sets the "delete_reason" field.
func (hpic *HistoricProcessInstanceCreate) SetDeleteReason(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetDeleteReason(s)
	return hpic
}

// SetNillableDeleteReason sets the "delete_reason" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableDeleteReason(s *string) *HistoricProcessInstanceCreate {
	if s != nil {
		hpic.SetDeleteReason(*s)
	}
	return hpic
}

// SetTenantID sets the "tenant_id" field.
func (hpic *HistoricProcessInstanceCreate) SetTenantID(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetTenantID(s)
	return hpic
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableTenantID(s *string) *HistoricProcessInstanceCreate {
	if s != nil {
		hpic.SetTenantID(*s)
	}
	return hpic
}

// SetState sets the "state" field.
func (hpic *HistoricProcessInstanceCreate) SetState(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetState(s)
	return hpic
}

// SetNillableState sets the "state" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableState(s *string) *HistoricProcessInstanceCreate {
	if s != nil {
		hpic.SetState(*s)
	}
	return hpic
}

// SetRemovalTime sets the "removal_time" field.
func (hpic *HistoricProcessInstanceCreate) SetRemovalTime(s string) *HistoricProcessInstanceCreate {
	hpic.mutation.SetRemovalTime(s)
	return hpic
}

// SetNillableRemovalTime sets the "removal_time" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableRemovalTime(s *string) *HistoricProcessInstanceCreate {
	if s != nil {
		hpic.SetRemovalTime(*s)
	}
	return hpic
}

// SetCreatedAt sets the "created_at" field.
func (hpic *HistoricProcessInstanceCreate) SetCreatedAt(t time.Time) *HistoricProcessInstanceCreate {
	hpic.mutation.SetCreatedAt(t)
	return hpic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableCreatedAt(t *time.Time) *HistoricProcessInstanceCreate {
	if t != nil {
		hpic.SetCreatedAt(*t)
	}
	return hpic
}

// SetUpdatedAt sets the "updated_at" field.
func (hpic *HistoricProcessInstanceCreate) SetUpdatedAt(t time.Time) *HistoricProcessInstanceCreate {
	hpic.mutation.SetUpdatedAt(t)
	return hpic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hpic *HistoricProcessInstanceCreate) SetNillableUpdatedAt(t *time.Time) *HistoricProcessInstanceCreate {
	if t != nil {
		hpic.SetUpdatedAt(*t)
	}
	return hpic
}

// SetID sets the "id" field.
func (hpic *HistoricProcessInstanceCreate) SetID(i int64) *HistoricProcessInstanceCreate {
	hpic.mutation.SetID(i)
	return hpic
}

// Mutation returns the HistoricProcessInstanceMutation object of the builder.
func (hpic *HistoricProcessInstanceCreate) Mutation() *HistoricProcessInstanceMutation {
	return hpic.mutation
}

// Save creates the HistoricProcessInstance in the database.
func (hpic *HistoricProcessInstanceCreate) Save(ctx context.Context) (*HistoricProcessInstance, error) {
	hpic.defaults()
	return withHooks(ctx, hpic.sqlSave, hpic.mutation, hpic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hpic *HistoricProcessInstanceCreate) SaveX(ctx context.Context) *HistoricProcessInstance {
	v, err := hpic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hpic *HistoricProcessInstanceCreate) Exec(ctx context.Context) error {
	_, err := hpic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hpic *HistoricProcessInstanceCreate) ExecX(ctx context.Context) {
	if err := hpic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hpic *HistoricProcessInstanceCreate) defaults() {
	if _, ok := hpic.mutation.TenantID(); !ok {
		v := historicprocessinstance.DefaultTenantID
		hpic.mutation.SetTenantID(v)
	}
	if _, ok := hpic.mutation.CreatedAt(); !ok {
		v := historicprocessinstance.DefaultCreatedAt()
		hpic.mutation.SetCreatedAt(v)
	}
	if _, ok := hpic.mutation.UpdatedAt(); !ok {
		v := historicprocessinstance.DefaultUpdatedAt()
		hpic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hpic *HistoricProcessInstanceCreate) check() error {
	if _, ok := hpic.mutation.ProcessInstanceID(); !ok {
		return &ValidationError{Name: "process_instance_id", err: errors.New(`ent: missing required field "HistoricProcessInstance.process_instance_id"`)}
	}
	if v, ok := hpic.mutation.ProcessInstanceID(); ok {
		if err := historicprocessinstance.ProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "process_instance_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.process_instance_id": %w`, err)}
		}
	}
	if v, ok := hpic.mutation.BusinessKey(); ok {
		if err := historicprocessinstance.BusinessKeyValidator(v); err != nil {
			return &ValidationError{Name: "business_key", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.business_key": %w`, err)}
		}
	}
	if _, ok := hpic.mutation.ProcessDefinitionID(); !ok {
		return &ValidationError{Name: "process_definition_id", err: errors.New(`ent: missing required field "HistoricProcessInstance.process_definition_id"`)}
	}
	if _, ok := hpic.mutation.ProcessDefinitionKey(); !ok {
		return &ValidationError{Name: "process_definition_key", err: errors.New(`ent: missing required field "HistoricProcessInstance.process_definition_key"`)}
	}
	if v, ok := hpic.mutation.ProcessDefinitionKey(); ok {
		if err := historicprocessinstance.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.process_definition_key": %w`, err)}
		}
	}
	if v, ok := hpic.mutation.ProcessDefinitionName(); ok {
		if err := historicprocessinstance.ProcessDefinitionNameValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_name", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.process_definition_name": %w`, err)}
		}
	}
	if _, ok := hpic.mutation.ProcessDefinitionVersion(); !ok {
		return &ValidationError{Name: "process_definition_version", err: errors.New(`ent: missing required field "HistoricProcessInstance.process_definition_version"`)}
	}
	if v, ok := hpic.mutation.DeploymentID(); ok {
		if err := historicprocessinstance.DeploymentIDValidator(v); err != nil {
			return &ValidationError{Name: "deployment_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.deployment_id": %w`, err)}
		}
	}
	if v, ok := hpic.mutation.StartUserID(); ok {
		if err := historicprocessinstance.StartUserIDValidator(v); err != nil {
			return &ValidationError{Name: "start_user_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.start_user_id": %w`, err)}
		}
	}
	if _, ok := hpic.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "HistoricProcessInstance.start_time"`)}
	}
	if v, ok := hpic.mutation.StartActivityID(); ok {
		if err := historicprocessinstance.StartActivityIDValidator(v); err != nil {
			return &ValidationError{Name: "start_activity_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.start_activity_id": %w`, err)}
		}
	}
	if v, ok := hpic.mutation.EndActivityID(); ok {
		if err := historicprocessinstance.EndActivityIDValidator(v); err != nil {
			return &ValidationError{Name: "end_activity_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.end_activity_id": %w`, err)}
		}
	}
	if v, ok := hpic.mutation.SuperProcessInstanceID(); ok {
		if err := historicprocessinstance.SuperProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "super_process_instance_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.super_process_instance_id": %w`, err)}
		}
	}
	if v, ok := hpic.mutation.RootProcessInstanceID(); ok {
		if err := historicprocessinstance.RootProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "root_process_instance_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.root_process_instance_id": %w`, err)}
		}
	}
	if v, ok := hpic.mutation.SuperCaseInstanceID(); ok {
		if err := historicprocessinstance.SuperCaseInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "super_case_instance_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.super_case_instance_id": %w`, err)}
		}
	}
	if v, ok := hpic.mutation.CaseInstanceID(); ok {
		if err := historicprocessinstance.CaseInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "case_instance_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.case_instance_id": %w`, err)}
		}
	}
	if v, ok := hpic.mutation.DeleteReason(); ok {
		if err := historicprocessinstance.DeleteReasonValidator(v); err != nil {
			return &ValidationError{Name: "delete_reason", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.delete_reason": %w`, err)}
		}
	}
	if _, ok := hpic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "HistoricProcessInstance.tenant_id"`)}
	}
	if v, ok := hpic.mutation.TenantID(); ok {
		if err := historicprocessinstance.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.tenant_id": %w`, err)}
		}
	}
	if v, ok := hpic.mutation.State(); ok {
		if err := historicprocessinstance.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.state": %w`, err)}
		}
	}
	if v, ok := hpic.mutation.RemovalTime(); ok {
		if err := historicprocessinstance.RemovalTimeValidator(v); err != nil {
			return &ValidationError{Name: "removal_time", err: fmt.Errorf(`ent: validator failed for field "HistoricProcessInstance.removal_time": %w`, err)}
		}
	}
	if _, ok := hpic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "HistoricProcessInstance.created_at"`)}
	}
	if _, ok := hpic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "HistoricProcessInstance.updated_at"`)}
	}
	return nil
}

func (hpic *HistoricProcessInstanceCreate) sqlSave(ctx context.Context) (*HistoricProcessInstance, error) {
	if err := hpic.check(); err != nil {
		return nil, err
	}
	_node, _spec := hpic.createSpec()
	if err := sqlgraph.CreateNode(ctx, hpic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	hpic.mutation.id = &_node.ID
	hpic.mutation.done = true
	return _node, nil
}

func (hpic *HistoricProcessInstanceCreate) createSpec() (*HistoricProcessInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &HistoricProcessInstance{config: hpic.config}
		_spec = sqlgraph.NewCreateSpec(historicprocessinstance.Table, sqlgraph.NewFieldSpec(historicprocessinstance.FieldID, field.TypeInt64))
	)
	if id, ok := hpic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hpic.mutation.ProcessInstanceID(); ok {
		_spec.SetField(historicprocessinstance.FieldProcessInstanceID, field.TypeString, value)
		_node.ProcessInstanceID = value
	}
	if value, ok := hpic.mutation.BusinessKey(); ok {
		_spec.SetField(historicprocessinstance.FieldBusinessKey, field.TypeString, value)
		_node.BusinessKey = value
	}
	if value, ok := hpic.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(historicprocessinstance.FieldProcessDefinitionID, field.TypeInt64, value)
		_node.ProcessDefinitionID = value
	}
	if value, ok := hpic.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(historicprocessinstance.FieldProcessDefinitionKey, field.TypeString, value)
		_node.ProcessDefinitionKey = value
	}
	if value, ok := hpic.mutation.ProcessDefinitionName(); ok {
		_spec.SetField(historicprocessinstance.FieldProcessDefinitionName, field.TypeString, value)
		_node.ProcessDefinitionName = value
	}
	if value, ok := hpic.mutation.ProcessDefinitionVersion(); ok {
		_spec.SetField(historicprocessinstance.FieldProcessDefinitionVersion, field.TypeInt32, value)
		_node.ProcessDefinitionVersion = value
	}
	if value, ok := hpic.mutation.DeploymentID(); ok {
		_spec.SetField(historicprocessinstance.FieldDeploymentID, field.TypeString, value)
		_node.DeploymentID = value
	}
	if value, ok := hpic.mutation.StartUserID(); ok {
		_spec.SetField(historicprocessinstance.FieldStartUserID, field.TypeString, value)
		_node.StartUserID = value
	}
	if value, ok := hpic.mutation.StartTime(); ok {
		_spec.SetField(historicprocessinstance.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := hpic.mutation.EndTime(); ok {
		_spec.SetField(historicprocessinstance.FieldEndTime, field.TypeTime, value)
		_node.EndTime = &value
	}
	if value, ok := hpic.mutation.Duration(); ok {
		_spec.SetField(historicprocessinstance.FieldDuration, field.TypeInt64, value)
		_node.Duration = value
	}
	if value, ok := hpic.mutation.StartActivityID(); ok {
		_spec.SetField(historicprocessinstance.FieldStartActivityID, field.TypeString, value)
		_node.StartActivityID = value
	}
	if value, ok := hpic.mutation.EndActivityID(); ok {
		_spec.SetField(historicprocessinstance.FieldEndActivityID, field.TypeString, value)
		_node.EndActivityID = value
	}
	if value, ok := hpic.mutation.SuperProcessInstanceID(); ok {
		_spec.SetField(historicprocessinstance.FieldSuperProcessInstanceID, field.TypeString, value)
		_node.SuperProcessInstanceID = value
	}
	if value, ok := hpic.mutation.RootProcessInstanceID(); ok {
		_spec.SetField(historicprocessinstance.FieldRootProcessInstanceID, field.TypeString, value)
		_node.RootProcessInstanceID = value
	}
	if value, ok := hpic.mutation.SuperCaseInstanceID(); ok {
		_spec.SetField(historicprocessinstance.FieldSuperCaseInstanceID, field.TypeString, value)
		_node.SuperCaseInstanceID = value
	}
	if value, ok := hpic.mutation.CaseInstanceID(); ok {
		_spec.SetField(historicprocessinstance.FieldCaseInstanceID, field.TypeString, value)
		_node.CaseInstanceID = value
	}
	if value, ok := hpic.mutation.DeleteReason(); ok {
		_spec.SetField(historicprocessinstance.FieldDeleteReason, field.TypeString, value)
		_node.DeleteReason = value
	}
	if value, ok := hpic.mutation.TenantID(); ok {
		_spec.SetField(historicprocessinstance.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := hpic.mutation.State(); ok {
		_spec.SetField(historicprocessinstance.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := hpic.mutation.RemovalTime(); ok {
		_spec.SetField(historicprocessinstance.FieldRemovalTime, field.TypeString, value)
		_node.RemovalTime = value
	}
	if value, ok := hpic.mutation.CreatedAt(); ok {
		_spec.SetField(historicprocessinstance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hpic.mutation.UpdatedAt(); ok {
		_spec.SetField(historicprocessinstance.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// HistoricProcessInstanceCreateBulk is the builder for creating many HistoricProcessInstance entities in bulk.
type HistoricProcessInstanceCreateBulk struct {
	config
	err      error
	builders []*HistoricProcessInstanceCreate
}

// Save creates the HistoricProcessInstance entities in the database.
func (hpicb *HistoricProcessInstanceCreateBulk) Save(ctx context.Context) ([]*HistoricProcessInstance, error) {
	if hpicb.err != nil {
		return nil, hpicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hpicb.builders))
	nodes := make([]*HistoricProcessInstance, len(hpicb.builders))
	mutators := make([]Mutator, len(hpicb.builders))
	for i := range hpicb.builders {
		func(i int, root context.Context) {
			builder := hpicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HistoricProcessInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hpicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hpicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hpicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hpicb *HistoricProcessInstanceCreateBulk) SaveX(ctx context.Context) []*HistoricProcessInstance {
	v, err := hpicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hpicb *HistoricProcessInstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := hpicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hpicb *HistoricProcessInstanceCreateBulk) ExecX(ctx context.Context) {
	if err := hpicb.Exec(ctx); err != nil {
		panic(err)
	}
}
