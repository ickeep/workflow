// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/taskinstance"
)

// TaskInstanceCreate is the builder for creating a TaskInstance entity.
type TaskInstanceCreate struct {
	config
	mutation *TaskInstanceMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tic *TaskInstanceCreate) SetName(s string) *TaskInstanceCreate {
	tic.mutation.SetName(s)
	return tic
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableName(s *string) *TaskInstanceCreate {
	if s != nil {
		tic.SetName(*s)
	}
	return tic
}

// SetDescription sets the "description" field.
func (tic *TaskInstanceCreate) SetDescription(s string) *TaskInstanceCreate {
	tic.mutation.SetDescription(s)
	return tic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableDescription(s *string) *TaskInstanceCreate {
	if s != nil {
		tic.SetDescription(*s)
	}
	return tic
}

// SetTaskDefinitionKey sets the "task_definition_key" field.
func (tic *TaskInstanceCreate) SetTaskDefinitionKey(s string) *TaskInstanceCreate {
	tic.mutation.SetTaskDefinitionKey(s)
	return tic
}

// SetAssignee sets the "assignee" field.
func (tic *TaskInstanceCreate) SetAssignee(s string) *TaskInstanceCreate {
	tic.mutation.SetAssignee(s)
	return tic
}

// SetNillableAssignee sets the "assignee" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableAssignee(s *string) *TaskInstanceCreate {
	if s != nil {
		tic.SetAssignee(*s)
	}
	return tic
}

// SetOwner sets the "owner" field.
func (tic *TaskInstanceCreate) SetOwner(s string) *TaskInstanceCreate {
	tic.mutation.SetOwner(s)
	return tic
}

// SetNillableOwner sets the "owner" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableOwner(s *string) *TaskInstanceCreate {
	if s != nil {
		tic.SetOwner(*s)
	}
	return tic
}

// SetDelegation sets the "delegation" field.
func (tic *TaskInstanceCreate) SetDelegation(s string) *TaskInstanceCreate {
	tic.mutation.SetDelegation(s)
	return tic
}

// SetNillableDelegation sets the "delegation" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableDelegation(s *string) *TaskInstanceCreate {
	if s != nil {
		tic.SetDelegation(*s)
	}
	return tic
}

// SetPriority sets the "priority" field.
func (tic *TaskInstanceCreate) SetPriority(i int32) *TaskInstanceCreate {
	tic.mutation.SetPriority(i)
	return tic
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillablePriority(i *int32) *TaskInstanceCreate {
	if i != nil {
		tic.SetPriority(*i)
	}
	return tic
}

// SetCreateTime sets the "create_time" field.
func (tic *TaskInstanceCreate) SetCreateTime(t time.Time) *TaskInstanceCreate {
	tic.mutation.SetCreateTime(t)
	return tic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableCreateTime(t *time.Time) *TaskInstanceCreate {
	if t != nil {
		tic.SetCreateTime(*t)
	}
	return tic
}

// SetDueDate sets the "due_date" field.
func (tic *TaskInstanceCreate) SetDueDate(t time.Time) *TaskInstanceCreate {
	tic.mutation.SetDueDate(t)
	return tic
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableDueDate(t *time.Time) *TaskInstanceCreate {
	if t != nil {
		tic.SetDueDate(*t)
	}
	return tic
}

// SetFollowUpDate sets the "follow_up_date" field.
func (tic *TaskInstanceCreate) SetFollowUpDate(t time.Time) *TaskInstanceCreate {
	tic.mutation.SetFollowUpDate(t)
	return tic
}

// SetNillableFollowUpDate sets the "follow_up_date" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableFollowUpDate(t *time.Time) *TaskInstanceCreate {
	if t != nil {
		tic.SetFollowUpDate(*t)
	}
	return tic
}

// SetFormKey sets the "form_key" field.
func (tic *TaskInstanceCreate) SetFormKey(s string) *TaskInstanceCreate {
	tic.mutation.SetFormKey(s)
	return tic
}

// SetNillableFormKey sets the "form_key" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableFormKey(s *string) *TaskInstanceCreate {
	if s != nil {
		tic.SetFormKey(*s)
	}
	return tic
}

// SetCategory sets the "category" field.
func (tic *TaskInstanceCreate) SetCategory(s string) *TaskInstanceCreate {
	tic.mutation.SetCategory(s)
	return tic
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableCategory(s *string) *TaskInstanceCreate {
	if s != nil {
		tic.SetCategory(*s)
	}
	return tic
}

// SetParentTaskID sets the "parent_task_id" field.
func (tic *TaskInstanceCreate) SetParentTaskID(s string) *TaskInstanceCreate {
	tic.mutation.SetParentTaskID(s)
	return tic
}

// SetNillableParentTaskID sets the "parent_task_id" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableParentTaskID(s *string) *TaskInstanceCreate {
	if s != nil {
		tic.SetParentTaskID(*s)
	}
	return tic
}

// SetExecutionID sets the "execution_id" field.
func (tic *TaskInstanceCreate) SetExecutionID(s string) *TaskInstanceCreate {
	tic.mutation.SetExecutionID(s)
	return tic
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableExecutionID(s *string) *TaskInstanceCreate {
	if s != nil {
		tic.SetExecutionID(*s)
	}
	return tic
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (tic *TaskInstanceCreate) SetProcessInstanceID(i int64) *TaskInstanceCreate {
	tic.mutation.SetProcessInstanceID(i)
	return tic
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (tic *TaskInstanceCreate) SetProcessDefinitionID(i int64) *TaskInstanceCreate {
	tic.mutation.SetProcessDefinitionID(i)
	return tic
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (tic *TaskInstanceCreate) SetProcessDefinitionKey(s string) *TaskInstanceCreate {
	tic.mutation.SetProcessDefinitionKey(s)
	return tic
}

// SetCaseExecutionID sets the "case_execution_id" field.
func (tic *TaskInstanceCreate) SetCaseExecutionID(s string) *TaskInstanceCreate {
	tic.mutation.SetCaseExecutionID(s)
	return tic
}

// SetNillableCaseExecutionID sets the "case_execution_id" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableCaseExecutionID(s *string) *TaskInstanceCreate {
	if s != nil {
		tic.SetCaseExecutionID(*s)
	}
	return tic
}

// SetCaseInstanceID sets the "case_instance_id" field.
func (tic *TaskInstanceCreate) SetCaseInstanceID(s string) *TaskInstanceCreate {
	tic.mutation.SetCaseInstanceID(s)
	return tic
}

// SetNillableCaseInstanceID sets the "case_instance_id" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableCaseInstanceID(s *string) *TaskInstanceCreate {
	if s != nil {
		tic.SetCaseInstanceID(*s)
	}
	return tic
}

// SetCaseDefinitionID sets the "case_definition_id" field.
func (tic *TaskInstanceCreate) SetCaseDefinitionID(s string) *TaskInstanceCreate {
	tic.mutation.SetCaseDefinitionID(s)
	return tic
}

// SetNillableCaseDefinitionID sets the "case_definition_id" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableCaseDefinitionID(s *string) *TaskInstanceCreate {
	if s != nil {
		tic.SetCaseDefinitionID(*s)
	}
	return tic
}

// SetSuspended sets the "suspended" field.
func (tic *TaskInstanceCreate) SetSuspended(b bool) *TaskInstanceCreate {
	tic.mutation.SetSuspended(b)
	return tic
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableSuspended(b *bool) *TaskInstanceCreate {
	if b != nil {
		tic.SetSuspended(*b)
	}
	return tic
}

// SetTenantID sets the "tenant_id" field.
func (tic *TaskInstanceCreate) SetTenantID(s string) *TaskInstanceCreate {
	tic.mutation.SetTenantID(s)
	return tic
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableTenantID(s *string) *TaskInstanceCreate {
	if s != nil {
		tic.SetTenantID(*s)
	}
	return tic
}

// SetCreatedAt sets the "created_at" field.
func (tic *TaskInstanceCreate) SetCreatedAt(t time.Time) *TaskInstanceCreate {
	tic.mutation.SetCreatedAt(t)
	return tic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableCreatedAt(t *time.Time) *TaskInstanceCreate {
	if t != nil {
		tic.SetCreatedAt(*t)
	}
	return tic
}

// SetUpdatedAt sets the "updated_at" field.
func (tic *TaskInstanceCreate) SetUpdatedAt(t time.Time) *TaskInstanceCreate {
	tic.mutation.SetUpdatedAt(t)
	return tic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tic *TaskInstanceCreate) SetNillableUpdatedAt(t *time.Time) *TaskInstanceCreate {
	if t != nil {
		tic.SetUpdatedAt(*t)
	}
	return tic
}

// SetID sets the "id" field.
func (tic *TaskInstanceCreate) SetID(i int64) *TaskInstanceCreate {
	tic.mutation.SetID(i)
	return tic
}

// Mutation returns the TaskInstanceMutation object of the builder.
func (tic *TaskInstanceCreate) Mutation() *TaskInstanceMutation {
	return tic.mutation
}

// Save creates the TaskInstance in the database.
func (tic *TaskInstanceCreate) Save(ctx context.Context) (*TaskInstance, error) {
	tic.defaults()
	return withHooks(ctx, tic.sqlSave, tic.mutation, tic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tic *TaskInstanceCreate) SaveX(ctx context.Context) *TaskInstance {
	v, err := tic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tic *TaskInstanceCreate) Exec(ctx context.Context) error {
	_, err := tic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tic *TaskInstanceCreate) ExecX(ctx context.Context) {
	if err := tic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tic *TaskInstanceCreate) defaults() {
	if _, ok := tic.mutation.Priority(); !ok {
		v := taskinstance.DefaultPriority
		tic.mutation.SetPriority(v)
	}
	if _, ok := tic.mutation.CreateTime(); !ok {
		v := taskinstance.DefaultCreateTime()
		tic.mutation.SetCreateTime(v)
	}
	if _, ok := tic.mutation.Suspended(); !ok {
		v := taskinstance.DefaultSuspended
		tic.mutation.SetSuspended(v)
	}
	if _, ok := tic.mutation.TenantID(); !ok {
		v := taskinstance.DefaultTenantID
		tic.mutation.SetTenantID(v)
	}
	if _, ok := tic.mutation.CreatedAt(); !ok {
		v := taskinstance.DefaultCreatedAt()
		tic.mutation.SetCreatedAt(v)
	}
	if _, ok := tic.mutation.UpdatedAt(); !ok {
		v := taskinstance.DefaultUpdatedAt()
		tic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tic *TaskInstanceCreate) check() error {
	if v, ok := tic.mutation.Name(); ok {
		if err := taskinstance.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.name": %w`, err)}
		}
	}
	if _, ok := tic.mutation.TaskDefinitionKey(); !ok {
		return &ValidationError{Name: "task_definition_key", err: errors.New(`ent: missing required field "TaskInstance.task_definition_key"`)}
	}
	if v, ok := tic.mutation.TaskDefinitionKey(); ok {
		if err := taskinstance.TaskDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "task_definition_key", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.task_definition_key": %w`, err)}
		}
	}
	if v, ok := tic.mutation.Assignee(); ok {
		if err := taskinstance.AssigneeValidator(v); err != nil {
			return &ValidationError{Name: "assignee", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.assignee": %w`, err)}
		}
	}
	if v, ok := tic.mutation.Owner(); ok {
		if err := taskinstance.OwnerValidator(v); err != nil {
			return &ValidationError{Name: "owner", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.owner": %w`, err)}
		}
	}
	if v, ok := tic.mutation.Delegation(); ok {
		if err := taskinstance.DelegationValidator(v); err != nil {
			return &ValidationError{Name: "delegation", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.delegation": %w`, err)}
		}
	}
	if _, ok := tic.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "TaskInstance.priority"`)}
	}
	if _, ok := tic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TaskInstance.create_time"`)}
	}
	if v, ok := tic.mutation.FormKey(); ok {
		if err := taskinstance.FormKeyValidator(v); err != nil {
			return &ValidationError{Name: "form_key", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.form_key": %w`, err)}
		}
	}
	if v, ok := tic.mutation.Category(); ok {
		if err := taskinstance.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.category": %w`, err)}
		}
	}
	if v, ok := tic.mutation.ParentTaskID(); ok {
		if err := taskinstance.ParentTaskIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_task_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.parent_task_id": %w`, err)}
		}
	}
	if v, ok := tic.mutation.ExecutionID(); ok {
		if err := taskinstance.ExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "execution_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.execution_id": %w`, err)}
		}
	}
	if _, ok := tic.mutation.ProcessInstanceID(); !ok {
		return &ValidationError{Name: "process_instance_id", err: errors.New(`ent: missing required field "TaskInstance.process_instance_id"`)}
	}
	if _, ok := tic.mutation.ProcessDefinitionID(); !ok {
		return &ValidationError{Name: "process_definition_id", err: errors.New(`ent: missing required field "TaskInstance.process_definition_id"`)}
	}
	if _, ok := tic.mutation.ProcessDefinitionKey(); !ok {
		return &ValidationError{Name: "process_definition_key", err: errors.New(`ent: missing required field "TaskInstance.process_definition_key"`)}
	}
	if v, ok := tic.mutation.ProcessDefinitionKey(); ok {
		if err := taskinstance.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.process_definition_key": %w`, err)}
		}
	}
	if v, ok := tic.mutation.CaseExecutionID(); ok {
		if err := taskinstance.CaseExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "case_execution_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.case_execution_id": %w`, err)}
		}
	}
	if v, ok := tic.mutation.CaseInstanceID(); ok {
		if err := taskinstance.CaseInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "case_instance_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.case_instance_id": %w`, err)}
		}
	}
	if v, ok := tic.mutation.CaseDefinitionID(); ok {
		if err := taskinstance.CaseDefinitionIDValidator(v); err != nil {
			return &ValidationError{Name: "case_definition_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.case_definition_id": %w`, err)}
		}
	}
	if _, ok := tic.mutation.Suspended(); !ok {
		return &ValidationError{Name: "suspended", err: errors.New(`ent: missing required field "TaskInstance.suspended"`)}
	}
	if _, ok := tic.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "TaskInstance.tenant_id"`)}
	}
	if v, ok := tic.mutation.TenantID(); ok {
		if err := taskinstance.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "TaskInstance.tenant_id": %w`, err)}
		}
	}
	if _, ok := tic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TaskInstance.created_at"`)}
	}
	if _, ok := tic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TaskInstance.updated_at"`)}
	}
	return nil
}

func (tic *TaskInstanceCreate) sqlSave(ctx context.Context) (*TaskInstance, error) {
	if err := tic.check(); err != nil {
		return nil, err
	}
	_node, _spec := tic.createSpec()
	if err := sqlgraph.CreateNode(ctx, tic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	tic.mutation.id = &_node.ID
	tic.mutation.done = true
	return _node, nil
}

func (tic *TaskInstanceCreate) createSpec() (*TaskInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskInstance{config: tic.config}
		_spec = sqlgraph.NewCreateSpec(taskinstance.Table, sqlgraph.NewFieldSpec(taskinstance.FieldID, field.TypeInt64))
	)
	if id, ok := tic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tic.mutation.Name(); ok {
		_spec.SetField(taskinstance.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tic.mutation.Description(); ok {
		_spec.SetField(taskinstance.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tic.mutation.TaskDefinitionKey(); ok {
		_spec.SetField(taskinstance.FieldTaskDefinitionKey, field.TypeString, value)
		_node.TaskDefinitionKey = value
	}
	if value, ok := tic.mutation.Assignee(); ok {
		_spec.SetField(taskinstance.FieldAssignee, field.TypeString, value)
		_node.Assignee = value
	}
	if value, ok := tic.mutation.Owner(); ok {
		_spec.SetField(taskinstance.FieldOwner, field.TypeString, value)
		_node.Owner = value
	}
	if value, ok := tic.mutation.Delegation(); ok {
		_spec.SetField(taskinstance.FieldDelegation, field.TypeString, value)
		_node.Delegation = value
	}
	if value, ok := tic.mutation.Priority(); ok {
		_spec.SetField(taskinstance.FieldPriority, field.TypeInt32, value)
		_node.Priority = value
	}
	if value, ok := tic.mutation.CreateTime(); ok {
		_spec.SetField(taskinstance.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tic.mutation.DueDate(); ok {
		_spec.SetField(taskinstance.FieldDueDate, field.TypeTime, value)
		_node.DueDate = &value
	}
	if value, ok := tic.mutation.FollowUpDate(); ok {
		_spec.SetField(taskinstance.FieldFollowUpDate, field.TypeTime, value)
		_node.FollowUpDate = &value
	}
	if value, ok := tic.mutation.FormKey(); ok {
		_spec.SetField(taskinstance.FieldFormKey, field.TypeString, value)
		_node.FormKey = value
	}
	if value, ok := tic.mutation.Category(); ok {
		_spec.SetField(taskinstance.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := tic.mutation.ParentTaskID(); ok {
		_spec.SetField(taskinstance.FieldParentTaskID, field.TypeString, value)
		_node.ParentTaskID = value
	}
	if value, ok := tic.mutation.ExecutionID(); ok {
		_spec.SetField(taskinstance.FieldExecutionID, field.TypeString, value)
		_node.ExecutionID = value
	}
	if value, ok := tic.mutation.ProcessInstanceID(); ok {
		_spec.SetField(taskinstance.FieldProcessInstanceID, field.TypeInt64, value)
		_node.ProcessInstanceID = value
	}
	if value, ok := tic.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(taskinstance.FieldProcessDefinitionID, field.TypeInt64, value)
		_node.ProcessDefinitionID = value
	}
	if value, ok := tic.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(taskinstance.FieldProcessDefinitionKey, field.TypeString, value)
		_node.ProcessDefinitionKey = value
	}
	if value, ok := tic.mutation.CaseExecutionID(); ok {
		_spec.SetField(taskinstance.FieldCaseExecutionID, field.TypeString, value)
		_node.CaseExecutionID = value
	}
	if value, ok := tic.mutation.CaseInstanceID(); ok {
		_spec.SetField(taskinstance.FieldCaseInstanceID, field.TypeString, value)
		_node.CaseInstanceID = value
	}
	if value, ok := tic.mutation.CaseDefinitionID(); ok {
		_spec.SetField(taskinstance.FieldCaseDefinitionID, field.TypeString, value)
		_node.CaseDefinitionID = value
	}
	if value, ok := tic.mutation.Suspended(); ok {
		_spec.SetField(taskinstance.FieldSuspended, field.TypeBool, value)
		_node.Suspended = value
	}
	if value, ok := tic.mutation.TenantID(); ok {
		_spec.SetField(taskinstance.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := tic.mutation.CreatedAt(); ok {
		_spec.SetField(taskinstance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tic.mutation.UpdatedAt(); ok {
		_spec.SetField(taskinstance.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// TaskInstanceCreateBulk is the builder for creating many TaskInstance entities in bulk.
type TaskInstanceCreateBulk struct {
	config
	err      error
	builders []*TaskInstanceCreate
}

// Save creates the TaskInstance entities in the database.
func (ticb *TaskInstanceCreateBulk) Save(ctx context.Context) ([]*TaskInstance, error) {
	if ticb.err != nil {
		return nil, ticb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ticb.builders))
	nodes := make([]*TaskInstance, len(ticb.builders))
	mutators := make([]Mutator, len(ticb.builders))
	for i := range ticb.builders {
		func(i int, root context.Context) {
			builder := ticb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ticb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ticb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ticb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ticb *TaskInstanceCreateBulk) SaveX(ctx context.Context) []*TaskInstance {
	v, err := ticb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ticb *TaskInstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := ticb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ticb *TaskInstanceCreateBulk) ExecX(ctx context.Context) {
	if err := ticb.Exec(ctx); err != nil {
		panic(err)
	}
}
