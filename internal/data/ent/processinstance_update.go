// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/predicate"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processinstance"
)

// ProcessInstanceUpdate is the builder for updating ProcessInstance entities.
type ProcessInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessInstanceMutation
}

// Where appends a list predicates to the ProcessInstanceUpdate builder.
func (piu *ProcessInstanceUpdate) Where(ps ...predicate.ProcessInstance) *ProcessInstanceUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetBusinessKey sets the "business_key" field.
func (piu *ProcessInstanceUpdate) SetBusinessKey(s string) *ProcessInstanceUpdate {
	piu.mutation.SetBusinessKey(s)
	return piu
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableBusinessKey(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetBusinessKey(*s)
	}
	return piu
}

// ClearBusinessKey clears the value of the "business_key" field.
func (piu *ProcessInstanceUpdate) ClearBusinessKey() *ProcessInstanceUpdate {
	piu.mutation.ClearBusinessKey()
	return piu
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (piu *ProcessInstanceUpdate) SetProcessDefinitionID(i int64) *ProcessInstanceUpdate {
	piu.mutation.ResetProcessDefinitionID()
	piu.mutation.SetProcessDefinitionID(i)
	return piu
}

// SetNillableProcessDefinitionID sets the "process_definition_id" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableProcessDefinitionID(i *int64) *ProcessInstanceUpdate {
	if i != nil {
		piu.SetProcessDefinitionID(*i)
	}
	return piu
}

// AddProcessDefinitionID adds i to the "process_definition_id" field.
func (piu *ProcessInstanceUpdate) AddProcessDefinitionID(i int64) *ProcessInstanceUpdate {
	piu.mutation.AddProcessDefinitionID(i)
	return piu
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (piu *ProcessInstanceUpdate) SetProcessDefinitionKey(s string) *ProcessInstanceUpdate {
	piu.mutation.SetProcessDefinitionKey(s)
	return piu
}

// SetNillableProcessDefinitionKey sets the "process_definition_key" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableProcessDefinitionKey(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetProcessDefinitionKey(*s)
	}
	return piu
}

// SetProcessDefinitionName sets the "process_definition_name" field.
func (piu *ProcessInstanceUpdate) SetProcessDefinitionName(s string) *ProcessInstanceUpdate {
	piu.mutation.SetProcessDefinitionName(s)
	return piu
}

// SetNillableProcessDefinitionName sets the "process_definition_name" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableProcessDefinitionName(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetProcessDefinitionName(*s)
	}
	return piu
}

// ClearProcessDefinitionName clears the value of the "process_definition_name" field.
func (piu *ProcessInstanceUpdate) ClearProcessDefinitionName() *ProcessInstanceUpdate {
	piu.mutation.ClearProcessDefinitionName()
	return piu
}

// SetProcessDefinitionVersion sets the "process_definition_version" field.
func (piu *ProcessInstanceUpdate) SetProcessDefinitionVersion(i int32) *ProcessInstanceUpdate {
	piu.mutation.ResetProcessDefinitionVersion()
	piu.mutation.SetProcessDefinitionVersion(i)
	return piu
}

// SetNillableProcessDefinitionVersion sets the "process_definition_version" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableProcessDefinitionVersion(i *int32) *ProcessInstanceUpdate {
	if i != nil {
		piu.SetProcessDefinitionVersion(*i)
	}
	return piu
}

// AddProcessDefinitionVersion adds i to the "process_definition_version" field.
func (piu *ProcessInstanceUpdate) AddProcessDefinitionVersion(i int32) *ProcessInstanceUpdate {
	piu.mutation.AddProcessDefinitionVersion(i)
	return piu
}

// SetDeploymentID sets the "deployment_id" field.
func (piu *ProcessInstanceUpdate) SetDeploymentID(s string) *ProcessInstanceUpdate {
	piu.mutation.SetDeploymentID(s)
	return piu
}

// SetNillableDeploymentID sets the "deployment_id" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableDeploymentID(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetDeploymentID(*s)
	}
	return piu
}

// ClearDeploymentID clears the value of the "deployment_id" field.
func (piu *ProcessInstanceUpdate) ClearDeploymentID() *ProcessInstanceUpdate {
	piu.mutation.ClearDeploymentID()
	return piu
}

// SetStartUserID sets the "start_user_id" field.
func (piu *ProcessInstanceUpdate) SetStartUserID(s string) *ProcessInstanceUpdate {
	piu.mutation.SetStartUserID(s)
	return piu
}

// SetNillableStartUserID sets the "start_user_id" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableStartUserID(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetStartUserID(*s)
	}
	return piu
}

// ClearStartUserID clears the value of the "start_user_id" field.
func (piu *ProcessInstanceUpdate) ClearStartUserID() *ProcessInstanceUpdate {
	piu.mutation.ClearStartUserID()
	return piu
}

// SetStartTime sets the "start_time" field.
func (piu *ProcessInstanceUpdate) SetStartTime(t time.Time) *ProcessInstanceUpdate {
	piu.mutation.SetStartTime(t)
	return piu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableStartTime(t *time.Time) *ProcessInstanceUpdate {
	if t != nil {
		piu.SetStartTime(*t)
	}
	return piu
}

// SetEndTime sets the "end_time" field.
func (piu *ProcessInstanceUpdate) SetEndTime(t time.Time) *ProcessInstanceUpdate {
	piu.mutation.SetEndTime(t)
	return piu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableEndTime(t *time.Time) *ProcessInstanceUpdate {
	if t != nil {
		piu.SetEndTime(*t)
	}
	return piu
}

// ClearEndTime clears the value of the "end_time" field.
func (piu *ProcessInstanceUpdate) ClearEndTime() *ProcessInstanceUpdate {
	piu.mutation.ClearEndTime()
	return piu
}

// SetDuration sets the "duration" field.
func (piu *ProcessInstanceUpdate) SetDuration(i int64) *ProcessInstanceUpdate {
	piu.mutation.ResetDuration()
	piu.mutation.SetDuration(i)
	return piu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableDuration(i *int64) *ProcessInstanceUpdate {
	if i != nil {
		piu.SetDuration(*i)
	}
	return piu
}

// AddDuration adds i to the "duration" field.
func (piu *ProcessInstanceUpdate) AddDuration(i int64) *ProcessInstanceUpdate {
	piu.mutation.AddDuration(i)
	return piu
}

// ClearDuration clears the value of the "duration" field.
func (piu *ProcessInstanceUpdate) ClearDuration() *ProcessInstanceUpdate {
	piu.mutation.ClearDuration()
	return piu
}

// SetDeleteReason sets the "delete_reason" field.
func (piu *ProcessInstanceUpdate) SetDeleteReason(s string) *ProcessInstanceUpdate {
	piu.mutation.SetDeleteReason(s)
	return piu
}

// SetNillableDeleteReason sets the "delete_reason" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableDeleteReason(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetDeleteReason(*s)
	}
	return piu
}

// ClearDeleteReason clears the value of the "delete_reason" field.
func (piu *ProcessInstanceUpdate) ClearDeleteReason() *ProcessInstanceUpdate {
	piu.mutation.ClearDeleteReason()
	return piu
}

// SetSuperProcessInstanceID sets the "super_process_instance_id" field.
func (piu *ProcessInstanceUpdate) SetSuperProcessInstanceID(s string) *ProcessInstanceUpdate {
	piu.mutation.SetSuperProcessInstanceID(s)
	return piu
}

// SetNillableSuperProcessInstanceID sets the "super_process_instance_id" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableSuperProcessInstanceID(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetSuperProcessInstanceID(*s)
	}
	return piu
}

// ClearSuperProcessInstanceID clears the value of the "super_process_instance_id" field.
func (piu *ProcessInstanceUpdate) ClearSuperProcessInstanceID() *ProcessInstanceUpdate {
	piu.mutation.ClearSuperProcessInstanceID()
	return piu
}

// SetRootProcessInstanceID sets the "root_process_instance_id" field.
func (piu *ProcessInstanceUpdate) SetRootProcessInstanceID(s string) *ProcessInstanceUpdate {
	piu.mutation.SetRootProcessInstanceID(s)
	return piu
}

// SetNillableRootProcessInstanceID sets the "root_process_instance_id" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableRootProcessInstanceID(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetRootProcessInstanceID(*s)
	}
	return piu
}

// ClearRootProcessInstanceID clears the value of the "root_process_instance_id" field.
func (piu *ProcessInstanceUpdate) ClearRootProcessInstanceID() *ProcessInstanceUpdate {
	piu.mutation.ClearRootProcessInstanceID()
	return piu
}

// SetSuspended sets the "suspended" field.
func (piu *ProcessInstanceUpdate) SetSuspended(b bool) *ProcessInstanceUpdate {
	piu.mutation.SetSuspended(b)
	return piu
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableSuspended(b *bool) *ProcessInstanceUpdate {
	if b != nil {
		piu.SetSuspended(*b)
	}
	return piu
}

// SetTenantID sets the "tenant_id" field.
func (piu *ProcessInstanceUpdate) SetTenantID(s string) *ProcessInstanceUpdate {
	piu.mutation.SetTenantID(s)
	return piu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableTenantID(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetTenantID(*s)
	}
	return piu
}

// SetName sets the "name" field.
func (piu *ProcessInstanceUpdate) SetName(s string) *ProcessInstanceUpdate {
	piu.mutation.SetName(s)
	return piu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableName(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetName(*s)
	}
	return piu
}

// ClearName clears the value of the "name" field.
func (piu *ProcessInstanceUpdate) ClearName() *ProcessInstanceUpdate {
	piu.mutation.ClearName()
	return piu
}

// SetDescription sets the "description" field.
func (piu *ProcessInstanceUpdate) SetDescription(s string) *ProcessInstanceUpdate {
	piu.mutation.SetDescription(s)
	return piu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableDescription(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetDescription(*s)
	}
	return piu
}

// ClearDescription clears the value of the "description" field.
func (piu *ProcessInstanceUpdate) ClearDescription() *ProcessInstanceUpdate {
	piu.mutation.ClearDescription()
	return piu
}

// SetCallbackID sets the "callback_id" field.
func (piu *ProcessInstanceUpdate) SetCallbackID(s string) *ProcessInstanceUpdate {
	piu.mutation.SetCallbackID(s)
	return piu
}

// SetNillableCallbackID sets the "callback_id" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableCallbackID(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetCallbackID(*s)
	}
	return piu
}

// ClearCallbackID clears the value of the "callback_id" field.
func (piu *ProcessInstanceUpdate) ClearCallbackID() *ProcessInstanceUpdate {
	piu.mutation.ClearCallbackID()
	return piu
}

// SetCallbackType sets the "callback_type" field.
func (piu *ProcessInstanceUpdate) SetCallbackType(s string) *ProcessInstanceUpdate {
	piu.mutation.SetCallbackType(s)
	return piu
}

// SetNillableCallbackType sets the "callback_type" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableCallbackType(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetCallbackType(*s)
	}
	return piu
}

// ClearCallbackType clears the value of the "callback_type" field.
func (piu *ProcessInstanceUpdate) ClearCallbackType() *ProcessInstanceUpdate {
	piu.mutation.ClearCallbackType()
	return piu
}

// SetReferenceID sets the "reference_id" field.
func (piu *ProcessInstanceUpdate) SetReferenceID(s string) *ProcessInstanceUpdate {
	piu.mutation.SetReferenceID(s)
	return piu
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableReferenceID(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetReferenceID(*s)
	}
	return piu
}

// ClearReferenceID clears the value of the "reference_id" field.
func (piu *ProcessInstanceUpdate) ClearReferenceID() *ProcessInstanceUpdate {
	piu.mutation.ClearReferenceID()
	return piu
}

// SetReferenceType sets the "reference_type" field.
func (piu *ProcessInstanceUpdate) SetReferenceType(s string) *ProcessInstanceUpdate {
	piu.mutation.SetReferenceType(s)
	return piu
}

// SetNillableReferenceType sets the "reference_type" field if the given value is not nil.
func (piu *ProcessInstanceUpdate) SetNillableReferenceType(s *string) *ProcessInstanceUpdate {
	if s != nil {
		piu.SetReferenceType(*s)
	}
	return piu
}

// ClearReferenceType clears the value of the "reference_type" field.
func (piu *ProcessInstanceUpdate) ClearReferenceType() *ProcessInstanceUpdate {
	piu.mutation.ClearReferenceType()
	return piu
}

// SetUpdatedAt sets the "updated_at" field.
func (piu *ProcessInstanceUpdate) SetUpdatedAt(t time.Time) *ProcessInstanceUpdate {
	piu.mutation.SetUpdatedAt(t)
	return piu
}

// Mutation returns the ProcessInstanceMutation object of the builder.
func (piu *ProcessInstanceUpdate) Mutation() *ProcessInstanceMutation {
	return piu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProcessInstanceUpdate) Save(ctx context.Context) (int, error) {
	piu.defaults()
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProcessInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProcessInstanceUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProcessInstanceUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piu *ProcessInstanceUpdate) defaults() {
	if _, ok := piu.mutation.UpdatedAt(); !ok {
		v := processinstance.UpdateDefaultUpdatedAt()
		piu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *ProcessInstanceUpdate) check() error {
	if v, ok := piu.mutation.BusinessKey(); ok {
		if err := processinstance.BusinessKeyValidator(v); err != nil {
			return &ValidationError{Name: "business_key", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.business_key": %w`, err)}
		}
	}
	if v, ok := piu.mutation.ProcessDefinitionKey(); ok {
		if err := processinstance.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.process_definition_key": %w`, err)}
		}
	}
	if v, ok := piu.mutation.ProcessDefinitionName(); ok {
		if err := processinstance.ProcessDefinitionNameValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_name", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.process_definition_name": %w`, err)}
		}
	}
	if v, ok := piu.mutation.DeploymentID(); ok {
		if err := processinstance.DeploymentIDValidator(v); err != nil {
			return &ValidationError{Name: "deployment_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.deployment_id": %w`, err)}
		}
	}
	if v, ok := piu.mutation.StartUserID(); ok {
		if err := processinstance.StartUserIDValidator(v); err != nil {
			return &ValidationError{Name: "start_user_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.start_user_id": %w`, err)}
		}
	}
	if v, ok := piu.mutation.DeleteReason(); ok {
		if err := processinstance.DeleteReasonValidator(v); err != nil {
			return &ValidationError{Name: "delete_reason", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.delete_reason": %w`, err)}
		}
	}
	if v, ok := piu.mutation.SuperProcessInstanceID(); ok {
		if err := processinstance.SuperProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "super_process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.super_process_instance_id": %w`, err)}
		}
	}
	if v, ok := piu.mutation.RootProcessInstanceID(); ok {
		if err := processinstance.RootProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "root_process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.root_process_instance_id": %w`, err)}
		}
	}
	if v, ok := piu.mutation.TenantID(); ok {
		if err := processinstance.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.tenant_id": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Name(); ok {
		if err := processinstance.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.name": %w`, err)}
		}
	}
	if v, ok := piu.mutation.CallbackID(); ok {
		if err := processinstance.CallbackIDValidator(v); err != nil {
			return &ValidationError{Name: "callback_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.callback_id": %w`, err)}
		}
	}
	if v, ok := piu.mutation.CallbackType(); ok {
		if err := processinstance.CallbackTypeValidator(v); err != nil {
			return &ValidationError{Name: "callback_type", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.callback_type": %w`, err)}
		}
	}
	if v, ok := piu.mutation.ReferenceID(); ok {
		if err := processinstance.ReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "reference_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.reference_id": %w`, err)}
		}
	}
	if v, ok := piu.mutation.ReferenceType(); ok {
		if err := processinstance.ReferenceTypeValidator(v); err != nil {
			return &ValidationError{Name: "reference_type", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.reference_type": %w`, err)}
		}
	}
	return nil
}

func (piu *ProcessInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(processinstance.Table, processinstance.Columns, sqlgraph.NewFieldSpec(processinstance.FieldID, field.TypeInt64))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.BusinessKey(); ok {
		_spec.SetField(processinstance.FieldBusinessKey, field.TypeString, value)
	}
	if piu.mutation.BusinessKeyCleared() {
		_spec.ClearField(processinstance.FieldBusinessKey, field.TypeString)
	}
	if value, ok := piu.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(processinstance.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := piu.mutation.AddedProcessDefinitionID(); ok {
		_spec.AddField(processinstance.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := piu.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(processinstance.FieldProcessDefinitionKey, field.TypeString, value)
	}
	if value, ok := piu.mutation.ProcessDefinitionName(); ok {
		_spec.SetField(processinstance.FieldProcessDefinitionName, field.TypeString, value)
	}
	if piu.mutation.ProcessDefinitionNameCleared() {
		_spec.ClearField(processinstance.FieldProcessDefinitionName, field.TypeString)
	}
	if value, ok := piu.mutation.ProcessDefinitionVersion(); ok {
		_spec.SetField(processinstance.FieldProcessDefinitionVersion, field.TypeInt32, value)
	}
	if value, ok := piu.mutation.AddedProcessDefinitionVersion(); ok {
		_spec.AddField(processinstance.FieldProcessDefinitionVersion, field.TypeInt32, value)
	}
	if value, ok := piu.mutation.DeploymentID(); ok {
		_spec.SetField(processinstance.FieldDeploymentID, field.TypeString, value)
	}
	if piu.mutation.DeploymentIDCleared() {
		_spec.ClearField(processinstance.FieldDeploymentID, field.TypeString)
	}
	if value, ok := piu.mutation.StartUserID(); ok {
		_spec.SetField(processinstance.FieldStartUserID, field.TypeString, value)
	}
	if piu.mutation.StartUserIDCleared() {
		_spec.ClearField(processinstance.FieldStartUserID, field.TypeString)
	}
	if value, ok := piu.mutation.StartTime(); ok {
		_spec.SetField(processinstance.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := piu.mutation.EndTime(); ok {
		_spec.SetField(processinstance.FieldEndTime, field.TypeTime, value)
	}
	if piu.mutation.EndTimeCleared() {
		_spec.ClearField(processinstance.FieldEndTime, field.TypeTime)
	}
	if value, ok := piu.mutation.Duration(); ok {
		_spec.SetField(processinstance.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := piu.mutation.AddedDuration(); ok {
		_spec.AddField(processinstance.FieldDuration, field.TypeInt64, value)
	}
	if piu.mutation.DurationCleared() {
		_spec.ClearField(processinstance.FieldDuration, field.TypeInt64)
	}
	if value, ok := piu.mutation.DeleteReason(); ok {
		_spec.SetField(processinstance.FieldDeleteReason, field.TypeString, value)
	}
	if piu.mutation.DeleteReasonCleared() {
		_spec.ClearField(processinstance.FieldDeleteReason, field.TypeString)
	}
	if value, ok := piu.mutation.SuperProcessInstanceID(); ok {
		_spec.SetField(processinstance.FieldSuperProcessInstanceID, field.TypeString, value)
	}
	if piu.mutation.SuperProcessInstanceIDCleared() {
		_spec.ClearField(processinstance.FieldSuperProcessInstanceID, field.TypeString)
	}
	if value, ok := piu.mutation.RootProcessInstanceID(); ok {
		_spec.SetField(processinstance.FieldRootProcessInstanceID, field.TypeString, value)
	}
	if piu.mutation.RootProcessInstanceIDCleared() {
		_spec.ClearField(processinstance.FieldRootProcessInstanceID, field.TypeString)
	}
	if value, ok := piu.mutation.Suspended(); ok {
		_spec.SetField(processinstance.FieldSuspended, field.TypeBool, value)
	}
	if value, ok := piu.mutation.TenantID(); ok {
		_spec.SetField(processinstance.FieldTenantID, field.TypeString, value)
	}
	if value, ok := piu.mutation.Name(); ok {
		_spec.SetField(processinstance.FieldName, field.TypeString, value)
	}
	if piu.mutation.NameCleared() {
		_spec.ClearField(processinstance.FieldName, field.TypeString)
	}
	if value, ok := piu.mutation.Description(); ok {
		_spec.SetField(processinstance.FieldDescription, field.TypeString, value)
	}
	if piu.mutation.DescriptionCleared() {
		_spec.ClearField(processinstance.FieldDescription, field.TypeString)
	}
	if value, ok := piu.mutation.CallbackID(); ok {
		_spec.SetField(processinstance.FieldCallbackID, field.TypeString, value)
	}
	if piu.mutation.CallbackIDCleared() {
		_spec.ClearField(processinstance.FieldCallbackID, field.TypeString)
	}
	if value, ok := piu.mutation.CallbackType(); ok {
		_spec.SetField(processinstance.FieldCallbackType, field.TypeString, value)
	}
	if piu.mutation.CallbackTypeCleared() {
		_spec.ClearField(processinstance.FieldCallbackType, field.TypeString)
	}
	if value, ok := piu.mutation.ReferenceID(); ok {
		_spec.SetField(processinstance.FieldReferenceID, field.TypeString, value)
	}
	if piu.mutation.ReferenceIDCleared() {
		_spec.ClearField(processinstance.FieldReferenceID, field.TypeString)
	}
	if value, ok := piu.mutation.ReferenceType(); ok {
		_spec.SetField(processinstance.FieldReferenceType, field.TypeString, value)
	}
	if piu.mutation.ReferenceTypeCleared() {
		_spec.ClearField(processinstance.FieldReferenceType, field.TypeString)
	}
	if value, ok := piu.mutation.UpdatedAt(); ok {
		_spec.SetField(processinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// ProcessInstanceUpdateOne is the builder for updating a single ProcessInstance entity.
type ProcessInstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessInstanceMutation
}

// SetBusinessKey sets the "business_key" field.
func (piuo *ProcessInstanceUpdateOne) SetBusinessKey(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetBusinessKey(s)
	return piuo
}

// SetNillableBusinessKey sets the "business_key" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableBusinessKey(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetBusinessKey(*s)
	}
	return piuo
}

// ClearBusinessKey clears the value of the "business_key" field.
func (piuo *ProcessInstanceUpdateOne) ClearBusinessKey() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearBusinessKey()
	return piuo
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (piuo *ProcessInstanceUpdateOne) SetProcessDefinitionID(i int64) *ProcessInstanceUpdateOne {
	piuo.mutation.ResetProcessDefinitionID()
	piuo.mutation.SetProcessDefinitionID(i)
	return piuo
}

// SetNillableProcessDefinitionID sets the "process_definition_id" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableProcessDefinitionID(i *int64) *ProcessInstanceUpdateOne {
	if i != nil {
		piuo.SetProcessDefinitionID(*i)
	}
	return piuo
}

// AddProcessDefinitionID adds i to the "process_definition_id" field.
func (piuo *ProcessInstanceUpdateOne) AddProcessDefinitionID(i int64) *ProcessInstanceUpdateOne {
	piuo.mutation.AddProcessDefinitionID(i)
	return piuo
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (piuo *ProcessInstanceUpdateOne) SetProcessDefinitionKey(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetProcessDefinitionKey(s)
	return piuo
}

// SetNillableProcessDefinitionKey sets the "process_definition_key" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableProcessDefinitionKey(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetProcessDefinitionKey(*s)
	}
	return piuo
}

// SetProcessDefinitionName sets the "process_definition_name" field.
func (piuo *ProcessInstanceUpdateOne) SetProcessDefinitionName(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetProcessDefinitionName(s)
	return piuo
}

// SetNillableProcessDefinitionName sets the "process_definition_name" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableProcessDefinitionName(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetProcessDefinitionName(*s)
	}
	return piuo
}

// ClearProcessDefinitionName clears the value of the "process_definition_name" field.
func (piuo *ProcessInstanceUpdateOne) ClearProcessDefinitionName() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearProcessDefinitionName()
	return piuo
}

// SetProcessDefinitionVersion sets the "process_definition_version" field.
func (piuo *ProcessInstanceUpdateOne) SetProcessDefinitionVersion(i int32) *ProcessInstanceUpdateOne {
	piuo.mutation.ResetProcessDefinitionVersion()
	piuo.mutation.SetProcessDefinitionVersion(i)
	return piuo
}

// SetNillableProcessDefinitionVersion sets the "process_definition_version" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableProcessDefinitionVersion(i *int32) *ProcessInstanceUpdateOne {
	if i != nil {
		piuo.SetProcessDefinitionVersion(*i)
	}
	return piuo
}

// AddProcessDefinitionVersion adds i to the "process_definition_version" field.
func (piuo *ProcessInstanceUpdateOne) AddProcessDefinitionVersion(i int32) *ProcessInstanceUpdateOne {
	piuo.mutation.AddProcessDefinitionVersion(i)
	return piuo
}

// SetDeploymentID sets the "deployment_id" field.
func (piuo *ProcessInstanceUpdateOne) SetDeploymentID(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetDeploymentID(s)
	return piuo
}

// SetNillableDeploymentID sets the "deployment_id" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableDeploymentID(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetDeploymentID(*s)
	}
	return piuo
}

// ClearDeploymentID clears the value of the "deployment_id" field.
func (piuo *ProcessInstanceUpdateOne) ClearDeploymentID() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearDeploymentID()
	return piuo
}

// SetStartUserID sets the "start_user_id" field.
func (piuo *ProcessInstanceUpdateOne) SetStartUserID(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetStartUserID(s)
	return piuo
}

// SetNillableStartUserID sets the "start_user_id" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableStartUserID(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetStartUserID(*s)
	}
	return piuo
}

// ClearStartUserID clears the value of the "start_user_id" field.
func (piuo *ProcessInstanceUpdateOne) ClearStartUserID() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearStartUserID()
	return piuo
}

// SetStartTime sets the "start_time" field.
func (piuo *ProcessInstanceUpdateOne) SetStartTime(t time.Time) *ProcessInstanceUpdateOne {
	piuo.mutation.SetStartTime(t)
	return piuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableStartTime(t *time.Time) *ProcessInstanceUpdateOne {
	if t != nil {
		piuo.SetStartTime(*t)
	}
	return piuo
}

// SetEndTime sets the "end_time" field.
func (piuo *ProcessInstanceUpdateOne) SetEndTime(t time.Time) *ProcessInstanceUpdateOne {
	piuo.mutation.SetEndTime(t)
	return piuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableEndTime(t *time.Time) *ProcessInstanceUpdateOne {
	if t != nil {
		piuo.SetEndTime(*t)
	}
	return piuo
}

// ClearEndTime clears the value of the "end_time" field.
func (piuo *ProcessInstanceUpdateOne) ClearEndTime() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearEndTime()
	return piuo
}

// SetDuration sets the "duration" field.
func (piuo *ProcessInstanceUpdateOne) SetDuration(i int64) *ProcessInstanceUpdateOne {
	piuo.mutation.ResetDuration()
	piuo.mutation.SetDuration(i)
	return piuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableDuration(i *int64) *ProcessInstanceUpdateOne {
	if i != nil {
		piuo.SetDuration(*i)
	}
	return piuo
}

// AddDuration adds i to the "duration" field.
func (piuo *ProcessInstanceUpdateOne) AddDuration(i int64) *ProcessInstanceUpdateOne {
	piuo.mutation.AddDuration(i)
	return piuo
}

// ClearDuration clears the value of the "duration" field.
func (piuo *ProcessInstanceUpdateOne) ClearDuration() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearDuration()
	return piuo
}

// SetDeleteReason sets the "delete_reason" field.
func (piuo *ProcessInstanceUpdateOne) SetDeleteReason(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetDeleteReason(s)
	return piuo
}

// SetNillableDeleteReason sets the "delete_reason" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableDeleteReason(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetDeleteReason(*s)
	}
	return piuo
}

// ClearDeleteReason clears the value of the "delete_reason" field.
func (piuo *ProcessInstanceUpdateOne) ClearDeleteReason() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearDeleteReason()
	return piuo
}

// SetSuperProcessInstanceID sets the "super_process_instance_id" field.
func (piuo *ProcessInstanceUpdateOne) SetSuperProcessInstanceID(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetSuperProcessInstanceID(s)
	return piuo
}

// SetNillableSuperProcessInstanceID sets the "super_process_instance_id" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableSuperProcessInstanceID(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetSuperProcessInstanceID(*s)
	}
	return piuo
}

// ClearSuperProcessInstanceID clears the value of the "super_process_instance_id" field.
func (piuo *ProcessInstanceUpdateOne) ClearSuperProcessInstanceID() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearSuperProcessInstanceID()
	return piuo
}

// SetRootProcessInstanceID sets the "root_process_instance_id" field.
func (piuo *ProcessInstanceUpdateOne) SetRootProcessInstanceID(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetRootProcessInstanceID(s)
	return piuo
}

// SetNillableRootProcessInstanceID sets the "root_process_instance_id" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableRootProcessInstanceID(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetRootProcessInstanceID(*s)
	}
	return piuo
}

// ClearRootProcessInstanceID clears the value of the "root_process_instance_id" field.
func (piuo *ProcessInstanceUpdateOne) ClearRootProcessInstanceID() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearRootProcessInstanceID()
	return piuo
}

// SetSuspended sets the "suspended" field.
func (piuo *ProcessInstanceUpdateOne) SetSuspended(b bool) *ProcessInstanceUpdateOne {
	piuo.mutation.SetSuspended(b)
	return piuo
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableSuspended(b *bool) *ProcessInstanceUpdateOne {
	if b != nil {
		piuo.SetSuspended(*b)
	}
	return piuo
}

// SetTenantID sets the "tenant_id" field.
func (piuo *ProcessInstanceUpdateOne) SetTenantID(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetTenantID(s)
	return piuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableTenantID(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetTenantID(*s)
	}
	return piuo
}

// SetName sets the "name" field.
func (piuo *ProcessInstanceUpdateOne) SetName(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetName(s)
	return piuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableName(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetName(*s)
	}
	return piuo
}

// ClearName clears the value of the "name" field.
func (piuo *ProcessInstanceUpdateOne) ClearName() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearName()
	return piuo
}

// SetDescription sets the "description" field.
func (piuo *ProcessInstanceUpdateOne) SetDescription(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetDescription(s)
	return piuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableDescription(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetDescription(*s)
	}
	return piuo
}

// ClearDescription clears the value of the "description" field.
func (piuo *ProcessInstanceUpdateOne) ClearDescription() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearDescription()
	return piuo
}

// SetCallbackID sets the "callback_id" field.
func (piuo *ProcessInstanceUpdateOne) SetCallbackID(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetCallbackID(s)
	return piuo
}

// SetNillableCallbackID sets the "callback_id" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableCallbackID(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetCallbackID(*s)
	}
	return piuo
}

// ClearCallbackID clears the value of the "callback_id" field.
func (piuo *ProcessInstanceUpdateOne) ClearCallbackID() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearCallbackID()
	return piuo
}

// SetCallbackType sets the "callback_type" field.
func (piuo *ProcessInstanceUpdateOne) SetCallbackType(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetCallbackType(s)
	return piuo
}

// SetNillableCallbackType sets the "callback_type" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableCallbackType(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetCallbackType(*s)
	}
	return piuo
}

// ClearCallbackType clears the value of the "callback_type" field.
func (piuo *ProcessInstanceUpdateOne) ClearCallbackType() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearCallbackType()
	return piuo
}

// SetReferenceID sets the "reference_id" field.
func (piuo *ProcessInstanceUpdateOne) SetReferenceID(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetReferenceID(s)
	return piuo
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableReferenceID(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetReferenceID(*s)
	}
	return piuo
}

// ClearReferenceID clears the value of the "reference_id" field.
func (piuo *ProcessInstanceUpdateOne) ClearReferenceID() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearReferenceID()
	return piuo
}

// SetReferenceType sets the "reference_type" field.
func (piuo *ProcessInstanceUpdateOne) SetReferenceType(s string) *ProcessInstanceUpdateOne {
	piuo.mutation.SetReferenceType(s)
	return piuo
}

// SetNillableReferenceType sets the "reference_type" field if the given value is not nil.
func (piuo *ProcessInstanceUpdateOne) SetNillableReferenceType(s *string) *ProcessInstanceUpdateOne {
	if s != nil {
		piuo.SetReferenceType(*s)
	}
	return piuo
}

// ClearReferenceType clears the value of the "reference_type" field.
func (piuo *ProcessInstanceUpdateOne) ClearReferenceType() *ProcessInstanceUpdateOne {
	piuo.mutation.ClearReferenceType()
	return piuo
}

// SetUpdatedAt sets the "updated_at" field.
func (piuo *ProcessInstanceUpdateOne) SetUpdatedAt(t time.Time) *ProcessInstanceUpdateOne {
	piuo.mutation.SetUpdatedAt(t)
	return piuo
}

// Mutation returns the ProcessInstanceMutation object of the builder.
func (piuo *ProcessInstanceUpdateOne) Mutation() *ProcessInstanceMutation {
	return piuo.mutation
}

// Where appends a list predicates to the ProcessInstanceUpdate builder.
func (piuo *ProcessInstanceUpdateOne) Where(ps ...predicate.ProcessInstance) *ProcessInstanceUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProcessInstanceUpdateOne) Select(field string, fields ...string) *ProcessInstanceUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProcessInstance entity.
func (piuo *ProcessInstanceUpdateOne) Save(ctx context.Context) (*ProcessInstance, error) {
	piuo.defaults()
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProcessInstanceUpdateOne) SaveX(ctx context.Context) *ProcessInstance {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProcessInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProcessInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piuo *ProcessInstanceUpdateOne) defaults() {
	if _, ok := piuo.mutation.UpdatedAt(); !ok {
		v := processinstance.UpdateDefaultUpdatedAt()
		piuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *ProcessInstanceUpdateOne) check() error {
	if v, ok := piuo.mutation.BusinessKey(); ok {
		if err := processinstance.BusinessKeyValidator(v); err != nil {
			return &ValidationError{Name: "business_key", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.business_key": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.ProcessDefinitionKey(); ok {
		if err := processinstance.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.process_definition_key": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.ProcessDefinitionName(); ok {
		if err := processinstance.ProcessDefinitionNameValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_name", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.process_definition_name": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.DeploymentID(); ok {
		if err := processinstance.DeploymentIDValidator(v); err != nil {
			return &ValidationError{Name: "deployment_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.deployment_id": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.StartUserID(); ok {
		if err := processinstance.StartUserIDValidator(v); err != nil {
			return &ValidationError{Name: "start_user_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.start_user_id": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.DeleteReason(); ok {
		if err := processinstance.DeleteReasonValidator(v); err != nil {
			return &ValidationError{Name: "delete_reason", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.delete_reason": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.SuperProcessInstanceID(); ok {
		if err := processinstance.SuperProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "super_process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.super_process_instance_id": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.RootProcessInstanceID(); ok {
		if err := processinstance.RootProcessInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "root_process_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.root_process_instance_id": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.TenantID(); ok {
		if err := processinstance.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.tenant_id": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Name(); ok {
		if err := processinstance.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.name": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.CallbackID(); ok {
		if err := processinstance.CallbackIDValidator(v); err != nil {
			return &ValidationError{Name: "callback_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.callback_id": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.CallbackType(); ok {
		if err := processinstance.CallbackTypeValidator(v); err != nil {
			return &ValidationError{Name: "callback_type", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.callback_type": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.ReferenceID(); ok {
		if err := processinstance.ReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "reference_id", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.reference_id": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.ReferenceType(); ok {
		if err := processinstance.ReferenceTypeValidator(v); err != nil {
			return &ValidationError{Name: "reference_type", err: fmt.Errorf(`ent: validator failed for field "ProcessInstance.reference_type": %w`, err)}
		}
	}
	return nil
}

func (piuo *ProcessInstanceUpdateOne) sqlSave(ctx context.Context) (_node *ProcessInstance, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(processinstance.Table, processinstance.Columns, sqlgraph.NewFieldSpec(processinstance.FieldID, field.TypeInt64))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProcessInstance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, processinstance.FieldID)
		for _, f := range fields {
			if !processinstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != processinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.BusinessKey(); ok {
		_spec.SetField(processinstance.FieldBusinessKey, field.TypeString, value)
	}
	if piuo.mutation.BusinessKeyCleared() {
		_spec.ClearField(processinstance.FieldBusinessKey, field.TypeString)
	}
	if value, ok := piuo.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(processinstance.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := piuo.mutation.AddedProcessDefinitionID(); ok {
		_spec.AddField(processinstance.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := piuo.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(processinstance.FieldProcessDefinitionKey, field.TypeString, value)
	}
	if value, ok := piuo.mutation.ProcessDefinitionName(); ok {
		_spec.SetField(processinstance.FieldProcessDefinitionName, field.TypeString, value)
	}
	if piuo.mutation.ProcessDefinitionNameCleared() {
		_spec.ClearField(processinstance.FieldProcessDefinitionName, field.TypeString)
	}
	if value, ok := piuo.mutation.ProcessDefinitionVersion(); ok {
		_spec.SetField(processinstance.FieldProcessDefinitionVersion, field.TypeInt32, value)
	}
	if value, ok := piuo.mutation.AddedProcessDefinitionVersion(); ok {
		_spec.AddField(processinstance.FieldProcessDefinitionVersion, field.TypeInt32, value)
	}
	if value, ok := piuo.mutation.DeploymentID(); ok {
		_spec.SetField(processinstance.FieldDeploymentID, field.TypeString, value)
	}
	if piuo.mutation.DeploymentIDCleared() {
		_spec.ClearField(processinstance.FieldDeploymentID, field.TypeString)
	}
	if value, ok := piuo.mutation.StartUserID(); ok {
		_spec.SetField(processinstance.FieldStartUserID, field.TypeString, value)
	}
	if piuo.mutation.StartUserIDCleared() {
		_spec.ClearField(processinstance.FieldStartUserID, field.TypeString)
	}
	if value, ok := piuo.mutation.StartTime(); ok {
		_spec.SetField(processinstance.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := piuo.mutation.EndTime(); ok {
		_spec.SetField(processinstance.FieldEndTime, field.TypeTime, value)
	}
	if piuo.mutation.EndTimeCleared() {
		_spec.ClearField(processinstance.FieldEndTime, field.TypeTime)
	}
	if value, ok := piuo.mutation.Duration(); ok {
		_spec.SetField(processinstance.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := piuo.mutation.AddedDuration(); ok {
		_spec.AddField(processinstance.FieldDuration, field.TypeInt64, value)
	}
	if piuo.mutation.DurationCleared() {
		_spec.ClearField(processinstance.FieldDuration, field.TypeInt64)
	}
	if value, ok := piuo.mutation.DeleteReason(); ok {
		_spec.SetField(processinstance.FieldDeleteReason, field.TypeString, value)
	}
	if piuo.mutation.DeleteReasonCleared() {
		_spec.ClearField(processinstance.FieldDeleteReason, field.TypeString)
	}
	if value, ok := piuo.mutation.SuperProcessInstanceID(); ok {
		_spec.SetField(processinstance.FieldSuperProcessInstanceID, field.TypeString, value)
	}
	if piuo.mutation.SuperProcessInstanceIDCleared() {
		_spec.ClearField(processinstance.FieldSuperProcessInstanceID, field.TypeString)
	}
	if value, ok := piuo.mutation.RootProcessInstanceID(); ok {
		_spec.SetField(processinstance.FieldRootProcessInstanceID, field.TypeString, value)
	}
	if piuo.mutation.RootProcessInstanceIDCleared() {
		_spec.ClearField(processinstance.FieldRootProcessInstanceID, field.TypeString)
	}
	if value, ok := piuo.mutation.Suspended(); ok {
		_spec.SetField(processinstance.FieldSuspended, field.TypeBool, value)
	}
	if value, ok := piuo.mutation.TenantID(); ok {
		_spec.SetField(processinstance.FieldTenantID, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Name(); ok {
		_spec.SetField(processinstance.FieldName, field.TypeString, value)
	}
	if piuo.mutation.NameCleared() {
		_spec.ClearField(processinstance.FieldName, field.TypeString)
	}
	if value, ok := piuo.mutation.Description(); ok {
		_spec.SetField(processinstance.FieldDescription, field.TypeString, value)
	}
	if piuo.mutation.DescriptionCleared() {
		_spec.ClearField(processinstance.FieldDescription, field.TypeString)
	}
	if value, ok := piuo.mutation.CallbackID(); ok {
		_spec.SetField(processinstance.FieldCallbackID, field.TypeString, value)
	}
	if piuo.mutation.CallbackIDCleared() {
		_spec.ClearField(processinstance.FieldCallbackID, field.TypeString)
	}
	if value, ok := piuo.mutation.CallbackType(); ok {
		_spec.SetField(processinstance.FieldCallbackType, field.TypeString, value)
	}
	if piuo.mutation.CallbackTypeCleared() {
		_spec.ClearField(processinstance.FieldCallbackType, field.TypeString)
	}
	if value, ok := piuo.mutation.ReferenceID(); ok {
		_spec.SetField(processinstance.FieldReferenceID, field.TypeString, value)
	}
	if piuo.mutation.ReferenceIDCleared() {
		_spec.ClearField(processinstance.FieldReferenceID, field.TypeString)
	}
	if value, ok := piuo.mutation.ReferenceType(); ok {
		_spec.SetField(processinstance.FieldReferenceType, field.TypeString, value)
	}
	if piuo.mutation.ReferenceTypeCleared() {
		_spec.ClearField(processinstance.FieldReferenceType, field.TypeString)
	}
	if value, ok := piuo.mutation.UpdatedAt(); ok {
		_spec.SetField(processinstance.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ProcessInstance{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
