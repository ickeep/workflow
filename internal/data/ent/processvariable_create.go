// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processvariable"
)

// ProcessVariableCreate is the builder for creating a ProcessVariable entity.
type ProcessVariableCreate struct {
	config
	mutation *ProcessVariableMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pvc *ProcessVariableCreate) SetName(s string) *ProcessVariableCreate {
	pvc.mutation.SetName(s)
	return pvc
}

// SetType sets the "type" field.
func (pvc *ProcessVariableCreate) SetType(s string) *ProcessVariableCreate {
	pvc.mutation.SetType(s)
	return pvc
}

// SetTextValue sets the "text_value" field.
func (pvc *ProcessVariableCreate) SetTextValue(s string) *ProcessVariableCreate {
	pvc.mutation.SetTextValue(s)
	return pvc
}

// SetNillableTextValue sets the "text_value" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableTextValue(s *string) *ProcessVariableCreate {
	if s != nil {
		pvc.SetTextValue(*s)
	}
	return pvc
}

// SetTextValue2 sets the "text_value2" field.
func (pvc *ProcessVariableCreate) SetTextValue2(s string) *ProcessVariableCreate {
	pvc.mutation.SetTextValue2(s)
	return pvc
}

// SetNillableTextValue2 sets the "text_value2" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableTextValue2(s *string) *ProcessVariableCreate {
	if s != nil {
		pvc.SetTextValue2(*s)
	}
	return pvc
}

// SetLongValue sets the "long_value" field.
func (pvc *ProcessVariableCreate) SetLongValue(i int64) *ProcessVariableCreate {
	pvc.mutation.SetLongValue(i)
	return pvc
}

// SetNillableLongValue sets the "long_value" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableLongValue(i *int64) *ProcessVariableCreate {
	if i != nil {
		pvc.SetLongValue(*i)
	}
	return pvc
}

// SetDoubleValue sets the "double_value" field.
func (pvc *ProcessVariableCreate) SetDoubleValue(f float64) *ProcessVariableCreate {
	pvc.mutation.SetDoubleValue(f)
	return pvc
}

// SetNillableDoubleValue sets the "double_value" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableDoubleValue(f *float64) *ProcessVariableCreate {
	if f != nil {
		pvc.SetDoubleValue(*f)
	}
	return pvc
}

// SetByteArrayValue sets the "byte_array_value" field.
func (pvc *ProcessVariableCreate) SetByteArrayValue(b []byte) *ProcessVariableCreate {
	pvc.mutation.SetByteArrayValue(b)
	return pvc
}

// SetExecutionID sets the "execution_id" field.
func (pvc *ProcessVariableCreate) SetExecutionID(s string) *ProcessVariableCreate {
	pvc.mutation.SetExecutionID(s)
	return pvc
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableExecutionID(s *string) *ProcessVariableCreate {
	if s != nil {
		pvc.SetExecutionID(*s)
	}
	return pvc
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (pvc *ProcessVariableCreate) SetProcessInstanceID(i int64) *ProcessVariableCreate {
	pvc.mutation.SetProcessInstanceID(i)
	return pvc
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableProcessInstanceID(i *int64) *ProcessVariableCreate {
	if i != nil {
		pvc.SetProcessInstanceID(*i)
	}
	return pvc
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (pvc *ProcessVariableCreate) SetProcessDefinitionID(i int64) *ProcessVariableCreate {
	pvc.mutation.SetProcessDefinitionID(i)
	return pvc
}

// SetNillableProcessDefinitionID sets the "process_definition_id" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableProcessDefinitionID(i *int64) *ProcessVariableCreate {
	if i != nil {
		pvc.SetProcessDefinitionID(*i)
	}
	return pvc
}

// SetCaseExecutionID sets the "case_execution_id" field.
func (pvc *ProcessVariableCreate) SetCaseExecutionID(s string) *ProcessVariableCreate {
	pvc.mutation.SetCaseExecutionID(s)
	return pvc
}

// SetNillableCaseExecutionID sets the "case_execution_id" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableCaseExecutionID(s *string) *ProcessVariableCreate {
	if s != nil {
		pvc.SetCaseExecutionID(*s)
	}
	return pvc
}

// SetCaseInstanceID sets the "case_instance_id" field.
func (pvc *ProcessVariableCreate) SetCaseInstanceID(s string) *ProcessVariableCreate {
	pvc.mutation.SetCaseInstanceID(s)
	return pvc
}

// SetNillableCaseInstanceID sets the "case_instance_id" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableCaseInstanceID(s *string) *ProcessVariableCreate {
	if s != nil {
		pvc.SetCaseInstanceID(*s)
	}
	return pvc
}

// SetTaskID sets the "task_id" field.
func (pvc *ProcessVariableCreate) SetTaskID(i int64) *ProcessVariableCreate {
	pvc.mutation.SetTaskID(i)
	return pvc
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableTaskID(i *int64) *ProcessVariableCreate {
	if i != nil {
		pvc.SetTaskID(*i)
	}
	return pvc
}

// SetActivityInstanceID sets the "activity_instance_id" field.
func (pvc *ProcessVariableCreate) SetActivityInstanceID(s string) *ProcessVariableCreate {
	pvc.mutation.SetActivityInstanceID(s)
	return pvc
}

// SetNillableActivityInstanceID sets the "activity_instance_id" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableActivityInstanceID(s *string) *ProcessVariableCreate {
	if s != nil {
		pvc.SetActivityInstanceID(*s)
	}
	return pvc
}

// SetTenantID sets the "tenant_id" field.
func (pvc *ProcessVariableCreate) SetTenantID(s string) *ProcessVariableCreate {
	pvc.mutation.SetTenantID(s)
	return pvc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableTenantID(s *string) *ProcessVariableCreate {
	if s != nil {
		pvc.SetTenantID(*s)
	}
	return pvc
}

// SetSequenceCounter sets the "sequence_counter" field.
func (pvc *ProcessVariableCreate) SetSequenceCounter(i int32) *ProcessVariableCreate {
	pvc.mutation.SetSequenceCounter(i)
	return pvc
}

// SetNillableSequenceCounter sets the "sequence_counter" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableSequenceCounter(i *int32) *ProcessVariableCreate {
	if i != nil {
		pvc.SetSequenceCounter(*i)
	}
	return pvc
}

// SetConcurrentLocal sets the "concurrent_local" field.
func (pvc *ProcessVariableCreate) SetConcurrentLocal(b bool) *ProcessVariableCreate {
	pvc.mutation.SetConcurrentLocal(b)
	return pvc
}

// SetNillableConcurrentLocal sets the "concurrent_local" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableConcurrentLocal(b *bool) *ProcessVariableCreate {
	if b != nil {
		pvc.SetConcurrentLocal(*b)
	}
	return pvc
}

// SetScopeID sets the "scope_id" field.
func (pvc *ProcessVariableCreate) SetScopeID(s string) *ProcessVariableCreate {
	pvc.mutation.SetScopeID(s)
	return pvc
}

// SetNillableScopeID sets the "scope_id" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableScopeID(s *string) *ProcessVariableCreate {
	if s != nil {
		pvc.SetScopeID(*s)
	}
	return pvc
}

// SetScopeType sets the "scope_type" field.
func (pvc *ProcessVariableCreate) SetScopeType(s string) *ProcessVariableCreate {
	pvc.mutation.SetScopeType(s)
	return pvc
}

// SetNillableScopeType sets the "scope_type" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableScopeType(s *string) *ProcessVariableCreate {
	if s != nil {
		pvc.SetScopeType(*s)
	}
	return pvc
}

// SetCreatedAt sets the "created_at" field.
func (pvc *ProcessVariableCreate) SetCreatedAt(t time.Time) *ProcessVariableCreate {
	pvc.mutation.SetCreatedAt(t)
	return pvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableCreatedAt(t *time.Time) *ProcessVariableCreate {
	if t != nil {
		pvc.SetCreatedAt(*t)
	}
	return pvc
}

// SetUpdatedAt sets the "updated_at" field.
func (pvc *ProcessVariableCreate) SetUpdatedAt(t time.Time) *ProcessVariableCreate {
	pvc.mutation.SetUpdatedAt(t)
	return pvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pvc *ProcessVariableCreate) SetNillableUpdatedAt(t *time.Time) *ProcessVariableCreate {
	if t != nil {
		pvc.SetUpdatedAt(*t)
	}
	return pvc
}

// SetID sets the "id" field.
func (pvc *ProcessVariableCreate) SetID(i int64) *ProcessVariableCreate {
	pvc.mutation.SetID(i)
	return pvc
}

// Mutation returns the ProcessVariableMutation object of the builder.
func (pvc *ProcessVariableCreate) Mutation() *ProcessVariableMutation {
	return pvc.mutation
}

// Save creates the ProcessVariable in the database.
func (pvc *ProcessVariableCreate) Save(ctx context.Context) (*ProcessVariable, error) {
	pvc.defaults()
	return withHooks(ctx, pvc.sqlSave, pvc.mutation, pvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pvc *ProcessVariableCreate) SaveX(ctx context.Context) *ProcessVariable {
	v, err := pvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvc *ProcessVariableCreate) Exec(ctx context.Context) error {
	_, err := pvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvc *ProcessVariableCreate) ExecX(ctx context.Context) {
	if err := pvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pvc *ProcessVariableCreate) defaults() {
	if _, ok := pvc.mutation.TenantID(); !ok {
		v := processvariable.DefaultTenantID
		pvc.mutation.SetTenantID(v)
	}
	if _, ok := pvc.mutation.SequenceCounter(); !ok {
		v := processvariable.DefaultSequenceCounter
		pvc.mutation.SetSequenceCounter(v)
	}
	if _, ok := pvc.mutation.ConcurrentLocal(); !ok {
		v := processvariable.DefaultConcurrentLocal
		pvc.mutation.SetConcurrentLocal(v)
	}
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		v := processvariable.DefaultCreatedAt()
		pvc.mutation.SetCreatedAt(v)
	}
	if _, ok := pvc.mutation.UpdatedAt(); !ok {
		v := processvariable.DefaultUpdatedAt()
		pvc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvc *ProcessVariableCreate) check() error {
	if _, ok := pvc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ProcessVariable.name"`)}
	}
	if v, ok := pvc.mutation.Name(); ok {
		if err := processvariable.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.name": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ProcessVariable.type"`)}
	}
	if v, ok := pvc.mutation.GetType(); ok {
		if err := processvariable.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.type": %w`, err)}
		}
	}
	if v, ok := pvc.mutation.ExecutionID(); ok {
		if err := processvariable.ExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "execution_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.execution_id": %w`, err)}
		}
	}
	if v, ok := pvc.mutation.CaseExecutionID(); ok {
		if err := processvariable.CaseExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "case_execution_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.case_execution_id": %w`, err)}
		}
	}
	if v, ok := pvc.mutation.CaseInstanceID(); ok {
		if err := processvariable.CaseInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "case_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.case_instance_id": %w`, err)}
		}
	}
	if v, ok := pvc.mutation.ActivityInstanceID(); ok {
		if err := processvariable.ActivityInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "activity_instance_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.activity_instance_id": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ProcessVariable.tenant_id"`)}
	}
	if v, ok := pvc.mutation.TenantID(); ok {
		if err := processvariable.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.tenant_id": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.SequenceCounter(); !ok {
		return &ValidationError{Name: "sequence_counter", err: errors.New(`ent: missing required field "ProcessVariable.sequence_counter"`)}
	}
	if _, ok := pvc.mutation.ConcurrentLocal(); !ok {
		return &ValidationError{Name: "concurrent_local", err: errors.New(`ent: missing required field "ProcessVariable.concurrent_local"`)}
	}
	if v, ok := pvc.mutation.ScopeID(); ok {
		if err := processvariable.ScopeIDValidator(v); err != nil {
			return &ValidationError{Name: "scope_id", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.scope_id": %w`, err)}
		}
	}
	if v, ok := pvc.mutation.ScopeType(); ok {
		if err := processvariable.ScopeTypeValidator(v); err != nil {
			return &ValidationError{Name: "scope_type", err: fmt.Errorf(`ent: validator failed for field "ProcessVariable.scope_type": %w`, err)}
		}
	}
	if _, ok := pvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessVariable.created_at"`)}
	}
	if _, ok := pvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProcessVariable.updated_at"`)}
	}
	return nil
}

func (pvc *ProcessVariableCreate) sqlSave(ctx context.Context) (*ProcessVariable, error) {
	if err := pvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pvc.mutation.id = &_node.ID
	pvc.mutation.done = true
	return _node, nil
}

func (pvc *ProcessVariableCreate) createSpec() (*ProcessVariable, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessVariable{config: pvc.config}
		_spec = sqlgraph.NewCreateSpec(processvariable.Table, sqlgraph.NewFieldSpec(processvariable.FieldID, field.TypeInt64))
	)
	if id, ok := pvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pvc.mutation.Name(); ok {
		_spec.SetField(processvariable.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pvc.mutation.GetType(); ok {
		_spec.SetField(processvariable.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := pvc.mutation.TextValue(); ok {
		_spec.SetField(processvariable.FieldTextValue, field.TypeString, value)
		_node.TextValue = value
	}
	if value, ok := pvc.mutation.TextValue2(); ok {
		_spec.SetField(processvariable.FieldTextValue2, field.TypeString, value)
		_node.TextValue2 = value
	}
	if value, ok := pvc.mutation.LongValue(); ok {
		_spec.SetField(processvariable.FieldLongValue, field.TypeInt64, value)
		_node.LongValue = value
	}
	if value, ok := pvc.mutation.DoubleValue(); ok {
		_spec.SetField(processvariable.FieldDoubleValue, field.TypeFloat64, value)
		_node.DoubleValue = value
	}
	if value, ok := pvc.mutation.ByteArrayValue(); ok {
		_spec.SetField(processvariable.FieldByteArrayValue, field.TypeBytes, value)
		_node.ByteArrayValue = value
	}
	if value, ok := pvc.mutation.ExecutionID(); ok {
		_spec.SetField(processvariable.FieldExecutionID, field.TypeString, value)
		_node.ExecutionID = value
	}
	if value, ok := pvc.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processvariable.FieldProcessInstanceID, field.TypeInt64, value)
		_node.ProcessInstanceID = value
	}
	if value, ok := pvc.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(processvariable.FieldProcessDefinitionID, field.TypeInt64, value)
		_node.ProcessDefinitionID = value
	}
	if value, ok := pvc.mutation.CaseExecutionID(); ok {
		_spec.SetField(processvariable.FieldCaseExecutionID, field.TypeString, value)
		_node.CaseExecutionID = value
	}
	if value, ok := pvc.mutation.CaseInstanceID(); ok {
		_spec.SetField(processvariable.FieldCaseInstanceID, field.TypeString, value)
		_node.CaseInstanceID = value
	}
	if value, ok := pvc.mutation.TaskID(); ok {
		_spec.SetField(processvariable.FieldTaskID, field.TypeInt64, value)
		_node.TaskID = value
	}
	if value, ok := pvc.mutation.ActivityInstanceID(); ok {
		_spec.SetField(processvariable.FieldActivityInstanceID, field.TypeString, value)
		_node.ActivityInstanceID = value
	}
	if value, ok := pvc.mutation.TenantID(); ok {
		_spec.SetField(processvariable.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := pvc.mutation.SequenceCounter(); ok {
		_spec.SetField(processvariable.FieldSequenceCounter, field.TypeInt32, value)
		_node.SequenceCounter = value
	}
	if value, ok := pvc.mutation.ConcurrentLocal(); ok {
		_spec.SetField(processvariable.FieldConcurrentLocal, field.TypeBool, value)
		_node.ConcurrentLocal = value
	}
	if value, ok := pvc.mutation.ScopeID(); ok {
		_spec.SetField(processvariable.FieldScopeID, field.TypeString, value)
		_node.ScopeID = value
	}
	if value, ok := pvc.mutation.ScopeType(); ok {
		_spec.SetField(processvariable.FieldScopeType, field.TypeString, value)
		_node.ScopeType = value
	}
	if value, ok := pvc.mutation.CreatedAt(); ok {
		_spec.SetField(processvariable.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pvc.mutation.UpdatedAt(); ok {
		_spec.SetField(processvariable.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ProcessVariableCreateBulk is the builder for creating many ProcessVariable entities in bulk.
type ProcessVariableCreateBulk struct {
	config
	err      error
	builders []*ProcessVariableCreate
}

// Save creates the ProcessVariable entities in the database.
func (pvcb *ProcessVariableCreateBulk) Save(ctx context.Context) ([]*ProcessVariable, error) {
	if pvcb.err != nil {
		return nil, pvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pvcb.builders))
	nodes := make([]*ProcessVariable, len(pvcb.builders))
	mutators := make([]Mutator, len(pvcb.builders))
	for i := range pvcb.builders {
		func(i int, root context.Context) {
			builder := pvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessVariableMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pvcb *ProcessVariableCreateBulk) SaveX(ctx context.Context) []*ProcessVariable {
	v, err := pvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvcb *ProcessVariableCreateBulk) Exec(ctx context.Context) error {
	_, err := pvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvcb *ProcessVariableCreateBulk) ExecX(ctx context.Context) {
	if err := pvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
