// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/historicprocessinstance"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/predicate"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processdefinition"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processevent"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processinstance"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processvariable"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/taskinstance"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeHistoricProcessInstance = "HistoricProcessInstance"
	TypeProcessDefinition       = "ProcessDefinition"
	TypeProcessEvent            = "ProcessEvent"
	TypeProcessInstance         = "ProcessInstance"
	TypeProcessVariable         = "ProcessVariable"
	TypeTaskInstance            = "TaskInstance"
)

// HistoricProcessInstanceMutation represents an operation that mutates the HistoricProcessInstance nodes in the graph.
type HistoricProcessInstanceMutation struct {
	config
	op                            Op
	typ                           string
	id                            *int64
	process_instance_id           *string
	business_key                  *string
	process_definition_id         *int64
	addprocess_definition_id      *int64
	process_definition_key        *string
	process_definition_name       *string
	process_definition_version    *int32
	addprocess_definition_version *int32
	deployment_id                 *string
	start_user_id                 *string
	start_time                    *time.Time
	end_time                      *time.Time
	duration                      *int64
	addduration                   *int64
	start_activity_id             *string
	end_activity_id               *string
	super_process_instance_id     *string
	root_process_instance_id      *string
	super_case_instance_id        *string
	case_instance_id              *string
	delete_reason                 *string
	tenant_id                     *string
	state                         *string
	removal_time                  *string
	created_at                    *time.Time
	updated_at                    *time.Time
	clearedFields                 map[string]struct{}
	done                          bool
	oldValue                      func(context.Context) (*HistoricProcessInstance, error)
	predicates                    []predicate.HistoricProcessInstance
}

var _ ent.Mutation = (*HistoricProcessInstanceMutation)(nil)

// historicprocessinstanceOption allows management of the mutation configuration using functional options.
type historicprocessinstanceOption func(*HistoricProcessInstanceMutation)

// newHistoricProcessInstanceMutation creates new mutation for the HistoricProcessInstance entity.
func newHistoricProcessInstanceMutation(c config, op Op, opts ...historicprocessinstanceOption) *HistoricProcessInstanceMutation {
	m := &HistoricProcessInstanceMutation{
		config:        c,
		op:            op,
		typ:           TypeHistoricProcessInstance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHistoricProcessInstanceID sets the ID field of the mutation.
func withHistoricProcessInstanceID(id int64) historicprocessinstanceOption {
	return func(m *HistoricProcessInstanceMutation) {
		var (
			err   error
			once  sync.Once
			value *HistoricProcessInstance
		)
		m.oldValue = func(ctx context.Context) (*HistoricProcessInstance, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HistoricProcessInstance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHistoricProcessInstance sets the old HistoricProcessInstance of the mutation.
func withHistoricProcessInstance(node *HistoricProcessInstance) historicprocessinstanceOption {
	return func(m *HistoricProcessInstanceMutation) {
		m.oldValue = func(context.Context) (*HistoricProcessInstance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HistoricProcessInstanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HistoricProcessInstanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of HistoricProcessInstance entities.
func (m *HistoricProcessInstanceMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HistoricProcessInstanceMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HistoricProcessInstanceMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HistoricProcessInstance.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (m *HistoricProcessInstanceMutation) SetProcessInstanceID(s string) {
	m.process_instance_id = &s
}

// ProcessInstanceID returns the value of the "process_instance_id" field in the mutation.
func (m *HistoricProcessInstanceMutation) ProcessInstanceID() (r string, exists bool) {
	v := m.process_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessInstanceID returns the old "process_instance_id" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldProcessInstanceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessInstanceID: %w", err)
	}
	return oldValue.ProcessInstanceID, nil
}

// ResetProcessInstanceID resets all changes to the "process_instance_id" field.
func (m *HistoricProcessInstanceMutation) ResetProcessInstanceID() {
	m.process_instance_id = nil
}

// SetBusinessKey sets the "business_key" field.
func (m *HistoricProcessInstanceMutation) SetBusinessKey(s string) {
	m.business_key = &s
}

// BusinessKey returns the value of the "business_key" field in the mutation.
func (m *HistoricProcessInstanceMutation) BusinessKey() (r string, exists bool) {
	v := m.business_key
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessKey returns the old "business_key" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldBusinessKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBusinessKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBusinessKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessKey: %w", err)
	}
	return oldValue.BusinessKey, nil
}

// ClearBusinessKey clears the value of the "business_key" field.
func (m *HistoricProcessInstanceMutation) ClearBusinessKey() {
	m.business_key = nil
	m.clearedFields[historicprocessinstance.FieldBusinessKey] = struct{}{}
}

// BusinessKeyCleared returns if the "business_key" field was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) BusinessKeyCleared() bool {
	_, ok := m.clearedFields[historicprocessinstance.FieldBusinessKey]
	return ok
}

// ResetBusinessKey resets all changes to the "business_key" field.
func (m *HistoricProcessInstanceMutation) ResetBusinessKey() {
	m.business_key = nil
	delete(m.clearedFields, historicprocessinstance.FieldBusinessKey)
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (m *HistoricProcessInstanceMutation) SetProcessDefinitionID(i int64) {
	m.process_definition_id = &i
	m.addprocess_definition_id = nil
}

// ProcessDefinitionID returns the value of the "process_definition_id" field in the mutation.
func (m *HistoricProcessInstanceMutation) ProcessDefinitionID() (r int64, exists bool) {
	v := m.process_definition_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessDefinitionID returns the old "process_definition_id" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldProcessDefinitionID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessDefinitionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessDefinitionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessDefinitionID: %w", err)
	}
	return oldValue.ProcessDefinitionID, nil
}

// AddProcessDefinitionID adds i to the "process_definition_id" field.
func (m *HistoricProcessInstanceMutation) AddProcessDefinitionID(i int64) {
	if m.addprocess_definition_id != nil {
		*m.addprocess_definition_id += i
	} else {
		m.addprocess_definition_id = &i
	}
}

// AddedProcessDefinitionID returns the value that was added to the "process_definition_id" field in this mutation.
func (m *HistoricProcessInstanceMutation) AddedProcessDefinitionID() (r int64, exists bool) {
	v := m.addprocess_definition_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProcessDefinitionID resets all changes to the "process_definition_id" field.
func (m *HistoricProcessInstanceMutation) ResetProcessDefinitionID() {
	m.process_definition_id = nil
	m.addprocess_definition_id = nil
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (m *HistoricProcessInstanceMutation) SetProcessDefinitionKey(s string) {
	m.process_definition_key = &s
}

// ProcessDefinitionKey returns the value of the "process_definition_key" field in the mutation.
func (m *HistoricProcessInstanceMutation) ProcessDefinitionKey() (r string, exists bool) {
	v := m.process_definition_key
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessDefinitionKey returns the old "process_definition_key" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldProcessDefinitionKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessDefinitionKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessDefinitionKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessDefinitionKey: %w", err)
	}
	return oldValue.ProcessDefinitionKey, nil
}

// ResetProcessDefinitionKey resets all changes to the "process_definition_key" field.
func (m *HistoricProcessInstanceMutation) ResetProcessDefinitionKey() {
	m.process_definition_key = nil
}

// SetProcessDefinitionName sets the "process_definition_name" field.
func (m *HistoricProcessInstanceMutation) SetProcessDefinitionName(s string) {
	m.process_definition_name = &s
}

// ProcessDefinitionName returns the value of the "process_definition_name" field in the mutation.
func (m *HistoricProcessInstanceMutation) ProcessDefinitionName() (r string, exists bool) {
	v := m.process_definition_name
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessDefinitionName returns the old "process_definition_name" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldProcessDefinitionName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessDefinitionName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessDefinitionName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessDefinitionName: %w", err)
	}
	return oldValue.ProcessDefinitionName, nil
}

// ClearProcessDefinitionName clears the value of the "process_definition_name" field.
func (m *HistoricProcessInstanceMutation) ClearProcessDefinitionName() {
	m.process_definition_name = nil
	m.clearedFields[historicprocessinstance.FieldProcessDefinitionName] = struct{}{}
}

// ProcessDefinitionNameCleared returns if the "process_definition_name" field was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) ProcessDefinitionNameCleared() bool {
	_, ok := m.clearedFields[historicprocessinstance.FieldProcessDefinitionName]
	return ok
}

// ResetProcessDefinitionName resets all changes to the "process_definition_name" field.
func (m *HistoricProcessInstanceMutation) ResetProcessDefinitionName() {
	m.process_definition_name = nil
	delete(m.clearedFields, historicprocessinstance.FieldProcessDefinitionName)
}

// SetProcessDefinitionVersion sets the "process_definition_version" field.
func (m *HistoricProcessInstanceMutation) SetProcessDefinitionVersion(i int32) {
	m.process_definition_version = &i
	m.addprocess_definition_version = nil
}

// ProcessDefinitionVersion returns the value of the "process_definition_version" field in the mutation.
func (m *HistoricProcessInstanceMutation) ProcessDefinitionVersion() (r int32, exists bool) {
	v := m.process_definition_version
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessDefinitionVersion returns the old "process_definition_version" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldProcessDefinitionVersion(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessDefinitionVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessDefinitionVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessDefinitionVersion: %w", err)
	}
	return oldValue.ProcessDefinitionVersion, nil
}

// AddProcessDefinitionVersion adds i to the "process_definition_version" field.
func (m *HistoricProcessInstanceMutation) AddProcessDefinitionVersion(i int32) {
	if m.addprocess_definition_version != nil {
		*m.addprocess_definition_version += i
	} else {
		m.addprocess_definition_version = &i
	}
}

// AddedProcessDefinitionVersion returns the value that was added to the "process_definition_version" field in this mutation.
func (m *HistoricProcessInstanceMutation) AddedProcessDefinitionVersion() (r int32, exists bool) {
	v := m.addprocess_definition_version
	if v == nil {
		return
	}
	return *v, true
}

// ResetProcessDefinitionVersion resets all changes to the "process_definition_version" field.
func (m *HistoricProcessInstanceMutation) ResetProcessDefinitionVersion() {
	m.process_definition_version = nil
	m.addprocess_definition_version = nil
}

// SetDeploymentID sets the "deployment_id" field.
func (m *HistoricProcessInstanceMutation) SetDeploymentID(s string) {
	m.deployment_id = &s
}

// DeploymentID returns the value of the "deployment_id" field in the mutation.
func (m *HistoricProcessInstanceMutation) DeploymentID() (r string, exists bool) {
	v := m.deployment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDeploymentID returns the old "deployment_id" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldDeploymentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeploymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeploymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeploymentID: %w", err)
	}
	return oldValue.DeploymentID, nil
}

// ClearDeploymentID clears the value of the "deployment_id" field.
func (m *HistoricProcessInstanceMutation) ClearDeploymentID() {
	m.deployment_id = nil
	m.clearedFields[historicprocessinstance.FieldDeploymentID] = struct{}{}
}

// DeploymentIDCleared returns if the "deployment_id" field was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) DeploymentIDCleared() bool {
	_, ok := m.clearedFields[historicprocessinstance.FieldDeploymentID]
	return ok
}

// ResetDeploymentID resets all changes to the "deployment_id" field.
func (m *HistoricProcessInstanceMutation) ResetDeploymentID() {
	m.deployment_id = nil
	delete(m.clearedFields, historicprocessinstance.FieldDeploymentID)
}

// SetStartUserID sets the "start_user_id" field.
func (m *HistoricProcessInstanceMutation) SetStartUserID(s string) {
	m.start_user_id = &s
}

// StartUserID returns the value of the "start_user_id" field in the mutation.
func (m *HistoricProcessInstanceMutation) StartUserID() (r string, exists bool) {
	v := m.start_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStartUserID returns the old "start_user_id" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldStartUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartUserID: %w", err)
	}
	return oldValue.StartUserID, nil
}

// ClearStartUserID clears the value of the "start_user_id" field.
func (m *HistoricProcessInstanceMutation) ClearStartUserID() {
	m.start_user_id = nil
	m.clearedFields[historicprocessinstance.FieldStartUserID] = struct{}{}
}

// StartUserIDCleared returns if the "start_user_id" field was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) StartUserIDCleared() bool {
	_, ok := m.clearedFields[historicprocessinstance.FieldStartUserID]
	return ok
}

// ResetStartUserID resets all changes to the "start_user_id" field.
func (m *HistoricProcessInstanceMutation) ResetStartUserID() {
	m.start_user_id = nil
	delete(m.clearedFields, historicprocessinstance.FieldStartUserID)
}

// SetStartTime sets the "start_time" field.
func (m *HistoricProcessInstanceMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *HistoricProcessInstanceMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *HistoricProcessInstanceMutation) ResetStartTime() {
	m.start_time = nil
}

// SetEndTime sets the "end_time" field.
func (m *HistoricProcessInstanceMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *HistoricProcessInstanceMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldEndTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ClearEndTime clears the value of the "end_time" field.
func (m *HistoricProcessInstanceMutation) ClearEndTime() {
	m.end_time = nil
	m.clearedFields[historicprocessinstance.FieldEndTime] = struct{}{}
}

// EndTimeCleared returns if the "end_time" field was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) EndTimeCleared() bool {
	_, ok := m.clearedFields[historicprocessinstance.FieldEndTime]
	return ok
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *HistoricProcessInstanceMutation) ResetEndTime() {
	m.end_time = nil
	delete(m.clearedFields, historicprocessinstance.FieldEndTime)
}

// SetDuration sets the "duration" field.
func (m *HistoricProcessInstanceMutation) SetDuration(i int64) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *HistoricProcessInstanceMutation) Duration() (r int64, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldDuration(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *HistoricProcessInstanceMutation) AddDuration(i int64) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *HistoricProcessInstanceMutation) AddedDuration() (r int64, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ClearDuration clears the value of the "duration" field.
func (m *HistoricProcessInstanceMutation) ClearDuration() {
	m.duration = nil
	m.addduration = nil
	m.clearedFields[historicprocessinstance.FieldDuration] = struct{}{}
}

// DurationCleared returns if the "duration" field was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) DurationCleared() bool {
	_, ok := m.clearedFields[historicprocessinstance.FieldDuration]
	return ok
}

// ResetDuration resets all changes to the "duration" field.
func (m *HistoricProcessInstanceMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
	delete(m.clearedFields, historicprocessinstance.FieldDuration)
}

// SetStartActivityID sets the "start_activity_id" field.
func (m *HistoricProcessInstanceMutation) SetStartActivityID(s string) {
	m.start_activity_id = &s
}

// StartActivityID returns the value of the "start_activity_id" field in the mutation.
func (m *HistoricProcessInstanceMutation) StartActivityID() (r string, exists bool) {
	v := m.start_activity_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStartActivityID returns the old "start_activity_id" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldStartActivityID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartActivityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartActivityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartActivityID: %w", err)
	}
	return oldValue.StartActivityID, nil
}

// ClearStartActivityID clears the value of the "start_activity_id" field.
func (m *HistoricProcessInstanceMutation) ClearStartActivityID() {
	m.start_activity_id = nil
	m.clearedFields[historicprocessinstance.FieldStartActivityID] = struct{}{}
}

// StartActivityIDCleared returns if the "start_activity_id" field was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) StartActivityIDCleared() bool {
	_, ok := m.clearedFields[historicprocessinstance.FieldStartActivityID]
	return ok
}

// ResetStartActivityID resets all changes to the "start_activity_id" field.
func (m *HistoricProcessInstanceMutation) ResetStartActivityID() {
	m.start_activity_id = nil
	delete(m.clearedFields, historicprocessinstance.FieldStartActivityID)
}

// SetEndActivityID sets the "end_activity_id" field.
func (m *HistoricProcessInstanceMutation) SetEndActivityID(s string) {
	m.end_activity_id = &s
}

// EndActivityID returns the value of the "end_activity_id" field in the mutation.
func (m *HistoricProcessInstanceMutation) EndActivityID() (r string, exists bool) {
	v := m.end_activity_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEndActivityID returns the old "end_activity_id" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldEndActivityID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndActivityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndActivityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndActivityID: %w", err)
	}
	return oldValue.EndActivityID, nil
}

// ClearEndActivityID clears the value of the "end_activity_id" field.
func (m *HistoricProcessInstanceMutation) ClearEndActivityID() {
	m.end_activity_id = nil
	m.clearedFields[historicprocessinstance.FieldEndActivityID] = struct{}{}
}

// EndActivityIDCleared returns if the "end_activity_id" field was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) EndActivityIDCleared() bool {
	_, ok := m.clearedFields[historicprocessinstance.FieldEndActivityID]
	return ok
}

// ResetEndActivityID resets all changes to the "end_activity_id" field.
func (m *HistoricProcessInstanceMutation) ResetEndActivityID() {
	m.end_activity_id = nil
	delete(m.clearedFields, historicprocessinstance.FieldEndActivityID)
}

// SetSuperProcessInstanceID sets the "super_process_instance_id" field.
func (m *HistoricProcessInstanceMutation) SetSuperProcessInstanceID(s string) {
	m.super_process_instance_id = &s
}

// SuperProcessInstanceID returns the value of the "super_process_instance_id" field in the mutation.
func (m *HistoricProcessInstanceMutation) SuperProcessInstanceID() (r string, exists bool) {
	v := m.super_process_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSuperProcessInstanceID returns the old "super_process_instance_id" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldSuperProcessInstanceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuperProcessInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuperProcessInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuperProcessInstanceID: %w", err)
	}
	return oldValue.SuperProcessInstanceID, nil
}

// ClearSuperProcessInstanceID clears the value of the "super_process_instance_id" field.
func (m *HistoricProcessInstanceMutation) ClearSuperProcessInstanceID() {
	m.super_process_instance_id = nil
	m.clearedFields[historicprocessinstance.FieldSuperProcessInstanceID] = struct{}{}
}

// SuperProcessInstanceIDCleared returns if the "super_process_instance_id" field was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) SuperProcessInstanceIDCleared() bool {
	_, ok := m.clearedFields[historicprocessinstance.FieldSuperProcessInstanceID]
	return ok
}

// ResetSuperProcessInstanceID resets all changes to the "super_process_instance_id" field.
func (m *HistoricProcessInstanceMutation) ResetSuperProcessInstanceID() {
	m.super_process_instance_id = nil
	delete(m.clearedFields, historicprocessinstance.FieldSuperProcessInstanceID)
}

// SetRootProcessInstanceID sets the "root_process_instance_id" field.
func (m *HistoricProcessInstanceMutation) SetRootProcessInstanceID(s string) {
	m.root_process_instance_id = &s
}

// RootProcessInstanceID returns the value of the "root_process_instance_id" field in the mutation.
func (m *HistoricProcessInstanceMutation) RootProcessInstanceID() (r string, exists bool) {
	v := m.root_process_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRootProcessInstanceID returns the old "root_process_instance_id" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldRootProcessInstanceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRootProcessInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRootProcessInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRootProcessInstanceID: %w", err)
	}
	return oldValue.RootProcessInstanceID, nil
}

// ClearRootProcessInstanceID clears the value of the "root_process_instance_id" field.
func (m *HistoricProcessInstanceMutation) ClearRootProcessInstanceID() {
	m.root_process_instance_id = nil
	m.clearedFields[historicprocessinstance.FieldRootProcessInstanceID] = struct{}{}
}

// RootProcessInstanceIDCleared returns if the "root_process_instance_id" field was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) RootProcessInstanceIDCleared() bool {
	_, ok := m.clearedFields[historicprocessinstance.FieldRootProcessInstanceID]
	return ok
}

// ResetRootProcessInstanceID resets all changes to the "root_process_instance_id" field.
func (m *HistoricProcessInstanceMutation) ResetRootProcessInstanceID() {
	m.root_process_instance_id = nil
	delete(m.clearedFields, historicprocessinstance.FieldRootProcessInstanceID)
}

// SetSuperCaseInstanceID sets the "super_case_instance_id" field.
func (m *HistoricProcessInstanceMutation) SetSuperCaseInstanceID(s string) {
	m.super_case_instance_id = &s
}

// SuperCaseInstanceID returns the value of the "super_case_instance_id" field in the mutation.
func (m *HistoricProcessInstanceMutation) SuperCaseInstanceID() (r string, exists bool) {
	v := m.super_case_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSuperCaseInstanceID returns the old "super_case_instance_id" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldSuperCaseInstanceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuperCaseInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuperCaseInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuperCaseInstanceID: %w", err)
	}
	return oldValue.SuperCaseInstanceID, nil
}

// ClearSuperCaseInstanceID clears the value of the "super_case_instance_id" field.
func (m *HistoricProcessInstanceMutation) ClearSuperCaseInstanceID() {
	m.super_case_instance_id = nil
	m.clearedFields[historicprocessinstance.FieldSuperCaseInstanceID] = struct{}{}
}

// SuperCaseInstanceIDCleared returns if the "super_case_instance_id" field was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) SuperCaseInstanceIDCleared() bool {
	_, ok := m.clearedFields[historicprocessinstance.FieldSuperCaseInstanceID]
	return ok
}

// ResetSuperCaseInstanceID resets all changes to the "super_case_instance_id" field.
func (m *HistoricProcessInstanceMutation) ResetSuperCaseInstanceID() {
	m.super_case_instance_id = nil
	delete(m.clearedFields, historicprocessinstance.FieldSuperCaseInstanceID)
}

// SetCaseInstanceID sets the "case_instance_id" field.
func (m *HistoricProcessInstanceMutation) SetCaseInstanceID(s string) {
	m.case_instance_id = &s
}

// CaseInstanceID returns the value of the "case_instance_id" field in the mutation.
func (m *HistoricProcessInstanceMutation) CaseInstanceID() (r string, exists bool) {
	v := m.case_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCaseInstanceID returns the old "case_instance_id" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldCaseInstanceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCaseInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCaseInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCaseInstanceID: %w", err)
	}
	return oldValue.CaseInstanceID, nil
}

// ClearCaseInstanceID clears the value of the "case_instance_id" field.
func (m *HistoricProcessInstanceMutation) ClearCaseInstanceID() {
	m.case_instance_id = nil
	m.clearedFields[historicprocessinstance.FieldCaseInstanceID] = struct{}{}
}

// CaseInstanceIDCleared returns if the "case_instance_id" field was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) CaseInstanceIDCleared() bool {
	_, ok := m.clearedFields[historicprocessinstance.FieldCaseInstanceID]
	return ok
}

// ResetCaseInstanceID resets all changes to the "case_instance_id" field.
func (m *HistoricProcessInstanceMutation) ResetCaseInstanceID() {
	m.case_instance_id = nil
	delete(m.clearedFields, historicprocessinstance.FieldCaseInstanceID)
}

// SetDeleteReason sets the "delete_reason" field.
func (m *HistoricProcessInstanceMutation) SetDeleteReason(s string) {
	m.delete_reason = &s
}

// DeleteReason returns the value of the "delete_reason" field in the mutation.
func (m *HistoricProcessInstanceMutation) DeleteReason() (r string, exists bool) {
	v := m.delete_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteReason returns the old "delete_reason" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldDeleteReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteReason: %w", err)
	}
	return oldValue.DeleteReason, nil
}

// ClearDeleteReason clears the value of the "delete_reason" field.
func (m *HistoricProcessInstanceMutation) ClearDeleteReason() {
	m.delete_reason = nil
	m.clearedFields[historicprocessinstance.FieldDeleteReason] = struct{}{}
}

// DeleteReasonCleared returns if the "delete_reason" field was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) DeleteReasonCleared() bool {
	_, ok := m.clearedFields[historicprocessinstance.FieldDeleteReason]
	return ok
}

// ResetDeleteReason resets all changes to the "delete_reason" field.
func (m *HistoricProcessInstanceMutation) ResetDeleteReason() {
	m.delete_reason = nil
	delete(m.clearedFields, historicprocessinstance.FieldDeleteReason)
}

// SetTenantID sets the "tenant_id" field.
func (m *HistoricProcessInstanceMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *HistoricProcessInstanceMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *HistoricProcessInstanceMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetState sets the "state" field.
func (m *HistoricProcessInstanceMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *HistoricProcessInstanceMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ClearState clears the value of the "state" field.
func (m *HistoricProcessInstanceMutation) ClearState() {
	m.state = nil
	m.clearedFields[historicprocessinstance.FieldState] = struct{}{}
}

// StateCleared returns if the "state" field was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) StateCleared() bool {
	_, ok := m.clearedFields[historicprocessinstance.FieldState]
	return ok
}

// ResetState resets all changes to the "state" field.
func (m *HistoricProcessInstanceMutation) ResetState() {
	m.state = nil
	delete(m.clearedFields, historicprocessinstance.FieldState)
}

// SetRemovalTime sets the "removal_time" field.
func (m *HistoricProcessInstanceMutation) SetRemovalTime(s string) {
	m.removal_time = &s
}

// RemovalTime returns the value of the "removal_time" field in the mutation.
func (m *HistoricProcessInstanceMutation) RemovalTime() (r string, exists bool) {
	v := m.removal_time
	if v == nil {
		return
	}
	return *v, true
}

// OldRemovalTime returns the old "removal_time" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldRemovalTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemovalTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemovalTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemovalTime: %w", err)
	}
	return oldValue.RemovalTime, nil
}

// ClearRemovalTime clears the value of the "removal_time" field.
func (m *HistoricProcessInstanceMutation) ClearRemovalTime() {
	m.removal_time = nil
	m.clearedFields[historicprocessinstance.FieldRemovalTime] = struct{}{}
}

// RemovalTimeCleared returns if the "removal_time" field was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) RemovalTimeCleared() bool {
	_, ok := m.clearedFields[historicprocessinstance.FieldRemovalTime]
	return ok
}

// ResetRemovalTime resets all changes to the "removal_time" field.
func (m *HistoricProcessInstanceMutation) ResetRemovalTime() {
	m.removal_time = nil
	delete(m.clearedFields, historicprocessinstance.FieldRemovalTime)
}

// SetCreatedAt sets the "created_at" field.
func (m *HistoricProcessInstanceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *HistoricProcessInstanceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *HistoricProcessInstanceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *HistoricProcessInstanceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *HistoricProcessInstanceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the HistoricProcessInstance entity.
// If the HistoricProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistoricProcessInstanceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *HistoricProcessInstanceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the HistoricProcessInstanceMutation builder.
func (m *HistoricProcessInstanceMutation) Where(ps ...predicate.HistoricProcessInstance) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HistoricProcessInstanceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HistoricProcessInstanceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.HistoricProcessInstance, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HistoricProcessInstanceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HistoricProcessInstanceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (HistoricProcessInstance).
func (m *HistoricProcessInstanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HistoricProcessInstanceMutation) Fields() []string {
	fields := make([]string, 0, 23)
	if m.process_instance_id != nil {
		fields = append(fields, historicprocessinstance.FieldProcessInstanceID)
	}
	if m.business_key != nil {
		fields = append(fields, historicprocessinstance.FieldBusinessKey)
	}
	if m.process_definition_id != nil {
		fields = append(fields, historicprocessinstance.FieldProcessDefinitionID)
	}
	if m.process_definition_key != nil {
		fields = append(fields, historicprocessinstance.FieldProcessDefinitionKey)
	}
	if m.process_definition_name != nil {
		fields = append(fields, historicprocessinstance.FieldProcessDefinitionName)
	}
	if m.process_definition_version != nil {
		fields = append(fields, historicprocessinstance.FieldProcessDefinitionVersion)
	}
	if m.deployment_id != nil {
		fields = append(fields, historicprocessinstance.FieldDeploymentID)
	}
	if m.start_user_id != nil {
		fields = append(fields, historicprocessinstance.FieldStartUserID)
	}
	if m.start_time != nil {
		fields = append(fields, historicprocessinstance.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, historicprocessinstance.FieldEndTime)
	}
	if m.duration != nil {
		fields = append(fields, historicprocessinstance.FieldDuration)
	}
	if m.start_activity_id != nil {
		fields = append(fields, historicprocessinstance.FieldStartActivityID)
	}
	if m.end_activity_id != nil {
		fields = append(fields, historicprocessinstance.FieldEndActivityID)
	}
	if m.super_process_instance_id != nil {
		fields = append(fields, historicprocessinstance.FieldSuperProcessInstanceID)
	}
	if m.root_process_instance_id != nil {
		fields = append(fields, historicprocessinstance.FieldRootProcessInstanceID)
	}
	if m.super_case_instance_id != nil {
		fields = append(fields, historicprocessinstance.FieldSuperCaseInstanceID)
	}
	if m.case_instance_id != nil {
		fields = append(fields, historicprocessinstance.FieldCaseInstanceID)
	}
	if m.delete_reason != nil {
		fields = append(fields, historicprocessinstance.FieldDeleteReason)
	}
	if m.tenant_id != nil {
		fields = append(fields, historicprocessinstance.FieldTenantID)
	}
	if m.state != nil {
		fields = append(fields, historicprocessinstance.FieldState)
	}
	if m.removal_time != nil {
		fields = append(fields, historicprocessinstance.FieldRemovalTime)
	}
	if m.created_at != nil {
		fields = append(fields, historicprocessinstance.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, historicprocessinstance.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HistoricProcessInstanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case historicprocessinstance.FieldProcessInstanceID:
		return m.ProcessInstanceID()
	case historicprocessinstance.FieldBusinessKey:
		return m.BusinessKey()
	case historicprocessinstance.FieldProcessDefinitionID:
		return m.ProcessDefinitionID()
	case historicprocessinstance.FieldProcessDefinitionKey:
		return m.ProcessDefinitionKey()
	case historicprocessinstance.FieldProcessDefinitionName:
		return m.ProcessDefinitionName()
	case historicprocessinstance.FieldProcessDefinitionVersion:
		return m.ProcessDefinitionVersion()
	case historicprocessinstance.FieldDeploymentID:
		return m.DeploymentID()
	case historicprocessinstance.FieldStartUserID:
		return m.StartUserID()
	case historicprocessinstance.FieldStartTime:
		return m.StartTime()
	case historicprocessinstance.FieldEndTime:
		return m.EndTime()
	case historicprocessinstance.FieldDuration:
		return m.Duration()
	case historicprocessinstance.FieldStartActivityID:
		return m.StartActivityID()
	case historicprocessinstance.FieldEndActivityID:
		return m.EndActivityID()
	case historicprocessinstance.FieldSuperProcessInstanceID:
		return m.SuperProcessInstanceID()
	case historicprocessinstance.FieldRootProcessInstanceID:
		return m.RootProcessInstanceID()
	case historicprocessinstance.FieldSuperCaseInstanceID:
		return m.SuperCaseInstanceID()
	case historicprocessinstance.FieldCaseInstanceID:
		return m.CaseInstanceID()
	case historicprocessinstance.FieldDeleteReason:
		return m.DeleteReason()
	case historicprocessinstance.FieldTenantID:
		return m.TenantID()
	case historicprocessinstance.FieldState:
		return m.State()
	case historicprocessinstance.FieldRemovalTime:
		return m.RemovalTime()
	case historicprocessinstance.FieldCreatedAt:
		return m.CreatedAt()
	case historicprocessinstance.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HistoricProcessInstanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case historicprocessinstance.FieldProcessInstanceID:
		return m.OldProcessInstanceID(ctx)
	case historicprocessinstance.FieldBusinessKey:
		return m.OldBusinessKey(ctx)
	case historicprocessinstance.FieldProcessDefinitionID:
		return m.OldProcessDefinitionID(ctx)
	case historicprocessinstance.FieldProcessDefinitionKey:
		return m.OldProcessDefinitionKey(ctx)
	case historicprocessinstance.FieldProcessDefinitionName:
		return m.OldProcessDefinitionName(ctx)
	case historicprocessinstance.FieldProcessDefinitionVersion:
		return m.OldProcessDefinitionVersion(ctx)
	case historicprocessinstance.FieldDeploymentID:
		return m.OldDeploymentID(ctx)
	case historicprocessinstance.FieldStartUserID:
		return m.OldStartUserID(ctx)
	case historicprocessinstance.FieldStartTime:
		return m.OldStartTime(ctx)
	case historicprocessinstance.FieldEndTime:
		return m.OldEndTime(ctx)
	case historicprocessinstance.FieldDuration:
		return m.OldDuration(ctx)
	case historicprocessinstance.FieldStartActivityID:
		return m.OldStartActivityID(ctx)
	case historicprocessinstance.FieldEndActivityID:
		return m.OldEndActivityID(ctx)
	case historicprocessinstance.FieldSuperProcessInstanceID:
		return m.OldSuperProcessInstanceID(ctx)
	case historicprocessinstance.FieldRootProcessInstanceID:
		return m.OldRootProcessInstanceID(ctx)
	case historicprocessinstance.FieldSuperCaseInstanceID:
		return m.OldSuperCaseInstanceID(ctx)
	case historicprocessinstance.FieldCaseInstanceID:
		return m.OldCaseInstanceID(ctx)
	case historicprocessinstance.FieldDeleteReason:
		return m.OldDeleteReason(ctx)
	case historicprocessinstance.FieldTenantID:
		return m.OldTenantID(ctx)
	case historicprocessinstance.FieldState:
		return m.OldState(ctx)
	case historicprocessinstance.FieldRemovalTime:
		return m.OldRemovalTime(ctx)
	case historicprocessinstance.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case historicprocessinstance.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown HistoricProcessInstance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistoricProcessInstanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case historicprocessinstance.FieldProcessInstanceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessInstanceID(v)
		return nil
	case historicprocessinstance.FieldBusinessKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessKey(v)
		return nil
	case historicprocessinstance.FieldProcessDefinitionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessDefinitionID(v)
		return nil
	case historicprocessinstance.FieldProcessDefinitionKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessDefinitionKey(v)
		return nil
	case historicprocessinstance.FieldProcessDefinitionName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessDefinitionName(v)
		return nil
	case historicprocessinstance.FieldProcessDefinitionVersion:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessDefinitionVersion(v)
		return nil
	case historicprocessinstance.FieldDeploymentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeploymentID(v)
		return nil
	case historicprocessinstance.FieldStartUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartUserID(v)
		return nil
	case historicprocessinstance.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case historicprocessinstance.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case historicprocessinstance.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case historicprocessinstance.FieldStartActivityID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartActivityID(v)
		return nil
	case historicprocessinstance.FieldEndActivityID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndActivityID(v)
		return nil
	case historicprocessinstance.FieldSuperProcessInstanceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuperProcessInstanceID(v)
		return nil
	case historicprocessinstance.FieldRootProcessInstanceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRootProcessInstanceID(v)
		return nil
	case historicprocessinstance.FieldSuperCaseInstanceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuperCaseInstanceID(v)
		return nil
	case historicprocessinstance.FieldCaseInstanceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCaseInstanceID(v)
		return nil
	case historicprocessinstance.FieldDeleteReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteReason(v)
		return nil
	case historicprocessinstance.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case historicprocessinstance.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case historicprocessinstance.FieldRemovalTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemovalTime(v)
		return nil
	case historicprocessinstance.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case historicprocessinstance.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown HistoricProcessInstance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HistoricProcessInstanceMutation) AddedFields() []string {
	var fields []string
	if m.addprocess_definition_id != nil {
		fields = append(fields, historicprocessinstance.FieldProcessDefinitionID)
	}
	if m.addprocess_definition_version != nil {
		fields = append(fields, historicprocessinstance.FieldProcessDefinitionVersion)
	}
	if m.addduration != nil {
		fields = append(fields, historicprocessinstance.FieldDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HistoricProcessInstanceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case historicprocessinstance.FieldProcessDefinitionID:
		return m.AddedProcessDefinitionID()
	case historicprocessinstance.FieldProcessDefinitionVersion:
		return m.AddedProcessDefinitionVersion()
	case historicprocessinstance.FieldDuration:
		return m.AddedDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistoricProcessInstanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case historicprocessinstance.FieldProcessDefinitionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProcessDefinitionID(v)
		return nil
	case historicprocessinstance.FieldProcessDefinitionVersion:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProcessDefinitionVersion(v)
		return nil
	case historicprocessinstance.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	}
	return fmt.Errorf("unknown HistoricProcessInstance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HistoricProcessInstanceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(historicprocessinstance.FieldBusinessKey) {
		fields = append(fields, historicprocessinstance.FieldBusinessKey)
	}
	if m.FieldCleared(historicprocessinstance.FieldProcessDefinitionName) {
		fields = append(fields, historicprocessinstance.FieldProcessDefinitionName)
	}
	if m.FieldCleared(historicprocessinstance.FieldDeploymentID) {
		fields = append(fields, historicprocessinstance.FieldDeploymentID)
	}
	if m.FieldCleared(historicprocessinstance.FieldStartUserID) {
		fields = append(fields, historicprocessinstance.FieldStartUserID)
	}
	if m.FieldCleared(historicprocessinstance.FieldEndTime) {
		fields = append(fields, historicprocessinstance.FieldEndTime)
	}
	if m.FieldCleared(historicprocessinstance.FieldDuration) {
		fields = append(fields, historicprocessinstance.FieldDuration)
	}
	if m.FieldCleared(historicprocessinstance.FieldStartActivityID) {
		fields = append(fields, historicprocessinstance.FieldStartActivityID)
	}
	if m.FieldCleared(historicprocessinstance.FieldEndActivityID) {
		fields = append(fields, historicprocessinstance.FieldEndActivityID)
	}
	if m.FieldCleared(historicprocessinstance.FieldSuperProcessInstanceID) {
		fields = append(fields, historicprocessinstance.FieldSuperProcessInstanceID)
	}
	if m.FieldCleared(historicprocessinstance.FieldRootProcessInstanceID) {
		fields = append(fields, historicprocessinstance.FieldRootProcessInstanceID)
	}
	if m.FieldCleared(historicprocessinstance.FieldSuperCaseInstanceID) {
		fields = append(fields, historicprocessinstance.FieldSuperCaseInstanceID)
	}
	if m.FieldCleared(historicprocessinstance.FieldCaseInstanceID) {
		fields = append(fields, historicprocessinstance.FieldCaseInstanceID)
	}
	if m.FieldCleared(historicprocessinstance.FieldDeleteReason) {
		fields = append(fields, historicprocessinstance.FieldDeleteReason)
	}
	if m.FieldCleared(historicprocessinstance.FieldState) {
		fields = append(fields, historicprocessinstance.FieldState)
	}
	if m.FieldCleared(historicprocessinstance.FieldRemovalTime) {
		fields = append(fields, historicprocessinstance.FieldRemovalTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HistoricProcessInstanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HistoricProcessInstanceMutation) ClearField(name string) error {
	switch name {
	case historicprocessinstance.FieldBusinessKey:
		m.ClearBusinessKey()
		return nil
	case historicprocessinstance.FieldProcessDefinitionName:
		m.ClearProcessDefinitionName()
		return nil
	case historicprocessinstance.FieldDeploymentID:
		m.ClearDeploymentID()
		return nil
	case historicprocessinstance.FieldStartUserID:
		m.ClearStartUserID()
		return nil
	case historicprocessinstance.FieldEndTime:
		m.ClearEndTime()
		return nil
	case historicprocessinstance.FieldDuration:
		m.ClearDuration()
		return nil
	case historicprocessinstance.FieldStartActivityID:
		m.ClearStartActivityID()
		return nil
	case historicprocessinstance.FieldEndActivityID:
		m.ClearEndActivityID()
		return nil
	case historicprocessinstance.FieldSuperProcessInstanceID:
		m.ClearSuperProcessInstanceID()
		return nil
	case historicprocessinstance.FieldRootProcessInstanceID:
		m.ClearRootProcessInstanceID()
		return nil
	case historicprocessinstance.FieldSuperCaseInstanceID:
		m.ClearSuperCaseInstanceID()
		return nil
	case historicprocessinstance.FieldCaseInstanceID:
		m.ClearCaseInstanceID()
		return nil
	case historicprocessinstance.FieldDeleteReason:
		m.ClearDeleteReason()
		return nil
	case historicprocessinstance.FieldState:
		m.ClearState()
		return nil
	case historicprocessinstance.FieldRemovalTime:
		m.ClearRemovalTime()
		return nil
	}
	return fmt.Errorf("unknown HistoricProcessInstance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HistoricProcessInstanceMutation) ResetField(name string) error {
	switch name {
	case historicprocessinstance.FieldProcessInstanceID:
		m.ResetProcessInstanceID()
		return nil
	case historicprocessinstance.FieldBusinessKey:
		m.ResetBusinessKey()
		return nil
	case historicprocessinstance.FieldProcessDefinitionID:
		m.ResetProcessDefinitionID()
		return nil
	case historicprocessinstance.FieldProcessDefinitionKey:
		m.ResetProcessDefinitionKey()
		return nil
	case historicprocessinstance.FieldProcessDefinitionName:
		m.ResetProcessDefinitionName()
		return nil
	case historicprocessinstance.FieldProcessDefinitionVersion:
		m.ResetProcessDefinitionVersion()
		return nil
	case historicprocessinstance.FieldDeploymentID:
		m.ResetDeploymentID()
		return nil
	case historicprocessinstance.FieldStartUserID:
		m.ResetStartUserID()
		return nil
	case historicprocessinstance.FieldStartTime:
		m.ResetStartTime()
		return nil
	case historicprocessinstance.FieldEndTime:
		m.ResetEndTime()
		return nil
	case historicprocessinstance.FieldDuration:
		m.ResetDuration()
		return nil
	case historicprocessinstance.FieldStartActivityID:
		m.ResetStartActivityID()
		return nil
	case historicprocessinstance.FieldEndActivityID:
		m.ResetEndActivityID()
		return nil
	case historicprocessinstance.FieldSuperProcessInstanceID:
		m.ResetSuperProcessInstanceID()
		return nil
	case historicprocessinstance.FieldRootProcessInstanceID:
		m.ResetRootProcessInstanceID()
		return nil
	case historicprocessinstance.FieldSuperCaseInstanceID:
		m.ResetSuperCaseInstanceID()
		return nil
	case historicprocessinstance.FieldCaseInstanceID:
		m.ResetCaseInstanceID()
		return nil
	case historicprocessinstance.FieldDeleteReason:
		m.ResetDeleteReason()
		return nil
	case historicprocessinstance.FieldTenantID:
		m.ResetTenantID()
		return nil
	case historicprocessinstance.FieldState:
		m.ResetState()
		return nil
	case historicprocessinstance.FieldRemovalTime:
		m.ResetRemovalTime()
		return nil
	case historicprocessinstance.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case historicprocessinstance.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown HistoricProcessInstance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HistoricProcessInstanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HistoricProcessInstanceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HistoricProcessInstanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HistoricProcessInstanceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HistoricProcessInstanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HistoricProcessInstanceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HistoricProcessInstanceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown HistoricProcessInstance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HistoricProcessInstanceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown HistoricProcessInstance edge %s", name)
}

// ProcessDefinitionMutation represents an operation that mutates the ProcessDefinition nodes in the graph.
type ProcessDefinitionMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	key            *string
	name           *string
	category       *string
	version        *int32
	addversion     *int32
	description    *string
	deploy_time    *time.Time
	resource       *string
	diagram_data   *map[string]interface{}
	has_start_form *bool
	suspended      *bool
	tenant_id      *string
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*ProcessDefinition, error)
	predicates     []predicate.ProcessDefinition
}

var _ ent.Mutation = (*ProcessDefinitionMutation)(nil)

// processdefinitionOption allows management of the mutation configuration using functional options.
type processdefinitionOption func(*ProcessDefinitionMutation)

// newProcessDefinitionMutation creates new mutation for the ProcessDefinition entity.
func newProcessDefinitionMutation(c config, op Op, opts ...processdefinitionOption) *ProcessDefinitionMutation {
	m := &ProcessDefinitionMutation{
		config:        c,
		op:            op,
		typ:           TypeProcessDefinition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProcessDefinitionID sets the ID field of the mutation.
func withProcessDefinitionID(id int64) processdefinitionOption {
	return func(m *ProcessDefinitionMutation) {
		var (
			err   error
			once  sync.Once
			value *ProcessDefinition
		)
		m.oldValue = func(ctx context.Context) (*ProcessDefinition, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProcessDefinition.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProcessDefinition sets the old ProcessDefinition of the mutation.
func withProcessDefinition(node *ProcessDefinition) processdefinitionOption {
	return func(m *ProcessDefinitionMutation) {
		m.oldValue = func(context.Context) (*ProcessDefinition, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProcessDefinitionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProcessDefinitionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProcessDefinition entities.
func (m *ProcessDefinitionMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProcessDefinitionMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProcessDefinitionMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProcessDefinition.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKey sets the "key" field.
func (m *ProcessDefinitionMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *ProcessDefinitionMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the ProcessDefinition entity.
// If the ProcessDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessDefinitionMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *ProcessDefinitionMutation) ResetKey() {
	m.key = nil
}

// SetName sets the "name" field.
func (m *ProcessDefinitionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProcessDefinitionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ProcessDefinition entity.
// If the ProcessDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessDefinitionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProcessDefinitionMutation) ResetName() {
	m.name = nil
}

// SetCategory sets the "category" field.
func (m *ProcessDefinitionMutation) SetCategory(s string) {
	m.category = &s
}

// Category returns the value of the "category" field in the mutation.
func (m *ProcessDefinitionMutation) Category() (r string, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the ProcessDefinition entity.
// If the ProcessDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessDefinitionMutation) OldCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ClearCategory clears the value of the "category" field.
func (m *ProcessDefinitionMutation) ClearCategory() {
	m.category = nil
	m.clearedFields[processdefinition.FieldCategory] = struct{}{}
}

// CategoryCleared returns if the "category" field was cleared in this mutation.
func (m *ProcessDefinitionMutation) CategoryCleared() bool {
	_, ok := m.clearedFields[processdefinition.FieldCategory]
	return ok
}

// ResetCategory resets all changes to the "category" field.
func (m *ProcessDefinitionMutation) ResetCategory() {
	m.category = nil
	delete(m.clearedFields, processdefinition.FieldCategory)
}

// SetVersion sets the "version" field.
func (m *ProcessDefinitionMutation) SetVersion(i int32) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *ProcessDefinitionMutation) Version() (r int32, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the ProcessDefinition entity.
// If the ProcessDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessDefinitionMutation) OldVersion(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *ProcessDefinitionMutation) AddVersion(i int32) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *ProcessDefinitionMutation) AddedVersion() (r int32, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *ProcessDefinitionMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetDescription sets the "description" field.
func (m *ProcessDefinitionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProcessDefinitionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ProcessDefinition entity.
// If the ProcessDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessDefinitionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ProcessDefinitionMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[processdefinition.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ProcessDefinitionMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[processdefinition.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ProcessDefinitionMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, processdefinition.FieldDescription)
}

// SetDeployTime sets the "deploy_time" field.
func (m *ProcessDefinitionMutation) SetDeployTime(t time.Time) {
	m.deploy_time = &t
}

// DeployTime returns the value of the "deploy_time" field in the mutation.
func (m *ProcessDefinitionMutation) DeployTime() (r time.Time, exists bool) {
	v := m.deploy_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeployTime returns the old "deploy_time" field's value of the ProcessDefinition entity.
// If the ProcessDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessDefinitionMutation) OldDeployTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeployTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeployTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeployTime: %w", err)
	}
	return oldValue.DeployTime, nil
}

// ResetDeployTime resets all changes to the "deploy_time" field.
func (m *ProcessDefinitionMutation) ResetDeployTime() {
	m.deploy_time = nil
}

// SetResource sets the "resource" field.
func (m *ProcessDefinitionMutation) SetResource(s string) {
	m.resource = &s
}

// Resource returns the value of the "resource" field in the mutation.
func (m *ProcessDefinitionMutation) Resource() (r string, exists bool) {
	v := m.resource
	if v == nil {
		return
	}
	return *v, true
}

// OldResource returns the old "resource" field's value of the ProcessDefinition entity.
// If the ProcessDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessDefinitionMutation) OldResource(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResource: %w", err)
	}
	return oldValue.Resource, nil
}

// ClearResource clears the value of the "resource" field.
func (m *ProcessDefinitionMutation) ClearResource() {
	m.resource = nil
	m.clearedFields[processdefinition.FieldResource] = struct{}{}
}

// ResourceCleared returns if the "resource" field was cleared in this mutation.
func (m *ProcessDefinitionMutation) ResourceCleared() bool {
	_, ok := m.clearedFields[processdefinition.FieldResource]
	return ok
}

// ResetResource resets all changes to the "resource" field.
func (m *ProcessDefinitionMutation) ResetResource() {
	m.resource = nil
	delete(m.clearedFields, processdefinition.FieldResource)
}

// SetDiagramData sets the "diagram_data" field.
func (m *ProcessDefinitionMutation) SetDiagramData(value map[string]interface{}) {
	m.diagram_data = &value
}

// DiagramData returns the value of the "diagram_data" field in the mutation.
func (m *ProcessDefinitionMutation) DiagramData() (r map[string]interface{}, exists bool) {
	v := m.diagram_data
	if v == nil {
		return
	}
	return *v, true
}

// OldDiagramData returns the old "diagram_data" field's value of the ProcessDefinition entity.
// If the ProcessDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessDefinitionMutation) OldDiagramData(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiagramData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiagramData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiagramData: %w", err)
	}
	return oldValue.DiagramData, nil
}

// ClearDiagramData clears the value of the "diagram_data" field.
func (m *ProcessDefinitionMutation) ClearDiagramData() {
	m.diagram_data = nil
	m.clearedFields[processdefinition.FieldDiagramData] = struct{}{}
}

// DiagramDataCleared returns if the "diagram_data" field was cleared in this mutation.
func (m *ProcessDefinitionMutation) DiagramDataCleared() bool {
	_, ok := m.clearedFields[processdefinition.FieldDiagramData]
	return ok
}

// ResetDiagramData resets all changes to the "diagram_data" field.
func (m *ProcessDefinitionMutation) ResetDiagramData() {
	m.diagram_data = nil
	delete(m.clearedFields, processdefinition.FieldDiagramData)
}

// SetHasStartForm sets the "has_start_form" field.
func (m *ProcessDefinitionMutation) SetHasStartForm(b bool) {
	m.has_start_form = &b
}

// HasStartForm returns the value of the "has_start_form" field in the mutation.
func (m *ProcessDefinitionMutation) HasStartForm() (r bool, exists bool) {
	v := m.has_start_form
	if v == nil {
		return
	}
	return *v, true
}

// OldHasStartForm returns the old "has_start_form" field's value of the ProcessDefinition entity.
// If the ProcessDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessDefinitionMutation) OldHasStartForm(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasStartForm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasStartForm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasStartForm: %w", err)
	}
	return oldValue.HasStartForm, nil
}

// ResetHasStartForm resets all changes to the "has_start_form" field.
func (m *ProcessDefinitionMutation) ResetHasStartForm() {
	m.has_start_form = nil
}

// SetSuspended sets the "suspended" field.
func (m *ProcessDefinitionMutation) SetSuspended(b bool) {
	m.suspended = &b
}

// Suspended returns the value of the "suspended" field in the mutation.
func (m *ProcessDefinitionMutation) Suspended() (r bool, exists bool) {
	v := m.suspended
	if v == nil {
		return
	}
	return *v, true
}

// OldSuspended returns the old "suspended" field's value of the ProcessDefinition entity.
// If the ProcessDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessDefinitionMutation) OldSuspended(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuspended is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuspended requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuspended: %w", err)
	}
	return oldValue.Suspended, nil
}

// ResetSuspended resets all changes to the "suspended" field.
func (m *ProcessDefinitionMutation) ResetSuspended() {
	m.suspended = nil
}

// SetTenantID sets the "tenant_id" field.
func (m *ProcessDefinitionMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *ProcessDefinitionMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the ProcessDefinition entity.
// If the ProcessDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessDefinitionMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *ProcessDefinitionMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProcessDefinitionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProcessDefinitionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProcessDefinition entity.
// If the ProcessDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessDefinitionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProcessDefinitionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProcessDefinitionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProcessDefinitionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProcessDefinition entity.
// If the ProcessDefinition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessDefinitionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProcessDefinitionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the ProcessDefinitionMutation builder.
func (m *ProcessDefinitionMutation) Where(ps ...predicate.ProcessDefinition) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProcessDefinitionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProcessDefinitionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProcessDefinition, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProcessDefinitionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProcessDefinitionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProcessDefinition).
func (m *ProcessDefinitionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProcessDefinitionMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.key != nil {
		fields = append(fields, processdefinition.FieldKey)
	}
	if m.name != nil {
		fields = append(fields, processdefinition.FieldName)
	}
	if m.category != nil {
		fields = append(fields, processdefinition.FieldCategory)
	}
	if m.version != nil {
		fields = append(fields, processdefinition.FieldVersion)
	}
	if m.description != nil {
		fields = append(fields, processdefinition.FieldDescription)
	}
	if m.deploy_time != nil {
		fields = append(fields, processdefinition.FieldDeployTime)
	}
	if m.resource != nil {
		fields = append(fields, processdefinition.FieldResource)
	}
	if m.diagram_data != nil {
		fields = append(fields, processdefinition.FieldDiagramData)
	}
	if m.has_start_form != nil {
		fields = append(fields, processdefinition.FieldHasStartForm)
	}
	if m.suspended != nil {
		fields = append(fields, processdefinition.FieldSuspended)
	}
	if m.tenant_id != nil {
		fields = append(fields, processdefinition.FieldTenantID)
	}
	if m.created_at != nil {
		fields = append(fields, processdefinition.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, processdefinition.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProcessDefinitionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case processdefinition.FieldKey:
		return m.Key()
	case processdefinition.FieldName:
		return m.Name()
	case processdefinition.FieldCategory:
		return m.Category()
	case processdefinition.FieldVersion:
		return m.Version()
	case processdefinition.FieldDescription:
		return m.Description()
	case processdefinition.FieldDeployTime:
		return m.DeployTime()
	case processdefinition.FieldResource:
		return m.Resource()
	case processdefinition.FieldDiagramData:
		return m.DiagramData()
	case processdefinition.FieldHasStartForm:
		return m.HasStartForm()
	case processdefinition.FieldSuspended:
		return m.Suspended()
	case processdefinition.FieldTenantID:
		return m.TenantID()
	case processdefinition.FieldCreatedAt:
		return m.CreatedAt()
	case processdefinition.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProcessDefinitionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case processdefinition.FieldKey:
		return m.OldKey(ctx)
	case processdefinition.FieldName:
		return m.OldName(ctx)
	case processdefinition.FieldCategory:
		return m.OldCategory(ctx)
	case processdefinition.FieldVersion:
		return m.OldVersion(ctx)
	case processdefinition.FieldDescription:
		return m.OldDescription(ctx)
	case processdefinition.FieldDeployTime:
		return m.OldDeployTime(ctx)
	case processdefinition.FieldResource:
		return m.OldResource(ctx)
	case processdefinition.FieldDiagramData:
		return m.OldDiagramData(ctx)
	case processdefinition.FieldHasStartForm:
		return m.OldHasStartForm(ctx)
	case processdefinition.FieldSuspended:
		return m.OldSuspended(ctx)
	case processdefinition.FieldTenantID:
		return m.OldTenantID(ctx)
	case processdefinition.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case processdefinition.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProcessDefinition field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcessDefinitionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case processdefinition.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case processdefinition.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case processdefinition.FieldCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case processdefinition.FieldVersion:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case processdefinition.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case processdefinition.FieldDeployTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeployTime(v)
		return nil
	case processdefinition.FieldResource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResource(v)
		return nil
	case processdefinition.FieldDiagramData:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiagramData(v)
		return nil
	case processdefinition.FieldHasStartForm:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasStartForm(v)
		return nil
	case processdefinition.FieldSuspended:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuspended(v)
		return nil
	case processdefinition.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case processdefinition.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case processdefinition.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProcessDefinition field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProcessDefinitionMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, processdefinition.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProcessDefinitionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case processdefinition.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcessDefinitionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case processdefinition.FieldVersion:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown ProcessDefinition numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProcessDefinitionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(processdefinition.FieldCategory) {
		fields = append(fields, processdefinition.FieldCategory)
	}
	if m.FieldCleared(processdefinition.FieldDescription) {
		fields = append(fields, processdefinition.FieldDescription)
	}
	if m.FieldCleared(processdefinition.FieldResource) {
		fields = append(fields, processdefinition.FieldResource)
	}
	if m.FieldCleared(processdefinition.FieldDiagramData) {
		fields = append(fields, processdefinition.FieldDiagramData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProcessDefinitionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProcessDefinitionMutation) ClearField(name string) error {
	switch name {
	case processdefinition.FieldCategory:
		m.ClearCategory()
		return nil
	case processdefinition.FieldDescription:
		m.ClearDescription()
		return nil
	case processdefinition.FieldResource:
		m.ClearResource()
		return nil
	case processdefinition.FieldDiagramData:
		m.ClearDiagramData()
		return nil
	}
	return fmt.Errorf("unknown ProcessDefinition nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProcessDefinitionMutation) ResetField(name string) error {
	switch name {
	case processdefinition.FieldKey:
		m.ResetKey()
		return nil
	case processdefinition.FieldName:
		m.ResetName()
		return nil
	case processdefinition.FieldCategory:
		m.ResetCategory()
		return nil
	case processdefinition.FieldVersion:
		m.ResetVersion()
		return nil
	case processdefinition.FieldDescription:
		m.ResetDescription()
		return nil
	case processdefinition.FieldDeployTime:
		m.ResetDeployTime()
		return nil
	case processdefinition.FieldResource:
		m.ResetResource()
		return nil
	case processdefinition.FieldDiagramData:
		m.ResetDiagramData()
		return nil
	case processdefinition.FieldHasStartForm:
		m.ResetHasStartForm()
		return nil
	case processdefinition.FieldSuspended:
		m.ResetSuspended()
		return nil
	case processdefinition.FieldTenantID:
		m.ResetTenantID()
		return nil
	case processdefinition.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case processdefinition.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProcessDefinition field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProcessDefinitionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProcessDefinitionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProcessDefinitionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProcessDefinitionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProcessDefinitionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProcessDefinitionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProcessDefinitionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ProcessDefinition unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProcessDefinitionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ProcessDefinition edge %s", name)
}

// ProcessEventMutation represents an operation that mutates the ProcessEvent nodes in the graph.
type ProcessEventMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int64
	event_type               *string
	event_name               *string
	execution_id             *string
	process_instance_id      *int64
	addprocess_instance_id   *int64
	process_definition_id    *int64
	addprocess_definition_id *int64
	process_definition_key   *string
	task_id                  *int64
	addtask_id               *int64
	activity_id              *string
	activity_name            *string
	activity_type            *string
	user_id                  *string
	timestamp                *time.Time
	event_data               *map[string]interface{}
	correlation_id           *string
	message_name             *string
	signal_name              *string
	job_id                   *string
	job_type                 *string
	job_handler_type         *string
	tenant_id                *string
	deployment_id            *string
	sequence_counter         *string
	created_at               *time.Time
	clearedFields            map[string]struct{}
	done                     bool
	oldValue                 func(context.Context) (*ProcessEvent, error)
	predicates               []predicate.ProcessEvent
}

var _ ent.Mutation = (*ProcessEventMutation)(nil)

// processeventOption allows management of the mutation configuration using functional options.
type processeventOption func(*ProcessEventMutation)

// newProcessEventMutation creates new mutation for the ProcessEvent entity.
func newProcessEventMutation(c config, op Op, opts ...processeventOption) *ProcessEventMutation {
	m := &ProcessEventMutation{
		config:        c,
		op:            op,
		typ:           TypeProcessEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProcessEventID sets the ID field of the mutation.
func withProcessEventID(id int64) processeventOption {
	return func(m *ProcessEventMutation) {
		var (
			err   error
			once  sync.Once
			value *ProcessEvent
		)
		m.oldValue = func(ctx context.Context) (*ProcessEvent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProcessEvent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProcessEvent sets the old ProcessEvent of the mutation.
func withProcessEvent(node *ProcessEvent) processeventOption {
	return func(m *ProcessEventMutation) {
		m.oldValue = func(context.Context) (*ProcessEvent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProcessEventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProcessEventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProcessEvent entities.
func (m *ProcessEventMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProcessEventMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProcessEventMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProcessEvent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEventType sets the "event_type" field.
func (m *ProcessEventMutation) SetEventType(s string) {
	m.event_type = &s
}

// EventType returns the value of the "event_type" field in the mutation.
func (m *ProcessEventMutation) EventType() (r string, exists bool) {
	v := m.event_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEventType returns the old "event_type" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldEventType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventType: %w", err)
	}
	return oldValue.EventType, nil
}

// ResetEventType resets all changes to the "event_type" field.
func (m *ProcessEventMutation) ResetEventType() {
	m.event_type = nil
}

// SetEventName sets the "event_name" field.
func (m *ProcessEventMutation) SetEventName(s string) {
	m.event_name = &s
}

// EventName returns the value of the "event_name" field in the mutation.
func (m *ProcessEventMutation) EventName() (r string, exists bool) {
	v := m.event_name
	if v == nil {
		return
	}
	return *v, true
}

// OldEventName returns the old "event_name" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldEventName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventName: %w", err)
	}
	return oldValue.EventName, nil
}

// ClearEventName clears the value of the "event_name" field.
func (m *ProcessEventMutation) ClearEventName() {
	m.event_name = nil
	m.clearedFields[processevent.FieldEventName] = struct{}{}
}

// EventNameCleared returns if the "event_name" field was cleared in this mutation.
func (m *ProcessEventMutation) EventNameCleared() bool {
	_, ok := m.clearedFields[processevent.FieldEventName]
	return ok
}

// ResetEventName resets all changes to the "event_name" field.
func (m *ProcessEventMutation) ResetEventName() {
	m.event_name = nil
	delete(m.clearedFields, processevent.FieldEventName)
}

// SetExecutionID sets the "execution_id" field.
func (m *ProcessEventMutation) SetExecutionID(s string) {
	m.execution_id = &s
}

// ExecutionID returns the value of the "execution_id" field in the mutation.
func (m *ProcessEventMutation) ExecutionID() (r string, exists bool) {
	v := m.execution_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExecutionID returns the old "execution_id" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldExecutionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecutionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecutionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecutionID: %w", err)
	}
	return oldValue.ExecutionID, nil
}

// ClearExecutionID clears the value of the "execution_id" field.
func (m *ProcessEventMutation) ClearExecutionID() {
	m.execution_id = nil
	m.clearedFields[processevent.FieldExecutionID] = struct{}{}
}

// ExecutionIDCleared returns if the "execution_id" field was cleared in this mutation.
func (m *ProcessEventMutation) ExecutionIDCleared() bool {
	_, ok := m.clearedFields[processevent.FieldExecutionID]
	return ok
}

// ResetExecutionID resets all changes to the "execution_id" field.
func (m *ProcessEventMutation) ResetExecutionID() {
	m.execution_id = nil
	delete(m.clearedFields, processevent.FieldExecutionID)
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (m *ProcessEventMutation) SetProcessInstanceID(i int64) {
	m.process_instance_id = &i
	m.addprocess_instance_id = nil
}

// ProcessInstanceID returns the value of the "process_instance_id" field in the mutation.
func (m *ProcessEventMutation) ProcessInstanceID() (r int64, exists bool) {
	v := m.process_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessInstanceID returns the old "process_instance_id" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldProcessInstanceID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessInstanceID: %w", err)
	}
	return oldValue.ProcessInstanceID, nil
}

// AddProcessInstanceID adds i to the "process_instance_id" field.
func (m *ProcessEventMutation) AddProcessInstanceID(i int64) {
	if m.addprocess_instance_id != nil {
		*m.addprocess_instance_id += i
	} else {
		m.addprocess_instance_id = &i
	}
}

// AddedProcessInstanceID returns the value that was added to the "process_instance_id" field in this mutation.
func (m *ProcessEventMutation) AddedProcessInstanceID() (r int64, exists bool) {
	v := m.addprocess_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearProcessInstanceID clears the value of the "process_instance_id" field.
func (m *ProcessEventMutation) ClearProcessInstanceID() {
	m.process_instance_id = nil
	m.addprocess_instance_id = nil
	m.clearedFields[processevent.FieldProcessInstanceID] = struct{}{}
}

// ProcessInstanceIDCleared returns if the "process_instance_id" field was cleared in this mutation.
func (m *ProcessEventMutation) ProcessInstanceIDCleared() bool {
	_, ok := m.clearedFields[processevent.FieldProcessInstanceID]
	return ok
}

// ResetProcessInstanceID resets all changes to the "process_instance_id" field.
func (m *ProcessEventMutation) ResetProcessInstanceID() {
	m.process_instance_id = nil
	m.addprocess_instance_id = nil
	delete(m.clearedFields, processevent.FieldProcessInstanceID)
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (m *ProcessEventMutation) SetProcessDefinitionID(i int64) {
	m.process_definition_id = &i
	m.addprocess_definition_id = nil
}

// ProcessDefinitionID returns the value of the "process_definition_id" field in the mutation.
func (m *ProcessEventMutation) ProcessDefinitionID() (r int64, exists bool) {
	v := m.process_definition_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessDefinitionID returns the old "process_definition_id" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldProcessDefinitionID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessDefinitionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessDefinitionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessDefinitionID: %w", err)
	}
	return oldValue.ProcessDefinitionID, nil
}

// AddProcessDefinitionID adds i to the "process_definition_id" field.
func (m *ProcessEventMutation) AddProcessDefinitionID(i int64) {
	if m.addprocess_definition_id != nil {
		*m.addprocess_definition_id += i
	} else {
		m.addprocess_definition_id = &i
	}
}

// AddedProcessDefinitionID returns the value that was added to the "process_definition_id" field in this mutation.
func (m *ProcessEventMutation) AddedProcessDefinitionID() (r int64, exists bool) {
	v := m.addprocess_definition_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearProcessDefinitionID clears the value of the "process_definition_id" field.
func (m *ProcessEventMutation) ClearProcessDefinitionID() {
	m.process_definition_id = nil
	m.addprocess_definition_id = nil
	m.clearedFields[processevent.FieldProcessDefinitionID] = struct{}{}
}

// ProcessDefinitionIDCleared returns if the "process_definition_id" field was cleared in this mutation.
func (m *ProcessEventMutation) ProcessDefinitionIDCleared() bool {
	_, ok := m.clearedFields[processevent.FieldProcessDefinitionID]
	return ok
}

// ResetProcessDefinitionID resets all changes to the "process_definition_id" field.
func (m *ProcessEventMutation) ResetProcessDefinitionID() {
	m.process_definition_id = nil
	m.addprocess_definition_id = nil
	delete(m.clearedFields, processevent.FieldProcessDefinitionID)
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (m *ProcessEventMutation) SetProcessDefinitionKey(s string) {
	m.process_definition_key = &s
}

// ProcessDefinitionKey returns the value of the "process_definition_key" field in the mutation.
func (m *ProcessEventMutation) ProcessDefinitionKey() (r string, exists bool) {
	v := m.process_definition_key
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessDefinitionKey returns the old "process_definition_key" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldProcessDefinitionKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessDefinitionKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessDefinitionKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessDefinitionKey: %w", err)
	}
	return oldValue.ProcessDefinitionKey, nil
}

// ClearProcessDefinitionKey clears the value of the "process_definition_key" field.
func (m *ProcessEventMutation) ClearProcessDefinitionKey() {
	m.process_definition_key = nil
	m.clearedFields[processevent.FieldProcessDefinitionKey] = struct{}{}
}

// ProcessDefinitionKeyCleared returns if the "process_definition_key" field was cleared in this mutation.
func (m *ProcessEventMutation) ProcessDefinitionKeyCleared() bool {
	_, ok := m.clearedFields[processevent.FieldProcessDefinitionKey]
	return ok
}

// ResetProcessDefinitionKey resets all changes to the "process_definition_key" field.
func (m *ProcessEventMutation) ResetProcessDefinitionKey() {
	m.process_definition_key = nil
	delete(m.clearedFields, processevent.FieldProcessDefinitionKey)
}

// SetTaskID sets the "task_id" field.
func (m *ProcessEventMutation) SetTaskID(i int64) {
	m.task_id = &i
	m.addtask_id = nil
}

// TaskID returns the value of the "task_id" field in the mutation.
func (m *ProcessEventMutation) TaskID() (r int64, exists bool) {
	v := m.task_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskID returns the old "task_id" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldTaskID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskID: %w", err)
	}
	return oldValue.TaskID, nil
}

// AddTaskID adds i to the "task_id" field.
func (m *ProcessEventMutation) AddTaskID(i int64) {
	if m.addtask_id != nil {
		*m.addtask_id += i
	} else {
		m.addtask_id = &i
	}
}

// AddedTaskID returns the value that was added to the "task_id" field in this mutation.
func (m *ProcessEventMutation) AddedTaskID() (r int64, exists bool) {
	v := m.addtask_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTaskID clears the value of the "task_id" field.
func (m *ProcessEventMutation) ClearTaskID() {
	m.task_id = nil
	m.addtask_id = nil
	m.clearedFields[processevent.FieldTaskID] = struct{}{}
}

// TaskIDCleared returns if the "task_id" field was cleared in this mutation.
func (m *ProcessEventMutation) TaskIDCleared() bool {
	_, ok := m.clearedFields[processevent.FieldTaskID]
	return ok
}

// ResetTaskID resets all changes to the "task_id" field.
func (m *ProcessEventMutation) ResetTaskID() {
	m.task_id = nil
	m.addtask_id = nil
	delete(m.clearedFields, processevent.FieldTaskID)
}

// SetActivityID sets the "activity_id" field.
func (m *ProcessEventMutation) SetActivityID(s string) {
	m.activity_id = &s
}

// ActivityID returns the value of the "activity_id" field in the mutation.
func (m *ProcessEventMutation) ActivityID() (r string, exists bool) {
	v := m.activity_id
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityID returns the old "activity_id" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldActivityID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityID: %w", err)
	}
	return oldValue.ActivityID, nil
}

// ClearActivityID clears the value of the "activity_id" field.
func (m *ProcessEventMutation) ClearActivityID() {
	m.activity_id = nil
	m.clearedFields[processevent.FieldActivityID] = struct{}{}
}

// ActivityIDCleared returns if the "activity_id" field was cleared in this mutation.
func (m *ProcessEventMutation) ActivityIDCleared() bool {
	_, ok := m.clearedFields[processevent.FieldActivityID]
	return ok
}

// ResetActivityID resets all changes to the "activity_id" field.
func (m *ProcessEventMutation) ResetActivityID() {
	m.activity_id = nil
	delete(m.clearedFields, processevent.FieldActivityID)
}

// SetActivityName sets the "activity_name" field.
func (m *ProcessEventMutation) SetActivityName(s string) {
	m.activity_name = &s
}

// ActivityName returns the value of the "activity_name" field in the mutation.
func (m *ProcessEventMutation) ActivityName() (r string, exists bool) {
	v := m.activity_name
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityName returns the old "activity_name" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldActivityName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityName: %w", err)
	}
	return oldValue.ActivityName, nil
}

// ClearActivityName clears the value of the "activity_name" field.
func (m *ProcessEventMutation) ClearActivityName() {
	m.activity_name = nil
	m.clearedFields[processevent.FieldActivityName] = struct{}{}
}

// ActivityNameCleared returns if the "activity_name" field was cleared in this mutation.
func (m *ProcessEventMutation) ActivityNameCleared() bool {
	_, ok := m.clearedFields[processevent.FieldActivityName]
	return ok
}

// ResetActivityName resets all changes to the "activity_name" field.
func (m *ProcessEventMutation) ResetActivityName() {
	m.activity_name = nil
	delete(m.clearedFields, processevent.FieldActivityName)
}

// SetActivityType sets the "activity_type" field.
func (m *ProcessEventMutation) SetActivityType(s string) {
	m.activity_type = &s
}

// ActivityType returns the value of the "activity_type" field in the mutation.
func (m *ProcessEventMutation) ActivityType() (r string, exists bool) {
	v := m.activity_type
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityType returns the old "activity_type" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldActivityType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityType: %w", err)
	}
	return oldValue.ActivityType, nil
}

// ClearActivityType clears the value of the "activity_type" field.
func (m *ProcessEventMutation) ClearActivityType() {
	m.activity_type = nil
	m.clearedFields[processevent.FieldActivityType] = struct{}{}
}

// ActivityTypeCleared returns if the "activity_type" field was cleared in this mutation.
func (m *ProcessEventMutation) ActivityTypeCleared() bool {
	_, ok := m.clearedFields[processevent.FieldActivityType]
	return ok
}

// ResetActivityType resets all changes to the "activity_type" field.
func (m *ProcessEventMutation) ResetActivityType() {
	m.activity_type = nil
	delete(m.clearedFields, processevent.FieldActivityType)
}

// SetUserID sets the "user_id" field.
func (m *ProcessEventMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ProcessEventMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *ProcessEventMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[processevent.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *ProcessEventMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[processevent.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ProcessEventMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, processevent.FieldUserID)
}

// SetTimestamp sets the "timestamp" field.
func (m *ProcessEventMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *ProcessEventMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *ProcessEventMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetEventData sets the "event_data" field.
func (m *ProcessEventMutation) SetEventData(value map[string]interface{}) {
	m.event_data = &value
}

// EventData returns the value of the "event_data" field in the mutation.
func (m *ProcessEventMutation) EventData() (r map[string]interface{}, exists bool) {
	v := m.event_data
	if v == nil {
		return
	}
	return *v, true
}

// OldEventData returns the old "event_data" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldEventData(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventData: %w", err)
	}
	return oldValue.EventData, nil
}

// ClearEventData clears the value of the "event_data" field.
func (m *ProcessEventMutation) ClearEventData() {
	m.event_data = nil
	m.clearedFields[processevent.FieldEventData] = struct{}{}
}

// EventDataCleared returns if the "event_data" field was cleared in this mutation.
func (m *ProcessEventMutation) EventDataCleared() bool {
	_, ok := m.clearedFields[processevent.FieldEventData]
	return ok
}

// ResetEventData resets all changes to the "event_data" field.
func (m *ProcessEventMutation) ResetEventData() {
	m.event_data = nil
	delete(m.clearedFields, processevent.FieldEventData)
}

// SetCorrelationID sets the "correlation_id" field.
func (m *ProcessEventMutation) SetCorrelationID(s string) {
	m.correlation_id = &s
}

// CorrelationID returns the value of the "correlation_id" field in the mutation.
func (m *ProcessEventMutation) CorrelationID() (r string, exists bool) {
	v := m.correlation_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCorrelationID returns the old "correlation_id" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldCorrelationID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCorrelationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCorrelationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCorrelationID: %w", err)
	}
	return oldValue.CorrelationID, nil
}

// ClearCorrelationID clears the value of the "correlation_id" field.
func (m *ProcessEventMutation) ClearCorrelationID() {
	m.correlation_id = nil
	m.clearedFields[processevent.FieldCorrelationID] = struct{}{}
}

// CorrelationIDCleared returns if the "correlation_id" field was cleared in this mutation.
func (m *ProcessEventMutation) CorrelationIDCleared() bool {
	_, ok := m.clearedFields[processevent.FieldCorrelationID]
	return ok
}

// ResetCorrelationID resets all changes to the "correlation_id" field.
func (m *ProcessEventMutation) ResetCorrelationID() {
	m.correlation_id = nil
	delete(m.clearedFields, processevent.FieldCorrelationID)
}

// SetMessageName sets the "message_name" field.
func (m *ProcessEventMutation) SetMessageName(s string) {
	m.message_name = &s
}

// MessageName returns the value of the "message_name" field in the mutation.
func (m *ProcessEventMutation) MessageName() (r string, exists bool) {
	v := m.message_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMessageName returns the old "message_name" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldMessageName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessageName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessageName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessageName: %w", err)
	}
	return oldValue.MessageName, nil
}

// ClearMessageName clears the value of the "message_name" field.
func (m *ProcessEventMutation) ClearMessageName() {
	m.message_name = nil
	m.clearedFields[processevent.FieldMessageName] = struct{}{}
}

// MessageNameCleared returns if the "message_name" field was cleared in this mutation.
func (m *ProcessEventMutation) MessageNameCleared() bool {
	_, ok := m.clearedFields[processevent.FieldMessageName]
	return ok
}

// ResetMessageName resets all changes to the "message_name" field.
func (m *ProcessEventMutation) ResetMessageName() {
	m.message_name = nil
	delete(m.clearedFields, processevent.FieldMessageName)
}

// SetSignalName sets the "signal_name" field.
func (m *ProcessEventMutation) SetSignalName(s string) {
	m.signal_name = &s
}

// SignalName returns the value of the "signal_name" field in the mutation.
func (m *ProcessEventMutation) SignalName() (r string, exists bool) {
	v := m.signal_name
	if v == nil {
		return
	}
	return *v, true
}

// OldSignalName returns the old "signal_name" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldSignalName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSignalName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSignalName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignalName: %w", err)
	}
	return oldValue.SignalName, nil
}

// ClearSignalName clears the value of the "signal_name" field.
func (m *ProcessEventMutation) ClearSignalName() {
	m.signal_name = nil
	m.clearedFields[processevent.FieldSignalName] = struct{}{}
}

// SignalNameCleared returns if the "signal_name" field was cleared in this mutation.
func (m *ProcessEventMutation) SignalNameCleared() bool {
	_, ok := m.clearedFields[processevent.FieldSignalName]
	return ok
}

// ResetSignalName resets all changes to the "signal_name" field.
func (m *ProcessEventMutation) ResetSignalName() {
	m.signal_name = nil
	delete(m.clearedFields, processevent.FieldSignalName)
}

// SetJobID sets the "job_id" field.
func (m *ProcessEventMutation) SetJobID(s string) {
	m.job_id = &s
}

// JobID returns the value of the "job_id" field in the mutation.
func (m *ProcessEventMutation) JobID() (r string, exists bool) {
	v := m.job_id
	if v == nil {
		return
	}
	return *v, true
}

// OldJobID returns the old "job_id" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldJobID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJobID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJobID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobID: %w", err)
	}
	return oldValue.JobID, nil
}

// ClearJobID clears the value of the "job_id" field.
func (m *ProcessEventMutation) ClearJobID() {
	m.job_id = nil
	m.clearedFields[processevent.FieldJobID] = struct{}{}
}

// JobIDCleared returns if the "job_id" field was cleared in this mutation.
func (m *ProcessEventMutation) JobIDCleared() bool {
	_, ok := m.clearedFields[processevent.FieldJobID]
	return ok
}

// ResetJobID resets all changes to the "job_id" field.
func (m *ProcessEventMutation) ResetJobID() {
	m.job_id = nil
	delete(m.clearedFields, processevent.FieldJobID)
}

// SetJobType sets the "job_type" field.
func (m *ProcessEventMutation) SetJobType(s string) {
	m.job_type = &s
}

// JobType returns the value of the "job_type" field in the mutation.
func (m *ProcessEventMutation) JobType() (r string, exists bool) {
	v := m.job_type
	if v == nil {
		return
	}
	return *v, true
}

// OldJobType returns the old "job_type" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldJobType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJobType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJobType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobType: %w", err)
	}
	return oldValue.JobType, nil
}

// ClearJobType clears the value of the "job_type" field.
func (m *ProcessEventMutation) ClearJobType() {
	m.job_type = nil
	m.clearedFields[processevent.FieldJobType] = struct{}{}
}

// JobTypeCleared returns if the "job_type" field was cleared in this mutation.
func (m *ProcessEventMutation) JobTypeCleared() bool {
	_, ok := m.clearedFields[processevent.FieldJobType]
	return ok
}

// ResetJobType resets all changes to the "job_type" field.
func (m *ProcessEventMutation) ResetJobType() {
	m.job_type = nil
	delete(m.clearedFields, processevent.FieldJobType)
}

// SetJobHandlerType sets the "job_handler_type" field.
func (m *ProcessEventMutation) SetJobHandlerType(s string) {
	m.job_handler_type = &s
}

// JobHandlerType returns the value of the "job_handler_type" field in the mutation.
func (m *ProcessEventMutation) JobHandlerType() (r string, exists bool) {
	v := m.job_handler_type
	if v == nil {
		return
	}
	return *v, true
}

// OldJobHandlerType returns the old "job_handler_type" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldJobHandlerType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJobHandlerType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJobHandlerType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobHandlerType: %w", err)
	}
	return oldValue.JobHandlerType, nil
}

// ClearJobHandlerType clears the value of the "job_handler_type" field.
func (m *ProcessEventMutation) ClearJobHandlerType() {
	m.job_handler_type = nil
	m.clearedFields[processevent.FieldJobHandlerType] = struct{}{}
}

// JobHandlerTypeCleared returns if the "job_handler_type" field was cleared in this mutation.
func (m *ProcessEventMutation) JobHandlerTypeCleared() bool {
	_, ok := m.clearedFields[processevent.FieldJobHandlerType]
	return ok
}

// ResetJobHandlerType resets all changes to the "job_handler_type" field.
func (m *ProcessEventMutation) ResetJobHandlerType() {
	m.job_handler_type = nil
	delete(m.clearedFields, processevent.FieldJobHandlerType)
}

// SetTenantID sets the "tenant_id" field.
func (m *ProcessEventMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *ProcessEventMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *ProcessEventMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetDeploymentID sets the "deployment_id" field.
func (m *ProcessEventMutation) SetDeploymentID(s string) {
	m.deployment_id = &s
}

// DeploymentID returns the value of the "deployment_id" field in the mutation.
func (m *ProcessEventMutation) DeploymentID() (r string, exists bool) {
	v := m.deployment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDeploymentID returns the old "deployment_id" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldDeploymentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeploymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeploymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeploymentID: %w", err)
	}
	return oldValue.DeploymentID, nil
}

// ClearDeploymentID clears the value of the "deployment_id" field.
func (m *ProcessEventMutation) ClearDeploymentID() {
	m.deployment_id = nil
	m.clearedFields[processevent.FieldDeploymentID] = struct{}{}
}

// DeploymentIDCleared returns if the "deployment_id" field was cleared in this mutation.
func (m *ProcessEventMutation) DeploymentIDCleared() bool {
	_, ok := m.clearedFields[processevent.FieldDeploymentID]
	return ok
}

// ResetDeploymentID resets all changes to the "deployment_id" field.
func (m *ProcessEventMutation) ResetDeploymentID() {
	m.deployment_id = nil
	delete(m.clearedFields, processevent.FieldDeploymentID)
}

// SetSequenceCounter sets the "sequence_counter" field.
func (m *ProcessEventMutation) SetSequenceCounter(s string) {
	m.sequence_counter = &s
}

// SequenceCounter returns the value of the "sequence_counter" field in the mutation.
func (m *ProcessEventMutation) SequenceCounter() (r string, exists bool) {
	v := m.sequence_counter
	if v == nil {
		return
	}
	return *v, true
}

// OldSequenceCounter returns the old "sequence_counter" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldSequenceCounter(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSequenceCounter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSequenceCounter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSequenceCounter: %w", err)
	}
	return oldValue.SequenceCounter, nil
}

// ClearSequenceCounter clears the value of the "sequence_counter" field.
func (m *ProcessEventMutation) ClearSequenceCounter() {
	m.sequence_counter = nil
	m.clearedFields[processevent.FieldSequenceCounter] = struct{}{}
}

// SequenceCounterCleared returns if the "sequence_counter" field was cleared in this mutation.
func (m *ProcessEventMutation) SequenceCounterCleared() bool {
	_, ok := m.clearedFields[processevent.FieldSequenceCounter]
	return ok
}

// ResetSequenceCounter resets all changes to the "sequence_counter" field.
func (m *ProcessEventMutation) ResetSequenceCounter() {
	m.sequence_counter = nil
	delete(m.clearedFields, processevent.FieldSequenceCounter)
}

// SetCreatedAt sets the "created_at" field.
func (m *ProcessEventMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProcessEventMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProcessEvent entity.
// If the ProcessEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessEventMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProcessEventMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the ProcessEventMutation builder.
func (m *ProcessEventMutation) Where(ps ...predicate.ProcessEvent) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProcessEventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProcessEventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProcessEvent, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProcessEventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProcessEventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProcessEvent).
func (m *ProcessEventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProcessEventMutation) Fields() []string {
	fields := make([]string, 0, 23)
	if m.event_type != nil {
		fields = append(fields, processevent.FieldEventType)
	}
	if m.event_name != nil {
		fields = append(fields, processevent.FieldEventName)
	}
	if m.execution_id != nil {
		fields = append(fields, processevent.FieldExecutionID)
	}
	if m.process_instance_id != nil {
		fields = append(fields, processevent.FieldProcessInstanceID)
	}
	if m.process_definition_id != nil {
		fields = append(fields, processevent.FieldProcessDefinitionID)
	}
	if m.process_definition_key != nil {
		fields = append(fields, processevent.FieldProcessDefinitionKey)
	}
	if m.task_id != nil {
		fields = append(fields, processevent.FieldTaskID)
	}
	if m.activity_id != nil {
		fields = append(fields, processevent.FieldActivityID)
	}
	if m.activity_name != nil {
		fields = append(fields, processevent.FieldActivityName)
	}
	if m.activity_type != nil {
		fields = append(fields, processevent.FieldActivityType)
	}
	if m.user_id != nil {
		fields = append(fields, processevent.FieldUserID)
	}
	if m.timestamp != nil {
		fields = append(fields, processevent.FieldTimestamp)
	}
	if m.event_data != nil {
		fields = append(fields, processevent.FieldEventData)
	}
	if m.correlation_id != nil {
		fields = append(fields, processevent.FieldCorrelationID)
	}
	if m.message_name != nil {
		fields = append(fields, processevent.FieldMessageName)
	}
	if m.signal_name != nil {
		fields = append(fields, processevent.FieldSignalName)
	}
	if m.job_id != nil {
		fields = append(fields, processevent.FieldJobID)
	}
	if m.job_type != nil {
		fields = append(fields, processevent.FieldJobType)
	}
	if m.job_handler_type != nil {
		fields = append(fields, processevent.FieldJobHandlerType)
	}
	if m.tenant_id != nil {
		fields = append(fields, processevent.FieldTenantID)
	}
	if m.deployment_id != nil {
		fields = append(fields, processevent.FieldDeploymentID)
	}
	if m.sequence_counter != nil {
		fields = append(fields, processevent.FieldSequenceCounter)
	}
	if m.created_at != nil {
		fields = append(fields, processevent.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProcessEventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case processevent.FieldEventType:
		return m.EventType()
	case processevent.FieldEventName:
		return m.EventName()
	case processevent.FieldExecutionID:
		return m.ExecutionID()
	case processevent.FieldProcessInstanceID:
		return m.ProcessInstanceID()
	case processevent.FieldProcessDefinitionID:
		return m.ProcessDefinitionID()
	case processevent.FieldProcessDefinitionKey:
		return m.ProcessDefinitionKey()
	case processevent.FieldTaskID:
		return m.TaskID()
	case processevent.FieldActivityID:
		return m.ActivityID()
	case processevent.FieldActivityName:
		return m.ActivityName()
	case processevent.FieldActivityType:
		return m.ActivityType()
	case processevent.FieldUserID:
		return m.UserID()
	case processevent.FieldTimestamp:
		return m.Timestamp()
	case processevent.FieldEventData:
		return m.EventData()
	case processevent.FieldCorrelationID:
		return m.CorrelationID()
	case processevent.FieldMessageName:
		return m.MessageName()
	case processevent.FieldSignalName:
		return m.SignalName()
	case processevent.FieldJobID:
		return m.JobID()
	case processevent.FieldJobType:
		return m.JobType()
	case processevent.FieldJobHandlerType:
		return m.JobHandlerType()
	case processevent.FieldTenantID:
		return m.TenantID()
	case processevent.FieldDeploymentID:
		return m.DeploymentID()
	case processevent.FieldSequenceCounter:
		return m.SequenceCounter()
	case processevent.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProcessEventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case processevent.FieldEventType:
		return m.OldEventType(ctx)
	case processevent.FieldEventName:
		return m.OldEventName(ctx)
	case processevent.FieldExecutionID:
		return m.OldExecutionID(ctx)
	case processevent.FieldProcessInstanceID:
		return m.OldProcessInstanceID(ctx)
	case processevent.FieldProcessDefinitionID:
		return m.OldProcessDefinitionID(ctx)
	case processevent.FieldProcessDefinitionKey:
		return m.OldProcessDefinitionKey(ctx)
	case processevent.FieldTaskID:
		return m.OldTaskID(ctx)
	case processevent.FieldActivityID:
		return m.OldActivityID(ctx)
	case processevent.FieldActivityName:
		return m.OldActivityName(ctx)
	case processevent.FieldActivityType:
		return m.OldActivityType(ctx)
	case processevent.FieldUserID:
		return m.OldUserID(ctx)
	case processevent.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case processevent.FieldEventData:
		return m.OldEventData(ctx)
	case processevent.FieldCorrelationID:
		return m.OldCorrelationID(ctx)
	case processevent.FieldMessageName:
		return m.OldMessageName(ctx)
	case processevent.FieldSignalName:
		return m.OldSignalName(ctx)
	case processevent.FieldJobID:
		return m.OldJobID(ctx)
	case processevent.FieldJobType:
		return m.OldJobType(ctx)
	case processevent.FieldJobHandlerType:
		return m.OldJobHandlerType(ctx)
	case processevent.FieldTenantID:
		return m.OldTenantID(ctx)
	case processevent.FieldDeploymentID:
		return m.OldDeploymentID(ctx)
	case processevent.FieldSequenceCounter:
		return m.OldSequenceCounter(ctx)
	case processevent.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProcessEvent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcessEventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case processevent.FieldEventType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventType(v)
		return nil
	case processevent.FieldEventName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventName(v)
		return nil
	case processevent.FieldExecutionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecutionID(v)
		return nil
	case processevent.FieldProcessInstanceID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessInstanceID(v)
		return nil
	case processevent.FieldProcessDefinitionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessDefinitionID(v)
		return nil
	case processevent.FieldProcessDefinitionKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessDefinitionKey(v)
		return nil
	case processevent.FieldTaskID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskID(v)
		return nil
	case processevent.FieldActivityID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityID(v)
		return nil
	case processevent.FieldActivityName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityName(v)
		return nil
	case processevent.FieldActivityType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityType(v)
		return nil
	case processevent.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case processevent.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case processevent.FieldEventData:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventData(v)
		return nil
	case processevent.FieldCorrelationID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCorrelationID(v)
		return nil
	case processevent.FieldMessageName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessageName(v)
		return nil
	case processevent.FieldSignalName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignalName(v)
		return nil
	case processevent.FieldJobID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobID(v)
		return nil
	case processevent.FieldJobType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobType(v)
		return nil
	case processevent.FieldJobHandlerType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobHandlerType(v)
		return nil
	case processevent.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case processevent.FieldDeploymentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeploymentID(v)
		return nil
	case processevent.FieldSequenceCounter:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSequenceCounter(v)
		return nil
	case processevent.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProcessEvent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProcessEventMutation) AddedFields() []string {
	var fields []string
	if m.addprocess_instance_id != nil {
		fields = append(fields, processevent.FieldProcessInstanceID)
	}
	if m.addprocess_definition_id != nil {
		fields = append(fields, processevent.FieldProcessDefinitionID)
	}
	if m.addtask_id != nil {
		fields = append(fields, processevent.FieldTaskID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProcessEventMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case processevent.FieldProcessInstanceID:
		return m.AddedProcessInstanceID()
	case processevent.FieldProcessDefinitionID:
		return m.AddedProcessDefinitionID()
	case processevent.FieldTaskID:
		return m.AddedTaskID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcessEventMutation) AddField(name string, value ent.Value) error {
	switch name {
	case processevent.FieldProcessInstanceID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProcessInstanceID(v)
		return nil
	case processevent.FieldProcessDefinitionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProcessDefinitionID(v)
		return nil
	case processevent.FieldTaskID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTaskID(v)
		return nil
	}
	return fmt.Errorf("unknown ProcessEvent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProcessEventMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(processevent.FieldEventName) {
		fields = append(fields, processevent.FieldEventName)
	}
	if m.FieldCleared(processevent.FieldExecutionID) {
		fields = append(fields, processevent.FieldExecutionID)
	}
	if m.FieldCleared(processevent.FieldProcessInstanceID) {
		fields = append(fields, processevent.FieldProcessInstanceID)
	}
	if m.FieldCleared(processevent.FieldProcessDefinitionID) {
		fields = append(fields, processevent.FieldProcessDefinitionID)
	}
	if m.FieldCleared(processevent.FieldProcessDefinitionKey) {
		fields = append(fields, processevent.FieldProcessDefinitionKey)
	}
	if m.FieldCleared(processevent.FieldTaskID) {
		fields = append(fields, processevent.FieldTaskID)
	}
	if m.FieldCleared(processevent.FieldActivityID) {
		fields = append(fields, processevent.FieldActivityID)
	}
	if m.FieldCleared(processevent.FieldActivityName) {
		fields = append(fields, processevent.FieldActivityName)
	}
	if m.FieldCleared(processevent.FieldActivityType) {
		fields = append(fields, processevent.FieldActivityType)
	}
	if m.FieldCleared(processevent.FieldUserID) {
		fields = append(fields, processevent.FieldUserID)
	}
	if m.FieldCleared(processevent.FieldEventData) {
		fields = append(fields, processevent.FieldEventData)
	}
	if m.FieldCleared(processevent.FieldCorrelationID) {
		fields = append(fields, processevent.FieldCorrelationID)
	}
	if m.FieldCleared(processevent.FieldMessageName) {
		fields = append(fields, processevent.FieldMessageName)
	}
	if m.FieldCleared(processevent.FieldSignalName) {
		fields = append(fields, processevent.FieldSignalName)
	}
	if m.FieldCleared(processevent.FieldJobID) {
		fields = append(fields, processevent.FieldJobID)
	}
	if m.FieldCleared(processevent.FieldJobType) {
		fields = append(fields, processevent.FieldJobType)
	}
	if m.FieldCleared(processevent.FieldJobHandlerType) {
		fields = append(fields, processevent.FieldJobHandlerType)
	}
	if m.FieldCleared(processevent.FieldDeploymentID) {
		fields = append(fields, processevent.FieldDeploymentID)
	}
	if m.FieldCleared(processevent.FieldSequenceCounter) {
		fields = append(fields, processevent.FieldSequenceCounter)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProcessEventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProcessEventMutation) ClearField(name string) error {
	switch name {
	case processevent.FieldEventName:
		m.ClearEventName()
		return nil
	case processevent.FieldExecutionID:
		m.ClearExecutionID()
		return nil
	case processevent.FieldProcessInstanceID:
		m.ClearProcessInstanceID()
		return nil
	case processevent.FieldProcessDefinitionID:
		m.ClearProcessDefinitionID()
		return nil
	case processevent.FieldProcessDefinitionKey:
		m.ClearProcessDefinitionKey()
		return nil
	case processevent.FieldTaskID:
		m.ClearTaskID()
		return nil
	case processevent.FieldActivityID:
		m.ClearActivityID()
		return nil
	case processevent.FieldActivityName:
		m.ClearActivityName()
		return nil
	case processevent.FieldActivityType:
		m.ClearActivityType()
		return nil
	case processevent.FieldUserID:
		m.ClearUserID()
		return nil
	case processevent.FieldEventData:
		m.ClearEventData()
		return nil
	case processevent.FieldCorrelationID:
		m.ClearCorrelationID()
		return nil
	case processevent.FieldMessageName:
		m.ClearMessageName()
		return nil
	case processevent.FieldSignalName:
		m.ClearSignalName()
		return nil
	case processevent.FieldJobID:
		m.ClearJobID()
		return nil
	case processevent.FieldJobType:
		m.ClearJobType()
		return nil
	case processevent.FieldJobHandlerType:
		m.ClearJobHandlerType()
		return nil
	case processevent.FieldDeploymentID:
		m.ClearDeploymentID()
		return nil
	case processevent.FieldSequenceCounter:
		m.ClearSequenceCounter()
		return nil
	}
	return fmt.Errorf("unknown ProcessEvent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProcessEventMutation) ResetField(name string) error {
	switch name {
	case processevent.FieldEventType:
		m.ResetEventType()
		return nil
	case processevent.FieldEventName:
		m.ResetEventName()
		return nil
	case processevent.FieldExecutionID:
		m.ResetExecutionID()
		return nil
	case processevent.FieldProcessInstanceID:
		m.ResetProcessInstanceID()
		return nil
	case processevent.FieldProcessDefinitionID:
		m.ResetProcessDefinitionID()
		return nil
	case processevent.FieldProcessDefinitionKey:
		m.ResetProcessDefinitionKey()
		return nil
	case processevent.FieldTaskID:
		m.ResetTaskID()
		return nil
	case processevent.FieldActivityID:
		m.ResetActivityID()
		return nil
	case processevent.FieldActivityName:
		m.ResetActivityName()
		return nil
	case processevent.FieldActivityType:
		m.ResetActivityType()
		return nil
	case processevent.FieldUserID:
		m.ResetUserID()
		return nil
	case processevent.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case processevent.FieldEventData:
		m.ResetEventData()
		return nil
	case processevent.FieldCorrelationID:
		m.ResetCorrelationID()
		return nil
	case processevent.FieldMessageName:
		m.ResetMessageName()
		return nil
	case processevent.FieldSignalName:
		m.ResetSignalName()
		return nil
	case processevent.FieldJobID:
		m.ResetJobID()
		return nil
	case processevent.FieldJobType:
		m.ResetJobType()
		return nil
	case processevent.FieldJobHandlerType:
		m.ResetJobHandlerType()
		return nil
	case processevent.FieldTenantID:
		m.ResetTenantID()
		return nil
	case processevent.FieldDeploymentID:
		m.ResetDeploymentID()
		return nil
	case processevent.FieldSequenceCounter:
		m.ResetSequenceCounter()
		return nil
	case processevent.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProcessEvent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProcessEventMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProcessEventMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProcessEventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProcessEventMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProcessEventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProcessEventMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProcessEventMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ProcessEvent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProcessEventMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ProcessEvent edge %s", name)
}

// ProcessInstanceMutation represents an operation that mutates the ProcessInstance nodes in the graph.
type ProcessInstanceMutation struct {
	config
	op                            Op
	typ                           string
	id                            *int64
	business_key                  *string
	process_definition_id         *int64
	addprocess_definition_id      *int64
	process_definition_key        *string
	process_definition_name       *string
	process_definition_version    *int32
	addprocess_definition_version *int32
	deployment_id                 *string
	start_user_id                 *string
	start_time                    *time.Time
	end_time                      *time.Time
	duration                      *int64
	addduration                   *int64
	delete_reason                 *string
	super_process_instance_id     *string
	root_process_instance_id      *string
	suspended                     *bool
	tenant_id                     *string
	name                          *string
	description                   *string
	callback_id                   *string
	callback_type                 *string
	reference_id                  *string
	reference_type                *string
	created_at                    *time.Time
	updated_at                    *time.Time
	clearedFields                 map[string]struct{}
	done                          bool
	oldValue                      func(context.Context) (*ProcessInstance, error)
	predicates                    []predicate.ProcessInstance
}

var _ ent.Mutation = (*ProcessInstanceMutation)(nil)

// processinstanceOption allows management of the mutation configuration using functional options.
type processinstanceOption func(*ProcessInstanceMutation)

// newProcessInstanceMutation creates new mutation for the ProcessInstance entity.
func newProcessInstanceMutation(c config, op Op, opts ...processinstanceOption) *ProcessInstanceMutation {
	m := &ProcessInstanceMutation{
		config:        c,
		op:            op,
		typ:           TypeProcessInstance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProcessInstanceID sets the ID field of the mutation.
func withProcessInstanceID(id int64) processinstanceOption {
	return func(m *ProcessInstanceMutation) {
		var (
			err   error
			once  sync.Once
			value *ProcessInstance
		)
		m.oldValue = func(ctx context.Context) (*ProcessInstance, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProcessInstance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProcessInstance sets the old ProcessInstance of the mutation.
func withProcessInstance(node *ProcessInstance) processinstanceOption {
	return func(m *ProcessInstanceMutation) {
		m.oldValue = func(context.Context) (*ProcessInstance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProcessInstanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProcessInstanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProcessInstance entities.
func (m *ProcessInstanceMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProcessInstanceMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProcessInstanceMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProcessInstance.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBusinessKey sets the "business_key" field.
func (m *ProcessInstanceMutation) SetBusinessKey(s string) {
	m.business_key = &s
}

// BusinessKey returns the value of the "business_key" field in the mutation.
func (m *ProcessInstanceMutation) BusinessKey() (r string, exists bool) {
	v := m.business_key
	if v == nil {
		return
	}
	return *v, true
}

// OldBusinessKey returns the old "business_key" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldBusinessKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBusinessKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBusinessKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBusinessKey: %w", err)
	}
	return oldValue.BusinessKey, nil
}

// ClearBusinessKey clears the value of the "business_key" field.
func (m *ProcessInstanceMutation) ClearBusinessKey() {
	m.business_key = nil
	m.clearedFields[processinstance.FieldBusinessKey] = struct{}{}
}

// BusinessKeyCleared returns if the "business_key" field was cleared in this mutation.
func (m *ProcessInstanceMutation) BusinessKeyCleared() bool {
	_, ok := m.clearedFields[processinstance.FieldBusinessKey]
	return ok
}

// ResetBusinessKey resets all changes to the "business_key" field.
func (m *ProcessInstanceMutation) ResetBusinessKey() {
	m.business_key = nil
	delete(m.clearedFields, processinstance.FieldBusinessKey)
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (m *ProcessInstanceMutation) SetProcessDefinitionID(i int64) {
	m.process_definition_id = &i
	m.addprocess_definition_id = nil
}

// ProcessDefinitionID returns the value of the "process_definition_id" field in the mutation.
func (m *ProcessInstanceMutation) ProcessDefinitionID() (r int64, exists bool) {
	v := m.process_definition_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessDefinitionID returns the old "process_definition_id" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldProcessDefinitionID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessDefinitionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessDefinitionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessDefinitionID: %w", err)
	}
	return oldValue.ProcessDefinitionID, nil
}

// AddProcessDefinitionID adds i to the "process_definition_id" field.
func (m *ProcessInstanceMutation) AddProcessDefinitionID(i int64) {
	if m.addprocess_definition_id != nil {
		*m.addprocess_definition_id += i
	} else {
		m.addprocess_definition_id = &i
	}
}

// AddedProcessDefinitionID returns the value that was added to the "process_definition_id" field in this mutation.
func (m *ProcessInstanceMutation) AddedProcessDefinitionID() (r int64, exists bool) {
	v := m.addprocess_definition_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProcessDefinitionID resets all changes to the "process_definition_id" field.
func (m *ProcessInstanceMutation) ResetProcessDefinitionID() {
	m.process_definition_id = nil
	m.addprocess_definition_id = nil
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (m *ProcessInstanceMutation) SetProcessDefinitionKey(s string) {
	m.process_definition_key = &s
}

// ProcessDefinitionKey returns the value of the "process_definition_key" field in the mutation.
func (m *ProcessInstanceMutation) ProcessDefinitionKey() (r string, exists bool) {
	v := m.process_definition_key
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessDefinitionKey returns the old "process_definition_key" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldProcessDefinitionKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessDefinitionKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessDefinitionKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessDefinitionKey: %w", err)
	}
	return oldValue.ProcessDefinitionKey, nil
}

// ResetProcessDefinitionKey resets all changes to the "process_definition_key" field.
func (m *ProcessInstanceMutation) ResetProcessDefinitionKey() {
	m.process_definition_key = nil
}

// SetProcessDefinitionName sets the "process_definition_name" field.
func (m *ProcessInstanceMutation) SetProcessDefinitionName(s string) {
	m.process_definition_name = &s
}

// ProcessDefinitionName returns the value of the "process_definition_name" field in the mutation.
func (m *ProcessInstanceMutation) ProcessDefinitionName() (r string, exists bool) {
	v := m.process_definition_name
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessDefinitionName returns the old "process_definition_name" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldProcessDefinitionName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessDefinitionName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessDefinitionName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessDefinitionName: %w", err)
	}
	return oldValue.ProcessDefinitionName, nil
}

// ClearProcessDefinitionName clears the value of the "process_definition_name" field.
func (m *ProcessInstanceMutation) ClearProcessDefinitionName() {
	m.process_definition_name = nil
	m.clearedFields[processinstance.FieldProcessDefinitionName] = struct{}{}
}

// ProcessDefinitionNameCleared returns if the "process_definition_name" field was cleared in this mutation.
func (m *ProcessInstanceMutation) ProcessDefinitionNameCleared() bool {
	_, ok := m.clearedFields[processinstance.FieldProcessDefinitionName]
	return ok
}

// ResetProcessDefinitionName resets all changes to the "process_definition_name" field.
func (m *ProcessInstanceMutation) ResetProcessDefinitionName() {
	m.process_definition_name = nil
	delete(m.clearedFields, processinstance.FieldProcessDefinitionName)
}

// SetProcessDefinitionVersion sets the "process_definition_version" field.
func (m *ProcessInstanceMutation) SetProcessDefinitionVersion(i int32) {
	m.process_definition_version = &i
	m.addprocess_definition_version = nil
}

// ProcessDefinitionVersion returns the value of the "process_definition_version" field in the mutation.
func (m *ProcessInstanceMutation) ProcessDefinitionVersion() (r int32, exists bool) {
	v := m.process_definition_version
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessDefinitionVersion returns the old "process_definition_version" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldProcessDefinitionVersion(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessDefinitionVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessDefinitionVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessDefinitionVersion: %w", err)
	}
	return oldValue.ProcessDefinitionVersion, nil
}

// AddProcessDefinitionVersion adds i to the "process_definition_version" field.
func (m *ProcessInstanceMutation) AddProcessDefinitionVersion(i int32) {
	if m.addprocess_definition_version != nil {
		*m.addprocess_definition_version += i
	} else {
		m.addprocess_definition_version = &i
	}
}

// AddedProcessDefinitionVersion returns the value that was added to the "process_definition_version" field in this mutation.
func (m *ProcessInstanceMutation) AddedProcessDefinitionVersion() (r int32, exists bool) {
	v := m.addprocess_definition_version
	if v == nil {
		return
	}
	return *v, true
}

// ResetProcessDefinitionVersion resets all changes to the "process_definition_version" field.
func (m *ProcessInstanceMutation) ResetProcessDefinitionVersion() {
	m.process_definition_version = nil
	m.addprocess_definition_version = nil
}

// SetDeploymentID sets the "deployment_id" field.
func (m *ProcessInstanceMutation) SetDeploymentID(s string) {
	m.deployment_id = &s
}

// DeploymentID returns the value of the "deployment_id" field in the mutation.
func (m *ProcessInstanceMutation) DeploymentID() (r string, exists bool) {
	v := m.deployment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDeploymentID returns the old "deployment_id" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldDeploymentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeploymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeploymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeploymentID: %w", err)
	}
	return oldValue.DeploymentID, nil
}

// ClearDeploymentID clears the value of the "deployment_id" field.
func (m *ProcessInstanceMutation) ClearDeploymentID() {
	m.deployment_id = nil
	m.clearedFields[processinstance.FieldDeploymentID] = struct{}{}
}

// DeploymentIDCleared returns if the "deployment_id" field was cleared in this mutation.
func (m *ProcessInstanceMutation) DeploymentIDCleared() bool {
	_, ok := m.clearedFields[processinstance.FieldDeploymentID]
	return ok
}

// ResetDeploymentID resets all changes to the "deployment_id" field.
func (m *ProcessInstanceMutation) ResetDeploymentID() {
	m.deployment_id = nil
	delete(m.clearedFields, processinstance.FieldDeploymentID)
}

// SetStartUserID sets the "start_user_id" field.
func (m *ProcessInstanceMutation) SetStartUserID(s string) {
	m.start_user_id = &s
}

// StartUserID returns the value of the "start_user_id" field in the mutation.
func (m *ProcessInstanceMutation) StartUserID() (r string, exists bool) {
	v := m.start_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStartUserID returns the old "start_user_id" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldStartUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartUserID: %w", err)
	}
	return oldValue.StartUserID, nil
}

// ClearStartUserID clears the value of the "start_user_id" field.
func (m *ProcessInstanceMutation) ClearStartUserID() {
	m.start_user_id = nil
	m.clearedFields[processinstance.FieldStartUserID] = struct{}{}
}

// StartUserIDCleared returns if the "start_user_id" field was cleared in this mutation.
func (m *ProcessInstanceMutation) StartUserIDCleared() bool {
	_, ok := m.clearedFields[processinstance.FieldStartUserID]
	return ok
}

// ResetStartUserID resets all changes to the "start_user_id" field.
func (m *ProcessInstanceMutation) ResetStartUserID() {
	m.start_user_id = nil
	delete(m.clearedFields, processinstance.FieldStartUserID)
}

// SetStartTime sets the "start_time" field.
func (m *ProcessInstanceMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *ProcessInstanceMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *ProcessInstanceMutation) ResetStartTime() {
	m.start_time = nil
}

// SetEndTime sets the "end_time" field.
func (m *ProcessInstanceMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *ProcessInstanceMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldEndTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ClearEndTime clears the value of the "end_time" field.
func (m *ProcessInstanceMutation) ClearEndTime() {
	m.end_time = nil
	m.clearedFields[processinstance.FieldEndTime] = struct{}{}
}

// EndTimeCleared returns if the "end_time" field was cleared in this mutation.
func (m *ProcessInstanceMutation) EndTimeCleared() bool {
	_, ok := m.clearedFields[processinstance.FieldEndTime]
	return ok
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *ProcessInstanceMutation) ResetEndTime() {
	m.end_time = nil
	delete(m.clearedFields, processinstance.FieldEndTime)
}

// SetDuration sets the "duration" field.
func (m *ProcessInstanceMutation) SetDuration(i int64) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *ProcessInstanceMutation) Duration() (r int64, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldDuration(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *ProcessInstanceMutation) AddDuration(i int64) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *ProcessInstanceMutation) AddedDuration() (r int64, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ClearDuration clears the value of the "duration" field.
func (m *ProcessInstanceMutation) ClearDuration() {
	m.duration = nil
	m.addduration = nil
	m.clearedFields[processinstance.FieldDuration] = struct{}{}
}

// DurationCleared returns if the "duration" field was cleared in this mutation.
func (m *ProcessInstanceMutation) DurationCleared() bool {
	_, ok := m.clearedFields[processinstance.FieldDuration]
	return ok
}

// ResetDuration resets all changes to the "duration" field.
func (m *ProcessInstanceMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
	delete(m.clearedFields, processinstance.FieldDuration)
}

// SetDeleteReason sets the "delete_reason" field.
func (m *ProcessInstanceMutation) SetDeleteReason(s string) {
	m.delete_reason = &s
}

// DeleteReason returns the value of the "delete_reason" field in the mutation.
func (m *ProcessInstanceMutation) DeleteReason() (r string, exists bool) {
	v := m.delete_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteReason returns the old "delete_reason" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldDeleteReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteReason: %w", err)
	}
	return oldValue.DeleteReason, nil
}

// ClearDeleteReason clears the value of the "delete_reason" field.
func (m *ProcessInstanceMutation) ClearDeleteReason() {
	m.delete_reason = nil
	m.clearedFields[processinstance.FieldDeleteReason] = struct{}{}
}

// DeleteReasonCleared returns if the "delete_reason" field was cleared in this mutation.
func (m *ProcessInstanceMutation) DeleteReasonCleared() bool {
	_, ok := m.clearedFields[processinstance.FieldDeleteReason]
	return ok
}

// ResetDeleteReason resets all changes to the "delete_reason" field.
func (m *ProcessInstanceMutation) ResetDeleteReason() {
	m.delete_reason = nil
	delete(m.clearedFields, processinstance.FieldDeleteReason)
}

// SetSuperProcessInstanceID sets the "super_process_instance_id" field.
func (m *ProcessInstanceMutation) SetSuperProcessInstanceID(s string) {
	m.super_process_instance_id = &s
}

// SuperProcessInstanceID returns the value of the "super_process_instance_id" field in the mutation.
func (m *ProcessInstanceMutation) SuperProcessInstanceID() (r string, exists bool) {
	v := m.super_process_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSuperProcessInstanceID returns the old "super_process_instance_id" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldSuperProcessInstanceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuperProcessInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuperProcessInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuperProcessInstanceID: %w", err)
	}
	return oldValue.SuperProcessInstanceID, nil
}

// ClearSuperProcessInstanceID clears the value of the "super_process_instance_id" field.
func (m *ProcessInstanceMutation) ClearSuperProcessInstanceID() {
	m.super_process_instance_id = nil
	m.clearedFields[processinstance.FieldSuperProcessInstanceID] = struct{}{}
}

// SuperProcessInstanceIDCleared returns if the "super_process_instance_id" field was cleared in this mutation.
func (m *ProcessInstanceMutation) SuperProcessInstanceIDCleared() bool {
	_, ok := m.clearedFields[processinstance.FieldSuperProcessInstanceID]
	return ok
}

// ResetSuperProcessInstanceID resets all changes to the "super_process_instance_id" field.
func (m *ProcessInstanceMutation) ResetSuperProcessInstanceID() {
	m.super_process_instance_id = nil
	delete(m.clearedFields, processinstance.FieldSuperProcessInstanceID)
}

// SetRootProcessInstanceID sets the "root_process_instance_id" field.
func (m *ProcessInstanceMutation) SetRootProcessInstanceID(s string) {
	m.root_process_instance_id = &s
}

// RootProcessInstanceID returns the value of the "root_process_instance_id" field in the mutation.
func (m *ProcessInstanceMutation) RootProcessInstanceID() (r string, exists bool) {
	v := m.root_process_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRootProcessInstanceID returns the old "root_process_instance_id" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldRootProcessInstanceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRootProcessInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRootProcessInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRootProcessInstanceID: %w", err)
	}
	return oldValue.RootProcessInstanceID, nil
}

// ClearRootProcessInstanceID clears the value of the "root_process_instance_id" field.
func (m *ProcessInstanceMutation) ClearRootProcessInstanceID() {
	m.root_process_instance_id = nil
	m.clearedFields[processinstance.FieldRootProcessInstanceID] = struct{}{}
}

// RootProcessInstanceIDCleared returns if the "root_process_instance_id" field was cleared in this mutation.
func (m *ProcessInstanceMutation) RootProcessInstanceIDCleared() bool {
	_, ok := m.clearedFields[processinstance.FieldRootProcessInstanceID]
	return ok
}

// ResetRootProcessInstanceID resets all changes to the "root_process_instance_id" field.
func (m *ProcessInstanceMutation) ResetRootProcessInstanceID() {
	m.root_process_instance_id = nil
	delete(m.clearedFields, processinstance.FieldRootProcessInstanceID)
}

// SetSuspended sets the "suspended" field.
func (m *ProcessInstanceMutation) SetSuspended(b bool) {
	m.suspended = &b
}

// Suspended returns the value of the "suspended" field in the mutation.
func (m *ProcessInstanceMutation) Suspended() (r bool, exists bool) {
	v := m.suspended
	if v == nil {
		return
	}
	return *v, true
}

// OldSuspended returns the old "suspended" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldSuspended(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuspended is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuspended requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuspended: %w", err)
	}
	return oldValue.Suspended, nil
}

// ResetSuspended resets all changes to the "suspended" field.
func (m *ProcessInstanceMutation) ResetSuspended() {
	m.suspended = nil
}

// SetTenantID sets the "tenant_id" field.
func (m *ProcessInstanceMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *ProcessInstanceMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *ProcessInstanceMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetName sets the "name" field.
func (m *ProcessInstanceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProcessInstanceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *ProcessInstanceMutation) ClearName() {
	m.name = nil
	m.clearedFields[processinstance.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *ProcessInstanceMutation) NameCleared() bool {
	_, ok := m.clearedFields[processinstance.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *ProcessInstanceMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, processinstance.FieldName)
}

// SetDescription sets the "description" field.
func (m *ProcessInstanceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProcessInstanceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ProcessInstanceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[processinstance.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ProcessInstanceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[processinstance.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ProcessInstanceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, processinstance.FieldDescription)
}

// SetCallbackID sets the "callback_id" field.
func (m *ProcessInstanceMutation) SetCallbackID(s string) {
	m.callback_id = &s
}

// CallbackID returns the value of the "callback_id" field in the mutation.
func (m *ProcessInstanceMutation) CallbackID() (r string, exists bool) {
	v := m.callback_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCallbackID returns the old "callback_id" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldCallbackID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCallbackID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCallbackID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCallbackID: %w", err)
	}
	return oldValue.CallbackID, nil
}

// ClearCallbackID clears the value of the "callback_id" field.
func (m *ProcessInstanceMutation) ClearCallbackID() {
	m.callback_id = nil
	m.clearedFields[processinstance.FieldCallbackID] = struct{}{}
}

// CallbackIDCleared returns if the "callback_id" field was cleared in this mutation.
func (m *ProcessInstanceMutation) CallbackIDCleared() bool {
	_, ok := m.clearedFields[processinstance.FieldCallbackID]
	return ok
}

// ResetCallbackID resets all changes to the "callback_id" field.
func (m *ProcessInstanceMutation) ResetCallbackID() {
	m.callback_id = nil
	delete(m.clearedFields, processinstance.FieldCallbackID)
}

// SetCallbackType sets the "callback_type" field.
func (m *ProcessInstanceMutation) SetCallbackType(s string) {
	m.callback_type = &s
}

// CallbackType returns the value of the "callback_type" field in the mutation.
func (m *ProcessInstanceMutation) CallbackType() (r string, exists bool) {
	v := m.callback_type
	if v == nil {
		return
	}
	return *v, true
}

// OldCallbackType returns the old "callback_type" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldCallbackType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCallbackType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCallbackType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCallbackType: %w", err)
	}
	return oldValue.CallbackType, nil
}

// ClearCallbackType clears the value of the "callback_type" field.
func (m *ProcessInstanceMutation) ClearCallbackType() {
	m.callback_type = nil
	m.clearedFields[processinstance.FieldCallbackType] = struct{}{}
}

// CallbackTypeCleared returns if the "callback_type" field was cleared in this mutation.
func (m *ProcessInstanceMutation) CallbackTypeCleared() bool {
	_, ok := m.clearedFields[processinstance.FieldCallbackType]
	return ok
}

// ResetCallbackType resets all changes to the "callback_type" field.
func (m *ProcessInstanceMutation) ResetCallbackType() {
	m.callback_type = nil
	delete(m.clearedFields, processinstance.FieldCallbackType)
}

// SetReferenceID sets the "reference_id" field.
func (m *ProcessInstanceMutation) SetReferenceID(s string) {
	m.reference_id = &s
}

// ReferenceID returns the value of the "reference_id" field in the mutation.
func (m *ProcessInstanceMutation) ReferenceID() (r string, exists bool) {
	v := m.reference_id
	if v == nil {
		return
	}
	return *v, true
}

// OldReferenceID returns the old "reference_id" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldReferenceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferenceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferenceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferenceID: %w", err)
	}
	return oldValue.ReferenceID, nil
}

// ClearReferenceID clears the value of the "reference_id" field.
func (m *ProcessInstanceMutation) ClearReferenceID() {
	m.reference_id = nil
	m.clearedFields[processinstance.FieldReferenceID] = struct{}{}
}

// ReferenceIDCleared returns if the "reference_id" field was cleared in this mutation.
func (m *ProcessInstanceMutation) ReferenceIDCleared() bool {
	_, ok := m.clearedFields[processinstance.FieldReferenceID]
	return ok
}

// ResetReferenceID resets all changes to the "reference_id" field.
func (m *ProcessInstanceMutation) ResetReferenceID() {
	m.reference_id = nil
	delete(m.clearedFields, processinstance.FieldReferenceID)
}

// SetReferenceType sets the "reference_type" field.
func (m *ProcessInstanceMutation) SetReferenceType(s string) {
	m.reference_type = &s
}

// ReferenceType returns the value of the "reference_type" field in the mutation.
func (m *ProcessInstanceMutation) ReferenceType() (r string, exists bool) {
	v := m.reference_type
	if v == nil {
		return
	}
	return *v, true
}

// OldReferenceType returns the old "reference_type" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldReferenceType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferenceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferenceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferenceType: %w", err)
	}
	return oldValue.ReferenceType, nil
}

// ClearReferenceType clears the value of the "reference_type" field.
func (m *ProcessInstanceMutation) ClearReferenceType() {
	m.reference_type = nil
	m.clearedFields[processinstance.FieldReferenceType] = struct{}{}
}

// ReferenceTypeCleared returns if the "reference_type" field was cleared in this mutation.
func (m *ProcessInstanceMutation) ReferenceTypeCleared() bool {
	_, ok := m.clearedFields[processinstance.FieldReferenceType]
	return ok
}

// ResetReferenceType resets all changes to the "reference_type" field.
func (m *ProcessInstanceMutation) ResetReferenceType() {
	m.reference_type = nil
	delete(m.clearedFields, processinstance.FieldReferenceType)
}

// SetCreatedAt sets the "created_at" field.
func (m *ProcessInstanceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProcessInstanceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProcessInstanceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProcessInstanceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProcessInstanceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProcessInstance entity.
// If the ProcessInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessInstanceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProcessInstanceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the ProcessInstanceMutation builder.
func (m *ProcessInstanceMutation) Where(ps ...predicate.ProcessInstance) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProcessInstanceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProcessInstanceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProcessInstance, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProcessInstanceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProcessInstanceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProcessInstance).
func (m *ProcessInstanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProcessInstanceMutation) Fields() []string {
	fields := make([]string, 0, 23)
	if m.business_key != nil {
		fields = append(fields, processinstance.FieldBusinessKey)
	}
	if m.process_definition_id != nil {
		fields = append(fields, processinstance.FieldProcessDefinitionID)
	}
	if m.process_definition_key != nil {
		fields = append(fields, processinstance.FieldProcessDefinitionKey)
	}
	if m.process_definition_name != nil {
		fields = append(fields, processinstance.FieldProcessDefinitionName)
	}
	if m.process_definition_version != nil {
		fields = append(fields, processinstance.FieldProcessDefinitionVersion)
	}
	if m.deployment_id != nil {
		fields = append(fields, processinstance.FieldDeploymentID)
	}
	if m.start_user_id != nil {
		fields = append(fields, processinstance.FieldStartUserID)
	}
	if m.start_time != nil {
		fields = append(fields, processinstance.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, processinstance.FieldEndTime)
	}
	if m.duration != nil {
		fields = append(fields, processinstance.FieldDuration)
	}
	if m.delete_reason != nil {
		fields = append(fields, processinstance.FieldDeleteReason)
	}
	if m.super_process_instance_id != nil {
		fields = append(fields, processinstance.FieldSuperProcessInstanceID)
	}
	if m.root_process_instance_id != nil {
		fields = append(fields, processinstance.FieldRootProcessInstanceID)
	}
	if m.suspended != nil {
		fields = append(fields, processinstance.FieldSuspended)
	}
	if m.tenant_id != nil {
		fields = append(fields, processinstance.FieldTenantID)
	}
	if m.name != nil {
		fields = append(fields, processinstance.FieldName)
	}
	if m.description != nil {
		fields = append(fields, processinstance.FieldDescription)
	}
	if m.callback_id != nil {
		fields = append(fields, processinstance.FieldCallbackID)
	}
	if m.callback_type != nil {
		fields = append(fields, processinstance.FieldCallbackType)
	}
	if m.reference_id != nil {
		fields = append(fields, processinstance.FieldReferenceID)
	}
	if m.reference_type != nil {
		fields = append(fields, processinstance.FieldReferenceType)
	}
	if m.created_at != nil {
		fields = append(fields, processinstance.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, processinstance.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProcessInstanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case processinstance.FieldBusinessKey:
		return m.BusinessKey()
	case processinstance.FieldProcessDefinitionID:
		return m.ProcessDefinitionID()
	case processinstance.FieldProcessDefinitionKey:
		return m.ProcessDefinitionKey()
	case processinstance.FieldProcessDefinitionName:
		return m.ProcessDefinitionName()
	case processinstance.FieldProcessDefinitionVersion:
		return m.ProcessDefinitionVersion()
	case processinstance.FieldDeploymentID:
		return m.DeploymentID()
	case processinstance.FieldStartUserID:
		return m.StartUserID()
	case processinstance.FieldStartTime:
		return m.StartTime()
	case processinstance.FieldEndTime:
		return m.EndTime()
	case processinstance.FieldDuration:
		return m.Duration()
	case processinstance.FieldDeleteReason:
		return m.DeleteReason()
	case processinstance.FieldSuperProcessInstanceID:
		return m.SuperProcessInstanceID()
	case processinstance.FieldRootProcessInstanceID:
		return m.RootProcessInstanceID()
	case processinstance.FieldSuspended:
		return m.Suspended()
	case processinstance.FieldTenantID:
		return m.TenantID()
	case processinstance.FieldName:
		return m.Name()
	case processinstance.FieldDescription:
		return m.Description()
	case processinstance.FieldCallbackID:
		return m.CallbackID()
	case processinstance.FieldCallbackType:
		return m.CallbackType()
	case processinstance.FieldReferenceID:
		return m.ReferenceID()
	case processinstance.FieldReferenceType:
		return m.ReferenceType()
	case processinstance.FieldCreatedAt:
		return m.CreatedAt()
	case processinstance.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProcessInstanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case processinstance.FieldBusinessKey:
		return m.OldBusinessKey(ctx)
	case processinstance.FieldProcessDefinitionID:
		return m.OldProcessDefinitionID(ctx)
	case processinstance.FieldProcessDefinitionKey:
		return m.OldProcessDefinitionKey(ctx)
	case processinstance.FieldProcessDefinitionName:
		return m.OldProcessDefinitionName(ctx)
	case processinstance.FieldProcessDefinitionVersion:
		return m.OldProcessDefinitionVersion(ctx)
	case processinstance.FieldDeploymentID:
		return m.OldDeploymentID(ctx)
	case processinstance.FieldStartUserID:
		return m.OldStartUserID(ctx)
	case processinstance.FieldStartTime:
		return m.OldStartTime(ctx)
	case processinstance.FieldEndTime:
		return m.OldEndTime(ctx)
	case processinstance.FieldDuration:
		return m.OldDuration(ctx)
	case processinstance.FieldDeleteReason:
		return m.OldDeleteReason(ctx)
	case processinstance.FieldSuperProcessInstanceID:
		return m.OldSuperProcessInstanceID(ctx)
	case processinstance.FieldRootProcessInstanceID:
		return m.OldRootProcessInstanceID(ctx)
	case processinstance.FieldSuspended:
		return m.OldSuspended(ctx)
	case processinstance.FieldTenantID:
		return m.OldTenantID(ctx)
	case processinstance.FieldName:
		return m.OldName(ctx)
	case processinstance.FieldDescription:
		return m.OldDescription(ctx)
	case processinstance.FieldCallbackID:
		return m.OldCallbackID(ctx)
	case processinstance.FieldCallbackType:
		return m.OldCallbackType(ctx)
	case processinstance.FieldReferenceID:
		return m.OldReferenceID(ctx)
	case processinstance.FieldReferenceType:
		return m.OldReferenceType(ctx)
	case processinstance.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case processinstance.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProcessInstance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcessInstanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case processinstance.FieldBusinessKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBusinessKey(v)
		return nil
	case processinstance.FieldProcessDefinitionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessDefinitionID(v)
		return nil
	case processinstance.FieldProcessDefinitionKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessDefinitionKey(v)
		return nil
	case processinstance.FieldProcessDefinitionName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessDefinitionName(v)
		return nil
	case processinstance.FieldProcessDefinitionVersion:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessDefinitionVersion(v)
		return nil
	case processinstance.FieldDeploymentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeploymentID(v)
		return nil
	case processinstance.FieldStartUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartUserID(v)
		return nil
	case processinstance.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case processinstance.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case processinstance.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case processinstance.FieldDeleteReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteReason(v)
		return nil
	case processinstance.FieldSuperProcessInstanceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuperProcessInstanceID(v)
		return nil
	case processinstance.FieldRootProcessInstanceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRootProcessInstanceID(v)
		return nil
	case processinstance.FieldSuspended:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuspended(v)
		return nil
	case processinstance.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case processinstance.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case processinstance.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case processinstance.FieldCallbackID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCallbackID(v)
		return nil
	case processinstance.FieldCallbackType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCallbackType(v)
		return nil
	case processinstance.FieldReferenceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferenceID(v)
		return nil
	case processinstance.FieldReferenceType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferenceType(v)
		return nil
	case processinstance.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case processinstance.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProcessInstance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProcessInstanceMutation) AddedFields() []string {
	var fields []string
	if m.addprocess_definition_id != nil {
		fields = append(fields, processinstance.FieldProcessDefinitionID)
	}
	if m.addprocess_definition_version != nil {
		fields = append(fields, processinstance.FieldProcessDefinitionVersion)
	}
	if m.addduration != nil {
		fields = append(fields, processinstance.FieldDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProcessInstanceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case processinstance.FieldProcessDefinitionID:
		return m.AddedProcessDefinitionID()
	case processinstance.FieldProcessDefinitionVersion:
		return m.AddedProcessDefinitionVersion()
	case processinstance.FieldDuration:
		return m.AddedDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcessInstanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case processinstance.FieldProcessDefinitionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProcessDefinitionID(v)
		return nil
	case processinstance.FieldProcessDefinitionVersion:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProcessDefinitionVersion(v)
		return nil
	case processinstance.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	}
	return fmt.Errorf("unknown ProcessInstance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProcessInstanceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(processinstance.FieldBusinessKey) {
		fields = append(fields, processinstance.FieldBusinessKey)
	}
	if m.FieldCleared(processinstance.FieldProcessDefinitionName) {
		fields = append(fields, processinstance.FieldProcessDefinitionName)
	}
	if m.FieldCleared(processinstance.FieldDeploymentID) {
		fields = append(fields, processinstance.FieldDeploymentID)
	}
	if m.FieldCleared(processinstance.FieldStartUserID) {
		fields = append(fields, processinstance.FieldStartUserID)
	}
	if m.FieldCleared(processinstance.FieldEndTime) {
		fields = append(fields, processinstance.FieldEndTime)
	}
	if m.FieldCleared(processinstance.FieldDuration) {
		fields = append(fields, processinstance.FieldDuration)
	}
	if m.FieldCleared(processinstance.FieldDeleteReason) {
		fields = append(fields, processinstance.FieldDeleteReason)
	}
	if m.FieldCleared(processinstance.FieldSuperProcessInstanceID) {
		fields = append(fields, processinstance.FieldSuperProcessInstanceID)
	}
	if m.FieldCleared(processinstance.FieldRootProcessInstanceID) {
		fields = append(fields, processinstance.FieldRootProcessInstanceID)
	}
	if m.FieldCleared(processinstance.FieldName) {
		fields = append(fields, processinstance.FieldName)
	}
	if m.FieldCleared(processinstance.FieldDescription) {
		fields = append(fields, processinstance.FieldDescription)
	}
	if m.FieldCleared(processinstance.FieldCallbackID) {
		fields = append(fields, processinstance.FieldCallbackID)
	}
	if m.FieldCleared(processinstance.FieldCallbackType) {
		fields = append(fields, processinstance.FieldCallbackType)
	}
	if m.FieldCleared(processinstance.FieldReferenceID) {
		fields = append(fields, processinstance.FieldReferenceID)
	}
	if m.FieldCleared(processinstance.FieldReferenceType) {
		fields = append(fields, processinstance.FieldReferenceType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProcessInstanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProcessInstanceMutation) ClearField(name string) error {
	switch name {
	case processinstance.FieldBusinessKey:
		m.ClearBusinessKey()
		return nil
	case processinstance.FieldProcessDefinitionName:
		m.ClearProcessDefinitionName()
		return nil
	case processinstance.FieldDeploymentID:
		m.ClearDeploymentID()
		return nil
	case processinstance.FieldStartUserID:
		m.ClearStartUserID()
		return nil
	case processinstance.FieldEndTime:
		m.ClearEndTime()
		return nil
	case processinstance.FieldDuration:
		m.ClearDuration()
		return nil
	case processinstance.FieldDeleteReason:
		m.ClearDeleteReason()
		return nil
	case processinstance.FieldSuperProcessInstanceID:
		m.ClearSuperProcessInstanceID()
		return nil
	case processinstance.FieldRootProcessInstanceID:
		m.ClearRootProcessInstanceID()
		return nil
	case processinstance.FieldName:
		m.ClearName()
		return nil
	case processinstance.FieldDescription:
		m.ClearDescription()
		return nil
	case processinstance.FieldCallbackID:
		m.ClearCallbackID()
		return nil
	case processinstance.FieldCallbackType:
		m.ClearCallbackType()
		return nil
	case processinstance.FieldReferenceID:
		m.ClearReferenceID()
		return nil
	case processinstance.FieldReferenceType:
		m.ClearReferenceType()
		return nil
	}
	return fmt.Errorf("unknown ProcessInstance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProcessInstanceMutation) ResetField(name string) error {
	switch name {
	case processinstance.FieldBusinessKey:
		m.ResetBusinessKey()
		return nil
	case processinstance.FieldProcessDefinitionID:
		m.ResetProcessDefinitionID()
		return nil
	case processinstance.FieldProcessDefinitionKey:
		m.ResetProcessDefinitionKey()
		return nil
	case processinstance.FieldProcessDefinitionName:
		m.ResetProcessDefinitionName()
		return nil
	case processinstance.FieldProcessDefinitionVersion:
		m.ResetProcessDefinitionVersion()
		return nil
	case processinstance.FieldDeploymentID:
		m.ResetDeploymentID()
		return nil
	case processinstance.FieldStartUserID:
		m.ResetStartUserID()
		return nil
	case processinstance.FieldStartTime:
		m.ResetStartTime()
		return nil
	case processinstance.FieldEndTime:
		m.ResetEndTime()
		return nil
	case processinstance.FieldDuration:
		m.ResetDuration()
		return nil
	case processinstance.FieldDeleteReason:
		m.ResetDeleteReason()
		return nil
	case processinstance.FieldSuperProcessInstanceID:
		m.ResetSuperProcessInstanceID()
		return nil
	case processinstance.FieldRootProcessInstanceID:
		m.ResetRootProcessInstanceID()
		return nil
	case processinstance.FieldSuspended:
		m.ResetSuspended()
		return nil
	case processinstance.FieldTenantID:
		m.ResetTenantID()
		return nil
	case processinstance.FieldName:
		m.ResetName()
		return nil
	case processinstance.FieldDescription:
		m.ResetDescription()
		return nil
	case processinstance.FieldCallbackID:
		m.ResetCallbackID()
		return nil
	case processinstance.FieldCallbackType:
		m.ResetCallbackType()
		return nil
	case processinstance.FieldReferenceID:
		m.ResetReferenceID()
		return nil
	case processinstance.FieldReferenceType:
		m.ResetReferenceType()
		return nil
	case processinstance.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case processinstance.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProcessInstance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProcessInstanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProcessInstanceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProcessInstanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProcessInstanceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProcessInstanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProcessInstanceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProcessInstanceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ProcessInstance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProcessInstanceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ProcessInstance edge %s", name)
}

// ProcessVariableMutation represents an operation that mutates the ProcessVariable nodes in the graph.
type ProcessVariableMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int64
	name                     *string
	_type                    *string
	text_value               *string
	text_value2              *string
	long_value               *int64
	addlong_value            *int64
	double_value             *float64
	adddouble_value          *float64
	byte_array_value         *[]byte
	execution_id             *string
	process_instance_id      *int64
	addprocess_instance_id   *int64
	process_definition_id    *int64
	addprocess_definition_id *int64
	case_execution_id        *string
	case_instance_id         *string
	task_id                  *int64
	addtask_id               *int64
	activity_instance_id     *string
	tenant_id                *string
	sequence_counter         *int32
	addsequence_counter      *int32
	concurrent_local         *bool
	scope_id                 *string
	scope_type               *string
	created_at               *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	done                     bool
	oldValue                 func(context.Context) (*ProcessVariable, error)
	predicates               []predicate.ProcessVariable
}

var _ ent.Mutation = (*ProcessVariableMutation)(nil)

// processvariableOption allows management of the mutation configuration using functional options.
type processvariableOption func(*ProcessVariableMutation)

// newProcessVariableMutation creates new mutation for the ProcessVariable entity.
func newProcessVariableMutation(c config, op Op, opts ...processvariableOption) *ProcessVariableMutation {
	m := &ProcessVariableMutation{
		config:        c,
		op:            op,
		typ:           TypeProcessVariable,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProcessVariableID sets the ID field of the mutation.
func withProcessVariableID(id int64) processvariableOption {
	return func(m *ProcessVariableMutation) {
		var (
			err   error
			once  sync.Once
			value *ProcessVariable
		)
		m.oldValue = func(ctx context.Context) (*ProcessVariable, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProcessVariable.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProcessVariable sets the old ProcessVariable of the mutation.
func withProcessVariable(node *ProcessVariable) processvariableOption {
	return func(m *ProcessVariableMutation) {
		m.oldValue = func(context.Context) (*ProcessVariable, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProcessVariableMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProcessVariableMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ProcessVariable entities.
func (m *ProcessVariableMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProcessVariableMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProcessVariableMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProcessVariable.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProcessVariableMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProcessVariableMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProcessVariableMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *ProcessVariableMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *ProcessVariableMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ProcessVariableMutation) ResetType() {
	m._type = nil
}

// SetTextValue sets the "text_value" field.
func (m *ProcessVariableMutation) SetTextValue(s string) {
	m.text_value = &s
}

// TextValue returns the value of the "text_value" field in the mutation.
func (m *ProcessVariableMutation) TextValue() (r string, exists bool) {
	v := m.text_value
	if v == nil {
		return
	}
	return *v, true
}

// OldTextValue returns the old "text_value" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldTextValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTextValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTextValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTextValue: %w", err)
	}
	return oldValue.TextValue, nil
}

// ClearTextValue clears the value of the "text_value" field.
func (m *ProcessVariableMutation) ClearTextValue() {
	m.text_value = nil
	m.clearedFields[processvariable.FieldTextValue] = struct{}{}
}

// TextValueCleared returns if the "text_value" field was cleared in this mutation.
func (m *ProcessVariableMutation) TextValueCleared() bool {
	_, ok := m.clearedFields[processvariable.FieldTextValue]
	return ok
}

// ResetTextValue resets all changes to the "text_value" field.
func (m *ProcessVariableMutation) ResetTextValue() {
	m.text_value = nil
	delete(m.clearedFields, processvariable.FieldTextValue)
}

// SetTextValue2 sets the "text_value2" field.
func (m *ProcessVariableMutation) SetTextValue2(s string) {
	m.text_value2 = &s
}

// TextValue2 returns the value of the "text_value2" field in the mutation.
func (m *ProcessVariableMutation) TextValue2() (r string, exists bool) {
	v := m.text_value2
	if v == nil {
		return
	}
	return *v, true
}

// OldTextValue2 returns the old "text_value2" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldTextValue2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTextValue2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTextValue2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTextValue2: %w", err)
	}
	return oldValue.TextValue2, nil
}

// ClearTextValue2 clears the value of the "text_value2" field.
func (m *ProcessVariableMutation) ClearTextValue2() {
	m.text_value2 = nil
	m.clearedFields[processvariable.FieldTextValue2] = struct{}{}
}

// TextValue2Cleared returns if the "text_value2" field was cleared in this mutation.
func (m *ProcessVariableMutation) TextValue2Cleared() bool {
	_, ok := m.clearedFields[processvariable.FieldTextValue2]
	return ok
}

// ResetTextValue2 resets all changes to the "text_value2" field.
func (m *ProcessVariableMutation) ResetTextValue2() {
	m.text_value2 = nil
	delete(m.clearedFields, processvariable.FieldTextValue2)
}

// SetLongValue sets the "long_value" field.
func (m *ProcessVariableMutation) SetLongValue(i int64) {
	m.long_value = &i
	m.addlong_value = nil
}

// LongValue returns the value of the "long_value" field in the mutation.
func (m *ProcessVariableMutation) LongValue() (r int64, exists bool) {
	v := m.long_value
	if v == nil {
		return
	}
	return *v, true
}

// OldLongValue returns the old "long_value" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldLongValue(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongValue: %w", err)
	}
	return oldValue.LongValue, nil
}

// AddLongValue adds i to the "long_value" field.
func (m *ProcessVariableMutation) AddLongValue(i int64) {
	if m.addlong_value != nil {
		*m.addlong_value += i
	} else {
		m.addlong_value = &i
	}
}

// AddedLongValue returns the value that was added to the "long_value" field in this mutation.
func (m *ProcessVariableMutation) AddedLongValue() (r int64, exists bool) {
	v := m.addlong_value
	if v == nil {
		return
	}
	return *v, true
}

// ClearLongValue clears the value of the "long_value" field.
func (m *ProcessVariableMutation) ClearLongValue() {
	m.long_value = nil
	m.addlong_value = nil
	m.clearedFields[processvariable.FieldLongValue] = struct{}{}
}

// LongValueCleared returns if the "long_value" field was cleared in this mutation.
func (m *ProcessVariableMutation) LongValueCleared() bool {
	_, ok := m.clearedFields[processvariable.FieldLongValue]
	return ok
}

// ResetLongValue resets all changes to the "long_value" field.
func (m *ProcessVariableMutation) ResetLongValue() {
	m.long_value = nil
	m.addlong_value = nil
	delete(m.clearedFields, processvariable.FieldLongValue)
}

// SetDoubleValue sets the "double_value" field.
func (m *ProcessVariableMutation) SetDoubleValue(f float64) {
	m.double_value = &f
	m.adddouble_value = nil
}

// DoubleValue returns the value of the "double_value" field in the mutation.
func (m *ProcessVariableMutation) DoubleValue() (r float64, exists bool) {
	v := m.double_value
	if v == nil {
		return
	}
	return *v, true
}

// OldDoubleValue returns the old "double_value" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldDoubleValue(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDoubleValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDoubleValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoubleValue: %w", err)
	}
	return oldValue.DoubleValue, nil
}

// AddDoubleValue adds f to the "double_value" field.
func (m *ProcessVariableMutation) AddDoubleValue(f float64) {
	if m.adddouble_value != nil {
		*m.adddouble_value += f
	} else {
		m.adddouble_value = &f
	}
}

// AddedDoubleValue returns the value that was added to the "double_value" field in this mutation.
func (m *ProcessVariableMutation) AddedDoubleValue() (r float64, exists bool) {
	v := m.adddouble_value
	if v == nil {
		return
	}
	return *v, true
}

// ClearDoubleValue clears the value of the "double_value" field.
func (m *ProcessVariableMutation) ClearDoubleValue() {
	m.double_value = nil
	m.adddouble_value = nil
	m.clearedFields[processvariable.FieldDoubleValue] = struct{}{}
}

// DoubleValueCleared returns if the "double_value" field was cleared in this mutation.
func (m *ProcessVariableMutation) DoubleValueCleared() bool {
	_, ok := m.clearedFields[processvariable.FieldDoubleValue]
	return ok
}

// ResetDoubleValue resets all changes to the "double_value" field.
func (m *ProcessVariableMutation) ResetDoubleValue() {
	m.double_value = nil
	m.adddouble_value = nil
	delete(m.clearedFields, processvariable.FieldDoubleValue)
}

// SetByteArrayValue sets the "byte_array_value" field.
func (m *ProcessVariableMutation) SetByteArrayValue(b []byte) {
	m.byte_array_value = &b
}

// ByteArrayValue returns the value of the "byte_array_value" field in the mutation.
func (m *ProcessVariableMutation) ByteArrayValue() (r []byte, exists bool) {
	v := m.byte_array_value
	if v == nil {
		return
	}
	return *v, true
}

// OldByteArrayValue returns the old "byte_array_value" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldByteArrayValue(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldByteArrayValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldByteArrayValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldByteArrayValue: %w", err)
	}
	return oldValue.ByteArrayValue, nil
}

// ClearByteArrayValue clears the value of the "byte_array_value" field.
func (m *ProcessVariableMutation) ClearByteArrayValue() {
	m.byte_array_value = nil
	m.clearedFields[processvariable.FieldByteArrayValue] = struct{}{}
}

// ByteArrayValueCleared returns if the "byte_array_value" field was cleared in this mutation.
func (m *ProcessVariableMutation) ByteArrayValueCleared() bool {
	_, ok := m.clearedFields[processvariable.FieldByteArrayValue]
	return ok
}

// ResetByteArrayValue resets all changes to the "byte_array_value" field.
func (m *ProcessVariableMutation) ResetByteArrayValue() {
	m.byte_array_value = nil
	delete(m.clearedFields, processvariable.FieldByteArrayValue)
}

// SetExecutionID sets the "execution_id" field.
func (m *ProcessVariableMutation) SetExecutionID(s string) {
	m.execution_id = &s
}

// ExecutionID returns the value of the "execution_id" field in the mutation.
func (m *ProcessVariableMutation) ExecutionID() (r string, exists bool) {
	v := m.execution_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExecutionID returns the old "execution_id" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldExecutionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecutionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecutionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecutionID: %w", err)
	}
	return oldValue.ExecutionID, nil
}

// ClearExecutionID clears the value of the "execution_id" field.
func (m *ProcessVariableMutation) ClearExecutionID() {
	m.execution_id = nil
	m.clearedFields[processvariable.FieldExecutionID] = struct{}{}
}

// ExecutionIDCleared returns if the "execution_id" field was cleared in this mutation.
func (m *ProcessVariableMutation) ExecutionIDCleared() bool {
	_, ok := m.clearedFields[processvariable.FieldExecutionID]
	return ok
}

// ResetExecutionID resets all changes to the "execution_id" field.
func (m *ProcessVariableMutation) ResetExecutionID() {
	m.execution_id = nil
	delete(m.clearedFields, processvariable.FieldExecutionID)
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (m *ProcessVariableMutation) SetProcessInstanceID(i int64) {
	m.process_instance_id = &i
	m.addprocess_instance_id = nil
}

// ProcessInstanceID returns the value of the "process_instance_id" field in the mutation.
func (m *ProcessVariableMutation) ProcessInstanceID() (r int64, exists bool) {
	v := m.process_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessInstanceID returns the old "process_instance_id" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldProcessInstanceID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessInstanceID: %w", err)
	}
	return oldValue.ProcessInstanceID, nil
}

// AddProcessInstanceID adds i to the "process_instance_id" field.
func (m *ProcessVariableMutation) AddProcessInstanceID(i int64) {
	if m.addprocess_instance_id != nil {
		*m.addprocess_instance_id += i
	} else {
		m.addprocess_instance_id = &i
	}
}

// AddedProcessInstanceID returns the value that was added to the "process_instance_id" field in this mutation.
func (m *ProcessVariableMutation) AddedProcessInstanceID() (r int64, exists bool) {
	v := m.addprocess_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearProcessInstanceID clears the value of the "process_instance_id" field.
func (m *ProcessVariableMutation) ClearProcessInstanceID() {
	m.process_instance_id = nil
	m.addprocess_instance_id = nil
	m.clearedFields[processvariable.FieldProcessInstanceID] = struct{}{}
}

// ProcessInstanceIDCleared returns if the "process_instance_id" field was cleared in this mutation.
func (m *ProcessVariableMutation) ProcessInstanceIDCleared() bool {
	_, ok := m.clearedFields[processvariable.FieldProcessInstanceID]
	return ok
}

// ResetProcessInstanceID resets all changes to the "process_instance_id" field.
func (m *ProcessVariableMutation) ResetProcessInstanceID() {
	m.process_instance_id = nil
	m.addprocess_instance_id = nil
	delete(m.clearedFields, processvariable.FieldProcessInstanceID)
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (m *ProcessVariableMutation) SetProcessDefinitionID(i int64) {
	m.process_definition_id = &i
	m.addprocess_definition_id = nil
}

// ProcessDefinitionID returns the value of the "process_definition_id" field in the mutation.
func (m *ProcessVariableMutation) ProcessDefinitionID() (r int64, exists bool) {
	v := m.process_definition_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessDefinitionID returns the old "process_definition_id" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldProcessDefinitionID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessDefinitionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessDefinitionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessDefinitionID: %w", err)
	}
	return oldValue.ProcessDefinitionID, nil
}

// AddProcessDefinitionID adds i to the "process_definition_id" field.
func (m *ProcessVariableMutation) AddProcessDefinitionID(i int64) {
	if m.addprocess_definition_id != nil {
		*m.addprocess_definition_id += i
	} else {
		m.addprocess_definition_id = &i
	}
}

// AddedProcessDefinitionID returns the value that was added to the "process_definition_id" field in this mutation.
func (m *ProcessVariableMutation) AddedProcessDefinitionID() (r int64, exists bool) {
	v := m.addprocess_definition_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearProcessDefinitionID clears the value of the "process_definition_id" field.
func (m *ProcessVariableMutation) ClearProcessDefinitionID() {
	m.process_definition_id = nil
	m.addprocess_definition_id = nil
	m.clearedFields[processvariable.FieldProcessDefinitionID] = struct{}{}
}

// ProcessDefinitionIDCleared returns if the "process_definition_id" field was cleared in this mutation.
func (m *ProcessVariableMutation) ProcessDefinitionIDCleared() bool {
	_, ok := m.clearedFields[processvariable.FieldProcessDefinitionID]
	return ok
}

// ResetProcessDefinitionID resets all changes to the "process_definition_id" field.
func (m *ProcessVariableMutation) ResetProcessDefinitionID() {
	m.process_definition_id = nil
	m.addprocess_definition_id = nil
	delete(m.clearedFields, processvariable.FieldProcessDefinitionID)
}

// SetCaseExecutionID sets the "case_execution_id" field.
func (m *ProcessVariableMutation) SetCaseExecutionID(s string) {
	m.case_execution_id = &s
}

// CaseExecutionID returns the value of the "case_execution_id" field in the mutation.
func (m *ProcessVariableMutation) CaseExecutionID() (r string, exists bool) {
	v := m.case_execution_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCaseExecutionID returns the old "case_execution_id" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldCaseExecutionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCaseExecutionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCaseExecutionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCaseExecutionID: %w", err)
	}
	return oldValue.CaseExecutionID, nil
}

// ClearCaseExecutionID clears the value of the "case_execution_id" field.
func (m *ProcessVariableMutation) ClearCaseExecutionID() {
	m.case_execution_id = nil
	m.clearedFields[processvariable.FieldCaseExecutionID] = struct{}{}
}

// CaseExecutionIDCleared returns if the "case_execution_id" field was cleared in this mutation.
func (m *ProcessVariableMutation) CaseExecutionIDCleared() bool {
	_, ok := m.clearedFields[processvariable.FieldCaseExecutionID]
	return ok
}

// ResetCaseExecutionID resets all changes to the "case_execution_id" field.
func (m *ProcessVariableMutation) ResetCaseExecutionID() {
	m.case_execution_id = nil
	delete(m.clearedFields, processvariable.FieldCaseExecutionID)
}

// SetCaseInstanceID sets the "case_instance_id" field.
func (m *ProcessVariableMutation) SetCaseInstanceID(s string) {
	m.case_instance_id = &s
}

// CaseInstanceID returns the value of the "case_instance_id" field in the mutation.
func (m *ProcessVariableMutation) CaseInstanceID() (r string, exists bool) {
	v := m.case_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCaseInstanceID returns the old "case_instance_id" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldCaseInstanceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCaseInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCaseInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCaseInstanceID: %w", err)
	}
	return oldValue.CaseInstanceID, nil
}

// ClearCaseInstanceID clears the value of the "case_instance_id" field.
func (m *ProcessVariableMutation) ClearCaseInstanceID() {
	m.case_instance_id = nil
	m.clearedFields[processvariable.FieldCaseInstanceID] = struct{}{}
}

// CaseInstanceIDCleared returns if the "case_instance_id" field was cleared in this mutation.
func (m *ProcessVariableMutation) CaseInstanceIDCleared() bool {
	_, ok := m.clearedFields[processvariable.FieldCaseInstanceID]
	return ok
}

// ResetCaseInstanceID resets all changes to the "case_instance_id" field.
func (m *ProcessVariableMutation) ResetCaseInstanceID() {
	m.case_instance_id = nil
	delete(m.clearedFields, processvariable.FieldCaseInstanceID)
}

// SetTaskID sets the "task_id" field.
func (m *ProcessVariableMutation) SetTaskID(i int64) {
	m.task_id = &i
	m.addtask_id = nil
}

// TaskID returns the value of the "task_id" field in the mutation.
func (m *ProcessVariableMutation) TaskID() (r int64, exists bool) {
	v := m.task_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskID returns the old "task_id" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldTaskID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskID: %w", err)
	}
	return oldValue.TaskID, nil
}

// AddTaskID adds i to the "task_id" field.
func (m *ProcessVariableMutation) AddTaskID(i int64) {
	if m.addtask_id != nil {
		*m.addtask_id += i
	} else {
		m.addtask_id = &i
	}
}

// AddedTaskID returns the value that was added to the "task_id" field in this mutation.
func (m *ProcessVariableMutation) AddedTaskID() (r int64, exists bool) {
	v := m.addtask_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTaskID clears the value of the "task_id" field.
func (m *ProcessVariableMutation) ClearTaskID() {
	m.task_id = nil
	m.addtask_id = nil
	m.clearedFields[processvariable.FieldTaskID] = struct{}{}
}

// TaskIDCleared returns if the "task_id" field was cleared in this mutation.
func (m *ProcessVariableMutation) TaskIDCleared() bool {
	_, ok := m.clearedFields[processvariable.FieldTaskID]
	return ok
}

// ResetTaskID resets all changes to the "task_id" field.
func (m *ProcessVariableMutation) ResetTaskID() {
	m.task_id = nil
	m.addtask_id = nil
	delete(m.clearedFields, processvariable.FieldTaskID)
}

// SetActivityInstanceID sets the "activity_instance_id" field.
func (m *ProcessVariableMutation) SetActivityInstanceID(s string) {
	m.activity_instance_id = &s
}

// ActivityInstanceID returns the value of the "activity_instance_id" field in the mutation.
func (m *ProcessVariableMutation) ActivityInstanceID() (r string, exists bool) {
	v := m.activity_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityInstanceID returns the old "activity_instance_id" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldActivityInstanceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityInstanceID: %w", err)
	}
	return oldValue.ActivityInstanceID, nil
}

// ClearActivityInstanceID clears the value of the "activity_instance_id" field.
func (m *ProcessVariableMutation) ClearActivityInstanceID() {
	m.activity_instance_id = nil
	m.clearedFields[processvariable.FieldActivityInstanceID] = struct{}{}
}

// ActivityInstanceIDCleared returns if the "activity_instance_id" field was cleared in this mutation.
func (m *ProcessVariableMutation) ActivityInstanceIDCleared() bool {
	_, ok := m.clearedFields[processvariable.FieldActivityInstanceID]
	return ok
}

// ResetActivityInstanceID resets all changes to the "activity_instance_id" field.
func (m *ProcessVariableMutation) ResetActivityInstanceID() {
	m.activity_instance_id = nil
	delete(m.clearedFields, processvariable.FieldActivityInstanceID)
}

// SetTenantID sets the "tenant_id" field.
func (m *ProcessVariableMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *ProcessVariableMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *ProcessVariableMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetSequenceCounter sets the "sequence_counter" field.
func (m *ProcessVariableMutation) SetSequenceCounter(i int32) {
	m.sequence_counter = &i
	m.addsequence_counter = nil
}

// SequenceCounter returns the value of the "sequence_counter" field in the mutation.
func (m *ProcessVariableMutation) SequenceCounter() (r int32, exists bool) {
	v := m.sequence_counter
	if v == nil {
		return
	}
	return *v, true
}

// OldSequenceCounter returns the old "sequence_counter" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldSequenceCounter(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSequenceCounter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSequenceCounter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSequenceCounter: %w", err)
	}
	return oldValue.SequenceCounter, nil
}

// AddSequenceCounter adds i to the "sequence_counter" field.
func (m *ProcessVariableMutation) AddSequenceCounter(i int32) {
	if m.addsequence_counter != nil {
		*m.addsequence_counter += i
	} else {
		m.addsequence_counter = &i
	}
}

// AddedSequenceCounter returns the value that was added to the "sequence_counter" field in this mutation.
func (m *ProcessVariableMutation) AddedSequenceCounter() (r int32, exists bool) {
	v := m.addsequence_counter
	if v == nil {
		return
	}
	return *v, true
}

// ResetSequenceCounter resets all changes to the "sequence_counter" field.
func (m *ProcessVariableMutation) ResetSequenceCounter() {
	m.sequence_counter = nil
	m.addsequence_counter = nil
}

// SetConcurrentLocal sets the "concurrent_local" field.
func (m *ProcessVariableMutation) SetConcurrentLocal(b bool) {
	m.concurrent_local = &b
}

// ConcurrentLocal returns the value of the "concurrent_local" field in the mutation.
func (m *ProcessVariableMutation) ConcurrentLocal() (r bool, exists bool) {
	v := m.concurrent_local
	if v == nil {
		return
	}
	return *v, true
}

// OldConcurrentLocal returns the old "concurrent_local" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldConcurrentLocal(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConcurrentLocal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConcurrentLocal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConcurrentLocal: %w", err)
	}
	return oldValue.ConcurrentLocal, nil
}

// ResetConcurrentLocal resets all changes to the "concurrent_local" field.
func (m *ProcessVariableMutation) ResetConcurrentLocal() {
	m.concurrent_local = nil
}

// SetScopeID sets the "scope_id" field.
func (m *ProcessVariableMutation) SetScopeID(s string) {
	m.scope_id = &s
}

// ScopeID returns the value of the "scope_id" field in the mutation.
func (m *ProcessVariableMutation) ScopeID() (r string, exists bool) {
	v := m.scope_id
	if v == nil {
		return
	}
	return *v, true
}

// OldScopeID returns the old "scope_id" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldScopeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScopeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScopeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScopeID: %w", err)
	}
	return oldValue.ScopeID, nil
}

// ClearScopeID clears the value of the "scope_id" field.
func (m *ProcessVariableMutation) ClearScopeID() {
	m.scope_id = nil
	m.clearedFields[processvariable.FieldScopeID] = struct{}{}
}

// ScopeIDCleared returns if the "scope_id" field was cleared in this mutation.
func (m *ProcessVariableMutation) ScopeIDCleared() bool {
	_, ok := m.clearedFields[processvariable.FieldScopeID]
	return ok
}

// ResetScopeID resets all changes to the "scope_id" field.
func (m *ProcessVariableMutation) ResetScopeID() {
	m.scope_id = nil
	delete(m.clearedFields, processvariable.FieldScopeID)
}

// SetScopeType sets the "scope_type" field.
func (m *ProcessVariableMutation) SetScopeType(s string) {
	m.scope_type = &s
}

// ScopeType returns the value of the "scope_type" field in the mutation.
func (m *ProcessVariableMutation) ScopeType() (r string, exists bool) {
	v := m.scope_type
	if v == nil {
		return
	}
	return *v, true
}

// OldScopeType returns the old "scope_type" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldScopeType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScopeType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScopeType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScopeType: %w", err)
	}
	return oldValue.ScopeType, nil
}

// ClearScopeType clears the value of the "scope_type" field.
func (m *ProcessVariableMutation) ClearScopeType() {
	m.scope_type = nil
	m.clearedFields[processvariable.FieldScopeType] = struct{}{}
}

// ScopeTypeCleared returns if the "scope_type" field was cleared in this mutation.
func (m *ProcessVariableMutation) ScopeTypeCleared() bool {
	_, ok := m.clearedFields[processvariable.FieldScopeType]
	return ok
}

// ResetScopeType resets all changes to the "scope_type" field.
func (m *ProcessVariableMutation) ResetScopeType() {
	m.scope_type = nil
	delete(m.clearedFields, processvariable.FieldScopeType)
}

// SetCreatedAt sets the "created_at" field.
func (m *ProcessVariableMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProcessVariableMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProcessVariableMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProcessVariableMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProcessVariableMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ProcessVariable entity.
// If the ProcessVariable object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessVariableMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProcessVariableMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the ProcessVariableMutation builder.
func (m *ProcessVariableMutation) Where(ps ...predicate.ProcessVariable) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProcessVariableMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProcessVariableMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProcessVariable, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProcessVariableMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProcessVariableMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProcessVariable).
func (m *ProcessVariableMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProcessVariableMutation) Fields() []string {
	fields := make([]string, 0, 21)
	if m.name != nil {
		fields = append(fields, processvariable.FieldName)
	}
	if m._type != nil {
		fields = append(fields, processvariable.FieldType)
	}
	if m.text_value != nil {
		fields = append(fields, processvariable.FieldTextValue)
	}
	if m.text_value2 != nil {
		fields = append(fields, processvariable.FieldTextValue2)
	}
	if m.long_value != nil {
		fields = append(fields, processvariable.FieldLongValue)
	}
	if m.double_value != nil {
		fields = append(fields, processvariable.FieldDoubleValue)
	}
	if m.byte_array_value != nil {
		fields = append(fields, processvariable.FieldByteArrayValue)
	}
	if m.execution_id != nil {
		fields = append(fields, processvariable.FieldExecutionID)
	}
	if m.process_instance_id != nil {
		fields = append(fields, processvariable.FieldProcessInstanceID)
	}
	if m.process_definition_id != nil {
		fields = append(fields, processvariable.FieldProcessDefinitionID)
	}
	if m.case_execution_id != nil {
		fields = append(fields, processvariable.FieldCaseExecutionID)
	}
	if m.case_instance_id != nil {
		fields = append(fields, processvariable.FieldCaseInstanceID)
	}
	if m.task_id != nil {
		fields = append(fields, processvariable.FieldTaskID)
	}
	if m.activity_instance_id != nil {
		fields = append(fields, processvariable.FieldActivityInstanceID)
	}
	if m.tenant_id != nil {
		fields = append(fields, processvariable.FieldTenantID)
	}
	if m.sequence_counter != nil {
		fields = append(fields, processvariable.FieldSequenceCounter)
	}
	if m.concurrent_local != nil {
		fields = append(fields, processvariable.FieldConcurrentLocal)
	}
	if m.scope_id != nil {
		fields = append(fields, processvariable.FieldScopeID)
	}
	if m.scope_type != nil {
		fields = append(fields, processvariable.FieldScopeType)
	}
	if m.created_at != nil {
		fields = append(fields, processvariable.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, processvariable.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProcessVariableMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case processvariable.FieldName:
		return m.Name()
	case processvariable.FieldType:
		return m.GetType()
	case processvariable.FieldTextValue:
		return m.TextValue()
	case processvariable.FieldTextValue2:
		return m.TextValue2()
	case processvariable.FieldLongValue:
		return m.LongValue()
	case processvariable.FieldDoubleValue:
		return m.DoubleValue()
	case processvariable.FieldByteArrayValue:
		return m.ByteArrayValue()
	case processvariable.FieldExecutionID:
		return m.ExecutionID()
	case processvariable.FieldProcessInstanceID:
		return m.ProcessInstanceID()
	case processvariable.FieldProcessDefinitionID:
		return m.ProcessDefinitionID()
	case processvariable.FieldCaseExecutionID:
		return m.CaseExecutionID()
	case processvariable.FieldCaseInstanceID:
		return m.CaseInstanceID()
	case processvariable.FieldTaskID:
		return m.TaskID()
	case processvariable.FieldActivityInstanceID:
		return m.ActivityInstanceID()
	case processvariable.FieldTenantID:
		return m.TenantID()
	case processvariable.FieldSequenceCounter:
		return m.SequenceCounter()
	case processvariable.FieldConcurrentLocal:
		return m.ConcurrentLocal()
	case processvariable.FieldScopeID:
		return m.ScopeID()
	case processvariable.FieldScopeType:
		return m.ScopeType()
	case processvariable.FieldCreatedAt:
		return m.CreatedAt()
	case processvariable.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProcessVariableMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case processvariable.FieldName:
		return m.OldName(ctx)
	case processvariable.FieldType:
		return m.OldType(ctx)
	case processvariable.FieldTextValue:
		return m.OldTextValue(ctx)
	case processvariable.FieldTextValue2:
		return m.OldTextValue2(ctx)
	case processvariable.FieldLongValue:
		return m.OldLongValue(ctx)
	case processvariable.FieldDoubleValue:
		return m.OldDoubleValue(ctx)
	case processvariable.FieldByteArrayValue:
		return m.OldByteArrayValue(ctx)
	case processvariable.FieldExecutionID:
		return m.OldExecutionID(ctx)
	case processvariable.FieldProcessInstanceID:
		return m.OldProcessInstanceID(ctx)
	case processvariable.FieldProcessDefinitionID:
		return m.OldProcessDefinitionID(ctx)
	case processvariable.FieldCaseExecutionID:
		return m.OldCaseExecutionID(ctx)
	case processvariable.FieldCaseInstanceID:
		return m.OldCaseInstanceID(ctx)
	case processvariable.FieldTaskID:
		return m.OldTaskID(ctx)
	case processvariable.FieldActivityInstanceID:
		return m.OldActivityInstanceID(ctx)
	case processvariable.FieldTenantID:
		return m.OldTenantID(ctx)
	case processvariable.FieldSequenceCounter:
		return m.OldSequenceCounter(ctx)
	case processvariable.FieldConcurrentLocal:
		return m.OldConcurrentLocal(ctx)
	case processvariable.FieldScopeID:
		return m.OldScopeID(ctx)
	case processvariable.FieldScopeType:
		return m.OldScopeType(ctx)
	case processvariable.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case processvariable.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ProcessVariable field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcessVariableMutation) SetField(name string, value ent.Value) error {
	switch name {
	case processvariable.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case processvariable.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case processvariable.FieldTextValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTextValue(v)
		return nil
	case processvariable.FieldTextValue2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTextValue2(v)
		return nil
	case processvariable.FieldLongValue:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongValue(v)
		return nil
	case processvariable.FieldDoubleValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoubleValue(v)
		return nil
	case processvariable.FieldByteArrayValue:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetByteArrayValue(v)
		return nil
	case processvariable.FieldExecutionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecutionID(v)
		return nil
	case processvariable.FieldProcessInstanceID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessInstanceID(v)
		return nil
	case processvariable.FieldProcessDefinitionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessDefinitionID(v)
		return nil
	case processvariable.FieldCaseExecutionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCaseExecutionID(v)
		return nil
	case processvariable.FieldCaseInstanceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCaseInstanceID(v)
		return nil
	case processvariable.FieldTaskID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskID(v)
		return nil
	case processvariable.FieldActivityInstanceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityInstanceID(v)
		return nil
	case processvariable.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case processvariable.FieldSequenceCounter:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSequenceCounter(v)
		return nil
	case processvariable.FieldConcurrentLocal:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConcurrentLocal(v)
		return nil
	case processvariable.FieldScopeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScopeID(v)
		return nil
	case processvariable.FieldScopeType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScopeType(v)
		return nil
	case processvariable.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case processvariable.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ProcessVariable field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProcessVariableMutation) AddedFields() []string {
	var fields []string
	if m.addlong_value != nil {
		fields = append(fields, processvariable.FieldLongValue)
	}
	if m.adddouble_value != nil {
		fields = append(fields, processvariable.FieldDoubleValue)
	}
	if m.addprocess_instance_id != nil {
		fields = append(fields, processvariable.FieldProcessInstanceID)
	}
	if m.addprocess_definition_id != nil {
		fields = append(fields, processvariable.FieldProcessDefinitionID)
	}
	if m.addtask_id != nil {
		fields = append(fields, processvariable.FieldTaskID)
	}
	if m.addsequence_counter != nil {
		fields = append(fields, processvariable.FieldSequenceCounter)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProcessVariableMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case processvariable.FieldLongValue:
		return m.AddedLongValue()
	case processvariable.FieldDoubleValue:
		return m.AddedDoubleValue()
	case processvariable.FieldProcessInstanceID:
		return m.AddedProcessInstanceID()
	case processvariable.FieldProcessDefinitionID:
		return m.AddedProcessDefinitionID()
	case processvariable.FieldTaskID:
		return m.AddedTaskID()
	case processvariable.FieldSequenceCounter:
		return m.AddedSequenceCounter()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcessVariableMutation) AddField(name string, value ent.Value) error {
	switch name {
	case processvariable.FieldLongValue:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongValue(v)
		return nil
	case processvariable.FieldDoubleValue:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDoubleValue(v)
		return nil
	case processvariable.FieldProcessInstanceID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProcessInstanceID(v)
		return nil
	case processvariable.FieldProcessDefinitionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProcessDefinitionID(v)
		return nil
	case processvariable.FieldTaskID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTaskID(v)
		return nil
	case processvariable.FieldSequenceCounter:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSequenceCounter(v)
		return nil
	}
	return fmt.Errorf("unknown ProcessVariable numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProcessVariableMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(processvariable.FieldTextValue) {
		fields = append(fields, processvariable.FieldTextValue)
	}
	if m.FieldCleared(processvariable.FieldTextValue2) {
		fields = append(fields, processvariable.FieldTextValue2)
	}
	if m.FieldCleared(processvariable.FieldLongValue) {
		fields = append(fields, processvariable.FieldLongValue)
	}
	if m.FieldCleared(processvariable.FieldDoubleValue) {
		fields = append(fields, processvariable.FieldDoubleValue)
	}
	if m.FieldCleared(processvariable.FieldByteArrayValue) {
		fields = append(fields, processvariable.FieldByteArrayValue)
	}
	if m.FieldCleared(processvariable.FieldExecutionID) {
		fields = append(fields, processvariable.FieldExecutionID)
	}
	if m.FieldCleared(processvariable.FieldProcessInstanceID) {
		fields = append(fields, processvariable.FieldProcessInstanceID)
	}
	if m.FieldCleared(processvariable.FieldProcessDefinitionID) {
		fields = append(fields, processvariable.FieldProcessDefinitionID)
	}
	if m.FieldCleared(processvariable.FieldCaseExecutionID) {
		fields = append(fields, processvariable.FieldCaseExecutionID)
	}
	if m.FieldCleared(processvariable.FieldCaseInstanceID) {
		fields = append(fields, processvariable.FieldCaseInstanceID)
	}
	if m.FieldCleared(processvariable.FieldTaskID) {
		fields = append(fields, processvariable.FieldTaskID)
	}
	if m.FieldCleared(processvariable.FieldActivityInstanceID) {
		fields = append(fields, processvariable.FieldActivityInstanceID)
	}
	if m.FieldCleared(processvariable.FieldScopeID) {
		fields = append(fields, processvariable.FieldScopeID)
	}
	if m.FieldCleared(processvariable.FieldScopeType) {
		fields = append(fields, processvariable.FieldScopeType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProcessVariableMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProcessVariableMutation) ClearField(name string) error {
	switch name {
	case processvariable.FieldTextValue:
		m.ClearTextValue()
		return nil
	case processvariable.FieldTextValue2:
		m.ClearTextValue2()
		return nil
	case processvariable.FieldLongValue:
		m.ClearLongValue()
		return nil
	case processvariable.FieldDoubleValue:
		m.ClearDoubleValue()
		return nil
	case processvariable.FieldByteArrayValue:
		m.ClearByteArrayValue()
		return nil
	case processvariable.FieldExecutionID:
		m.ClearExecutionID()
		return nil
	case processvariable.FieldProcessInstanceID:
		m.ClearProcessInstanceID()
		return nil
	case processvariable.FieldProcessDefinitionID:
		m.ClearProcessDefinitionID()
		return nil
	case processvariable.FieldCaseExecutionID:
		m.ClearCaseExecutionID()
		return nil
	case processvariable.FieldCaseInstanceID:
		m.ClearCaseInstanceID()
		return nil
	case processvariable.FieldTaskID:
		m.ClearTaskID()
		return nil
	case processvariable.FieldActivityInstanceID:
		m.ClearActivityInstanceID()
		return nil
	case processvariable.FieldScopeID:
		m.ClearScopeID()
		return nil
	case processvariable.FieldScopeType:
		m.ClearScopeType()
		return nil
	}
	return fmt.Errorf("unknown ProcessVariable nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProcessVariableMutation) ResetField(name string) error {
	switch name {
	case processvariable.FieldName:
		m.ResetName()
		return nil
	case processvariable.FieldType:
		m.ResetType()
		return nil
	case processvariable.FieldTextValue:
		m.ResetTextValue()
		return nil
	case processvariable.FieldTextValue2:
		m.ResetTextValue2()
		return nil
	case processvariable.FieldLongValue:
		m.ResetLongValue()
		return nil
	case processvariable.FieldDoubleValue:
		m.ResetDoubleValue()
		return nil
	case processvariable.FieldByteArrayValue:
		m.ResetByteArrayValue()
		return nil
	case processvariable.FieldExecutionID:
		m.ResetExecutionID()
		return nil
	case processvariable.FieldProcessInstanceID:
		m.ResetProcessInstanceID()
		return nil
	case processvariable.FieldProcessDefinitionID:
		m.ResetProcessDefinitionID()
		return nil
	case processvariable.FieldCaseExecutionID:
		m.ResetCaseExecutionID()
		return nil
	case processvariable.FieldCaseInstanceID:
		m.ResetCaseInstanceID()
		return nil
	case processvariable.FieldTaskID:
		m.ResetTaskID()
		return nil
	case processvariable.FieldActivityInstanceID:
		m.ResetActivityInstanceID()
		return nil
	case processvariable.FieldTenantID:
		m.ResetTenantID()
		return nil
	case processvariable.FieldSequenceCounter:
		m.ResetSequenceCounter()
		return nil
	case processvariable.FieldConcurrentLocal:
		m.ResetConcurrentLocal()
		return nil
	case processvariable.FieldScopeID:
		m.ResetScopeID()
		return nil
	case processvariable.FieldScopeType:
		m.ResetScopeType()
		return nil
	case processvariable.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case processvariable.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ProcessVariable field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProcessVariableMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProcessVariableMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProcessVariableMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProcessVariableMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProcessVariableMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProcessVariableMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProcessVariableMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ProcessVariable unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProcessVariableMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ProcessVariable edge %s", name)
}

// TaskInstanceMutation represents an operation that mutates the TaskInstance nodes in the graph.
type TaskInstanceMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int64
	name                     *string
	description              *string
	task_definition_key      *string
	assignee                 *string
	owner                    *string
	delegation               *string
	priority                 *int32
	addpriority              *int32
	create_time              *time.Time
	due_date                 *time.Time
	follow_up_date           *time.Time
	form_key                 *string
	category                 *string
	parent_task_id           *string
	execution_id             *string
	process_instance_id      *int64
	addprocess_instance_id   *int64
	process_definition_id    *int64
	addprocess_definition_id *int64
	process_definition_key   *string
	case_execution_id        *string
	case_instance_id         *string
	case_definition_id       *string
	suspended                *bool
	tenant_id                *string
	created_at               *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	done                     bool
	oldValue                 func(context.Context) (*TaskInstance, error)
	predicates               []predicate.TaskInstance
}

var _ ent.Mutation = (*TaskInstanceMutation)(nil)

// taskinstanceOption allows management of the mutation configuration using functional options.
type taskinstanceOption func(*TaskInstanceMutation)

// newTaskInstanceMutation creates new mutation for the TaskInstance entity.
func newTaskInstanceMutation(c config, op Op, opts ...taskinstanceOption) *TaskInstanceMutation {
	m := &TaskInstanceMutation{
		config:        c,
		op:            op,
		typ:           TypeTaskInstance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskInstanceID sets the ID field of the mutation.
func withTaskInstanceID(id int64) taskinstanceOption {
	return func(m *TaskInstanceMutation) {
		var (
			err   error
			once  sync.Once
			value *TaskInstance
		)
		m.oldValue = func(ctx context.Context) (*TaskInstance, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaskInstance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaskInstance sets the old TaskInstance of the mutation.
func withTaskInstance(node *TaskInstance) taskinstanceOption {
	return func(m *TaskInstanceMutation) {
		m.oldValue = func(context.Context) (*TaskInstance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskInstanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskInstanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TaskInstance entities.
func (m *TaskInstanceMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskInstanceMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskInstanceMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TaskInstance.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TaskInstanceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TaskInstanceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *TaskInstanceMutation) ClearName() {
	m.name = nil
	m.clearedFields[taskinstance.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *TaskInstanceMutation) NameCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *TaskInstanceMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, taskinstance.FieldName)
}

// SetDescription sets the "description" field.
func (m *TaskInstanceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TaskInstanceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TaskInstanceMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[taskinstance.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TaskInstanceMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TaskInstanceMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, taskinstance.FieldDescription)
}

// SetTaskDefinitionKey sets the "task_definition_key" field.
func (m *TaskInstanceMutation) SetTaskDefinitionKey(s string) {
	m.task_definition_key = &s
}

// TaskDefinitionKey returns the value of the "task_definition_key" field in the mutation.
func (m *TaskInstanceMutation) TaskDefinitionKey() (r string, exists bool) {
	v := m.task_definition_key
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskDefinitionKey returns the old "task_definition_key" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldTaskDefinitionKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskDefinitionKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskDefinitionKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskDefinitionKey: %w", err)
	}
	return oldValue.TaskDefinitionKey, nil
}

// ResetTaskDefinitionKey resets all changes to the "task_definition_key" field.
func (m *TaskInstanceMutation) ResetTaskDefinitionKey() {
	m.task_definition_key = nil
}

// SetAssignee sets the "assignee" field.
func (m *TaskInstanceMutation) SetAssignee(s string) {
	m.assignee = &s
}

// Assignee returns the value of the "assignee" field in the mutation.
func (m *TaskInstanceMutation) Assignee() (r string, exists bool) {
	v := m.assignee
	if v == nil {
		return
	}
	return *v, true
}

// OldAssignee returns the old "assignee" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldAssignee(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAssignee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAssignee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssignee: %w", err)
	}
	return oldValue.Assignee, nil
}

// ClearAssignee clears the value of the "assignee" field.
func (m *TaskInstanceMutation) ClearAssignee() {
	m.assignee = nil
	m.clearedFields[taskinstance.FieldAssignee] = struct{}{}
}

// AssigneeCleared returns if the "assignee" field was cleared in this mutation.
func (m *TaskInstanceMutation) AssigneeCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldAssignee]
	return ok
}

// ResetAssignee resets all changes to the "assignee" field.
func (m *TaskInstanceMutation) ResetAssignee() {
	m.assignee = nil
	delete(m.clearedFields, taskinstance.FieldAssignee)
}

// SetOwner sets the "owner" field.
func (m *TaskInstanceMutation) SetOwner(s string) {
	m.owner = &s
}

// Owner returns the value of the "owner" field in the mutation.
func (m *TaskInstanceMutation) Owner() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "owner" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldOwner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// ClearOwner clears the value of the "owner" field.
func (m *TaskInstanceMutation) ClearOwner() {
	m.owner = nil
	m.clearedFields[taskinstance.FieldOwner] = struct{}{}
}

// OwnerCleared returns if the "owner" field was cleared in this mutation.
func (m *TaskInstanceMutation) OwnerCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldOwner]
	return ok
}

// ResetOwner resets all changes to the "owner" field.
func (m *TaskInstanceMutation) ResetOwner() {
	m.owner = nil
	delete(m.clearedFields, taskinstance.FieldOwner)
}

// SetDelegation sets the "delegation" field.
func (m *TaskInstanceMutation) SetDelegation(s string) {
	m.delegation = &s
}

// Delegation returns the value of the "delegation" field in the mutation.
func (m *TaskInstanceMutation) Delegation() (r string, exists bool) {
	v := m.delegation
	if v == nil {
		return
	}
	return *v, true
}

// OldDelegation returns the old "delegation" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldDelegation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDelegation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDelegation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDelegation: %w", err)
	}
	return oldValue.Delegation, nil
}

// ClearDelegation clears the value of the "delegation" field.
func (m *TaskInstanceMutation) ClearDelegation() {
	m.delegation = nil
	m.clearedFields[taskinstance.FieldDelegation] = struct{}{}
}

// DelegationCleared returns if the "delegation" field was cleared in this mutation.
func (m *TaskInstanceMutation) DelegationCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldDelegation]
	return ok
}

// ResetDelegation resets all changes to the "delegation" field.
func (m *TaskInstanceMutation) ResetDelegation() {
	m.delegation = nil
	delete(m.clearedFields, taskinstance.FieldDelegation)
}

// SetPriority sets the "priority" field.
func (m *TaskInstanceMutation) SetPriority(i int32) {
	m.priority = &i
	m.addpriority = nil
}

// Priority returns the value of the "priority" field in the mutation.
func (m *TaskInstanceMutation) Priority() (r int32, exists bool) {
	v := m.priority
	if v == nil {
		return
	}
	return *v, true
}

// OldPriority returns the old "priority" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldPriority(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPriority: %w", err)
	}
	return oldValue.Priority, nil
}

// AddPriority adds i to the "priority" field.
func (m *TaskInstanceMutation) AddPriority(i int32) {
	if m.addpriority != nil {
		*m.addpriority += i
	} else {
		m.addpriority = &i
	}
}

// AddedPriority returns the value that was added to the "priority" field in this mutation.
func (m *TaskInstanceMutation) AddedPriority() (r int32, exists bool) {
	v := m.addpriority
	if v == nil {
		return
	}
	return *v, true
}

// ResetPriority resets all changes to the "priority" field.
func (m *TaskInstanceMutation) ResetPriority() {
	m.priority = nil
	m.addpriority = nil
}

// SetCreateTime sets the "create_time" field.
func (m *TaskInstanceMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TaskInstanceMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TaskInstanceMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetDueDate sets the "due_date" field.
func (m *TaskInstanceMutation) SetDueDate(t time.Time) {
	m.due_date = &t
}

// DueDate returns the value of the "due_date" field in the mutation.
func (m *TaskInstanceMutation) DueDate() (r time.Time, exists bool) {
	v := m.due_date
	if v == nil {
		return
	}
	return *v, true
}

// OldDueDate returns the old "due_date" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldDueDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDueDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDueDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDueDate: %w", err)
	}
	return oldValue.DueDate, nil
}

// ClearDueDate clears the value of the "due_date" field.
func (m *TaskInstanceMutation) ClearDueDate() {
	m.due_date = nil
	m.clearedFields[taskinstance.FieldDueDate] = struct{}{}
}

// DueDateCleared returns if the "due_date" field was cleared in this mutation.
func (m *TaskInstanceMutation) DueDateCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldDueDate]
	return ok
}

// ResetDueDate resets all changes to the "due_date" field.
func (m *TaskInstanceMutation) ResetDueDate() {
	m.due_date = nil
	delete(m.clearedFields, taskinstance.FieldDueDate)
}

// SetFollowUpDate sets the "follow_up_date" field.
func (m *TaskInstanceMutation) SetFollowUpDate(t time.Time) {
	m.follow_up_date = &t
}

// FollowUpDate returns the value of the "follow_up_date" field in the mutation.
func (m *TaskInstanceMutation) FollowUpDate() (r time.Time, exists bool) {
	v := m.follow_up_date
	if v == nil {
		return
	}
	return *v, true
}

// OldFollowUpDate returns the old "follow_up_date" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldFollowUpDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFollowUpDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFollowUpDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFollowUpDate: %w", err)
	}
	return oldValue.FollowUpDate, nil
}

// ClearFollowUpDate clears the value of the "follow_up_date" field.
func (m *TaskInstanceMutation) ClearFollowUpDate() {
	m.follow_up_date = nil
	m.clearedFields[taskinstance.FieldFollowUpDate] = struct{}{}
}

// FollowUpDateCleared returns if the "follow_up_date" field was cleared in this mutation.
func (m *TaskInstanceMutation) FollowUpDateCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldFollowUpDate]
	return ok
}

// ResetFollowUpDate resets all changes to the "follow_up_date" field.
func (m *TaskInstanceMutation) ResetFollowUpDate() {
	m.follow_up_date = nil
	delete(m.clearedFields, taskinstance.FieldFollowUpDate)
}

// SetFormKey sets the "form_key" field.
func (m *TaskInstanceMutation) SetFormKey(s string) {
	m.form_key = &s
}

// FormKey returns the value of the "form_key" field in the mutation.
func (m *TaskInstanceMutation) FormKey() (r string, exists bool) {
	v := m.form_key
	if v == nil {
		return
	}
	return *v, true
}

// OldFormKey returns the old "form_key" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldFormKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormKey: %w", err)
	}
	return oldValue.FormKey, nil
}

// ClearFormKey clears the value of the "form_key" field.
func (m *TaskInstanceMutation) ClearFormKey() {
	m.form_key = nil
	m.clearedFields[taskinstance.FieldFormKey] = struct{}{}
}

// FormKeyCleared returns if the "form_key" field was cleared in this mutation.
func (m *TaskInstanceMutation) FormKeyCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldFormKey]
	return ok
}

// ResetFormKey resets all changes to the "form_key" field.
func (m *TaskInstanceMutation) ResetFormKey() {
	m.form_key = nil
	delete(m.clearedFields, taskinstance.FieldFormKey)
}

// SetCategory sets the "category" field.
func (m *TaskInstanceMutation) SetCategory(s string) {
	m.category = &s
}

// Category returns the value of the "category" field in the mutation.
func (m *TaskInstanceMutation) Category() (r string, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ClearCategory clears the value of the "category" field.
func (m *TaskInstanceMutation) ClearCategory() {
	m.category = nil
	m.clearedFields[taskinstance.FieldCategory] = struct{}{}
}

// CategoryCleared returns if the "category" field was cleared in this mutation.
func (m *TaskInstanceMutation) CategoryCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldCategory]
	return ok
}

// ResetCategory resets all changes to the "category" field.
func (m *TaskInstanceMutation) ResetCategory() {
	m.category = nil
	delete(m.clearedFields, taskinstance.FieldCategory)
}

// SetParentTaskID sets the "parent_task_id" field.
func (m *TaskInstanceMutation) SetParentTaskID(s string) {
	m.parent_task_id = &s
}

// ParentTaskID returns the value of the "parent_task_id" field in the mutation.
func (m *TaskInstanceMutation) ParentTaskID() (r string, exists bool) {
	v := m.parent_task_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentTaskID returns the old "parent_task_id" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldParentTaskID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentTaskID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentTaskID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentTaskID: %w", err)
	}
	return oldValue.ParentTaskID, nil
}

// ClearParentTaskID clears the value of the "parent_task_id" field.
func (m *TaskInstanceMutation) ClearParentTaskID() {
	m.parent_task_id = nil
	m.clearedFields[taskinstance.FieldParentTaskID] = struct{}{}
}

// ParentTaskIDCleared returns if the "parent_task_id" field was cleared in this mutation.
func (m *TaskInstanceMutation) ParentTaskIDCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldParentTaskID]
	return ok
}

// ResetParentTaskID resets all changes to the "parent_task_id" field.
func (m *TaskInstanceMutation) ResetParentTaskID() {
	m.parent_task_id = nil
	delete(m.clearedFields, taskinstance.FieldParentTaskID)
}

// SetExecutionID sets the "execution_id" field.
func (m *TaskInstanceMutation) SetExecutionID(s string) {
	m.execution_id = &s
}

// ExecutionID returns the value of the "execution_id" field in the mutation.
func (m *TaskInstanceMutation) ExecutionID() (r string, exists bool) {
	v := m.execution_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExecutionID returns the old "execution_id" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldExecutionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecutionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecutionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecutionID: %w", err)
	}
	return oldValue.ExecutionID, nil
}

// ClearExecutionID clears the value of the "execution_id" field.
func (m *TaskInstanceMutation) ClearExecutionID() {
	m.execution_id = nil
	m.clearedFields[taskinstance.FieldExecutionID] = struct{}{}
}

// ExecutionIDCleared returns if the "execution_id" field was cleared in this mutation.
func (m *TaskInstanceMutation) ExecutionIDCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldExecutionID]
	return ok
}

// ResetExecutionID resets all changes to the "execution_id" field.
func (m *TaskInstanceMutation) ResetExecutionID() {
	m.execution_id = nil
	delete(m.clearedFields, taskinstance.FieldExecutionID)
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (m *TaskInstanceMutation) SetProcessInstanceID(i int64) {
	m.process_instance_id = &i
	m.addprocess_instance_id = nil
}

// ProcessInstanceID returns the value of the "process_instance_id" field in the mutation.
func (m *TaskInstanceMutation) ProcessInstanceID() (r int64, exists bool) {
	v := m.process_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessInstanceID returns the old "process_instance_id" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldProcessInstanceID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessInstanceID: %w", err)
	}
	return oldValue.ProcessInstanceID, nil
}

// AddProcessInstanceID adds i to the "process_instance_id" field.
func (m *TaskInstanceMutation) AddProcessInstanceID(i int64) {
	if m.addprocess_instance_id != nil {
		*m.addprocess_instance_id += i
	} else {
		m.addprocess_instance_id = &i
	}
}

// AddedProcessInstanceID returns the value that was added to the "process_instance_id" field in this mutation.
func (m *TaskInstanceMutation) AddedProcessInstanceID() (r int64, exists bool) {
	v := m.addprocess_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProcessInstanceID resets all changes to the "process_instance_id" field.
func (m *TaskInstanceMutation) ResetProcessInstanceID() {
	m.process_instance_id = nil
	m.addprocess_instance_id = nil
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (m *TaskInstanceMutation) SetProcessDefinitionID(i int64) {
	m.process_definition_id = &i
	m.addprocess_definition_id = nil
}

// ProcessDefinitionID returns the value of the "process_definition_id" field in the mutation.
func (m *TaskInstanceMutation) ProcessDefinitionID() (r int64, exists bool) {
	v := m.process_definition_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessDefinitionID returns the old "process_definition_id" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldProcessDefinitionID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessDefinitionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessDefinitionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessDefinitionID: %w", err)
	}
	return oldValue.ProcessDefinitionID, nil
}

// AddProcessDefinitionID adds i to the "process_definition_id" field.
func (m *TaskInstanceMutation) AddProcessDefinitionID(i int64) {
	if m.addprocess_definition_id != nil {
		*m.addprocess_definition_id += i
	} else {
		m.addprocess_definition_id = &i
	}
}

// AddedProcessDefinitionID returns the value that was added to the "process_definition_id" field in this mutation.
func (m *TaskInstanceMutation) AddedProcessDefinitionID() (r int64, exists bool) {
	v := m.addprocess_definition_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetProcessDefinitionID resets all changes to the "process_definition_id" field.
func (m *TaskInstanceMutation) ResetProcessDefinitionID() {
	m.process_definition_id = nil
	m.addprocess_definition_id = nil
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (m *TaskInstanceMutation) SetProcessDefinitionKey(s string) {
	m.process_definition_key = &s
}

// ProcessDefinitionKey returns the value of the "process_definition_key" field in the mutation.
func (m *TaskInstanceMutation) ProcessDefinitionKey() (r string, exists bool) {
	v := m.process_definition_key
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessDefinitionKey returns the old "process_definition_key" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldProcessDefinitionKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessDefinitionKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessDefinitionKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessDefinitionKey: %w", err)
	}
	return oldValue.ProcessDefinitionKey, nil
}

// ResetProcessDefinitionKey resets all changes to the "process_definition_key" field.
func (m *TaskInstanceMutation) ResetProcessDefinitionKey() {
	m.process_definition_key = nil
}

// SetCaseExecutionID sets the "case_execution_id" field.
func (m *TaskInstanceMutation) SetCaseExecutionID(s string) {
	m.case_execution_id = &s
}

// CaseExecutionID returns the value of the "case_execution_id" field in the mutation.
func (m *TaskInstanceMutation) CaseExecutionID() (r string, exists bool) {
	v := m.case_execution_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCaseExecutionID returns the old "case_execution_id" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldCaseExecutionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCaseExecutionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCaseExecutionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCaseExecutionID: %w", err)
	}
	return oldValue.CaseExecutionID, nil
}

// ClearCaseExecutionID clears the value of the "case_execution_id" field.
func (m *TaskInstanceMutation) ClearCaseExecutionID() {
	m.case_execution_id = nil
	m.clearedFields[taskinstance.FieldCaseExecutionID] = struct{}{}
}

// CaseExecutionIDCleared returns if the "case_execution_id" field was cleared in this mutation.
func (m *TaskInstanceMutation) CaseExecutionIDCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldCaseExecutionID]
	return ok
}

// ResetCaseExecutionID resets all changes to the "case_execution_id" field.
func (m *TaskInstanceMutation) ResetCaseExecutionID() {
	m.case_execution_id = nil
	delete(m.clearedFields, taskinstance.FieldCaseExecutionID)
}

// SetCaseInstanceID sets the "case_instance_id" field.
func (m *TaskInstanceMutation) SetCaseInstanceID(s string) {
	m.case_instance_id = &s
}

// CaseInstanceID returns the value of the "case_instance_id" field in the mutation.
func (m *TaskInstanceMutation) CaseInstanceID() (r string, exists bool) {
	v := m.case_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCaseInstanceID returns the old "case_instance_id" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldCaseInstanceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCaseInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCaseInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCaseInstanceID: %w", err)
	}
	return oldValue.CaseInstanceID, nil
}

// ClearCaseInstanceID clears the value of the "case_instance_id" field.
func (m *TaskInstanceMutation) ClearCaseInstanceID() {
	m.case_instance_id = nil
	m.clearedFields[taskinstance.FieldCaseInstanceID] = struct{}{}
}

// CaseInstanceIDCleared returns if the "case_instance_id" field was cleared in this mutation.
func (m *TaskInstanceMutation) CaseInstanceIDCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldCaseInstanceID]
	return ok
}

// ResetCaseInstanceID resets all changes to the "case_instance_id" field.
func (m *TaskInstanceMutation) ResetCaseInstanceID() {
	m.case_instance_id = nil
	delete(m.clearedFields, taskinstance.FieldCaseInstanceID)
}

// SetCaseDefinitionID sets the "case_definition_id" field.
func (m *TaskInstanceMutation) SetCaseDefinitionID(s string) {
	m.case_definition_id = &s
}

// CaseDefinitionID returns the value of the "case_definition_id" field in the mutation.
func (m *TaskInstanceMutation) CaseDefinitionID() (r string, exists bool) {
	v := m.case_definition_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCaseDefinitionID returns the old "case_definition_id" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldCaseDefinitionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCaseDefinitionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCaseDefinitionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCaseDefinitionID: %w", err)
	}
	return oldValue.CaseDefinitionID, nil
}

// ClearCaseDefinitionID clears the value of the "case_definition_id" field.
func (m *TaskInstanceMutation) ClearCaseDefinitionID() {
	m.case_definition_id = nil
	m.clearedFields[taskinstance.FieldCaseDefinitionID] = struct{}{}
}

// CaseDefinitionIDCleared returns if the "case_definition_id" field was cleared in this mutation.
func (m *TaskInstanceMutation) CaseDefinitionIDCleared() bool {
	_, ok := m.clearedFields[taskinstance.FieldCaseDefinitionID]
	return ok
}

// ResetCaseDefinitionID resets all changes to the "case_definition_id" field.
func (m *TaskInstanceMutation) ResetCaseDefinitionID() {
	m.case_definition_id = nil
	delete(m.clearedFields, taskinstance.FieldCaseDefinitionID)
}

// SetSuspended sets the "suspended" field.
func (m *TaskInstanceMutation) SetSuspended(b bool) {
	m.suspended = &b
}

// Suspended returns the value of the "suspended" field in the mutation.
func (m *TaskInstanceMutation) Suspended() (r bool, exists bool) {
	v := m.suspended
	if v == nil {
		return
	}
	return *v, true
}

// OldSuspended returns the old "suspended" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldSuspended(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuspended is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuspended requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuspended: %w", err)
	}
	return oldValue.Suspended, nil
}

// ResetSuspended resets all changes to the "suspended" field.
func (m *TaskInstanceMutation) ResetSuspended() {
	m.suspended = nil
}

// SetTenantID sets the "tenant_id" field.
func (m *TaskInstanceMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *TaskInstanceMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *TaskInstanceMutation) ResetTenantID() {
	m.tenant_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskInstanceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskInstanceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskInstanceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TaskInstanceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TaskInstanceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TaskInstance entity.
// If the TaskInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskInstanceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TaskInstanceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the TaskInstanceMutation builder.
func (m *TaskInstanceMutation) Where(ps ...predicate.TaskInstance) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskInstanceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskInstanceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TaskInstance, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskInstanceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskInstanceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TaskInstance).
func (m *TaskInstanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskInstanceMutation) Fields() []string {
	fields := make([]string, 0, 24)
	if m.name != nil {
		fields = append(fields, taskinstance.FieldName)
	}
	if m.description != nil {
		fields = append(fields, taskinstance.FieldDescription)
	}
	if m.task_definition_key != nil {
		fields = append(fields, taskinstance.FieldTaskDefinitionKey)
	}
	if m.assignee != nil {
		fields = append(fields, taskinstance.FieldAssignee)
	}
	if m.owner != nil {
		fields = append(fields, taskinstance.FieldOwner)
	}
	if m.delegation != nil {
		fields = append(fields, taskinstance.FieldDelegation)
	}
	if m.priority != nil {
		fields = append(fields, taskinstance.FieldPriority)
	}
	if m.create_time != nil {
		fields = append(fields, taskinstance.FieldCreateTime)
	}
	if m.due_date != nil {
		fields = append(fields, taskinstance.FieldDueDate)
	}
	if m.follow_up_date != nil {
		fields = append(fields, taskinstance.FieldFollowUpDate)
	}
	if m.form_key != nil {
		fields = append(fields, taskinstance.FieldFormKey)
	}
	if m.category != nil {
		fields = append(fields, taskinstance.FieldCategory)
	}
	if m.parent_task_id != nil {
		fields = append(fields, taskinstance.FieldParentTaskID)
	}
	if m.execution_id != nil {
		fields = append(fields, taskinstance.FieldExecutionID)
	}
	if m.process_instance_id != nil {
		fields = append(fields, taskinstance.FieldProcessInstanceID)
	}
	if m.process_definition_id != nil {
		fields = append(fields, taskinstance.FieldProcessDefinitionID)
	}
	if m.process_definition_key != nil {
		fields = append(fields, taskinstance.FieldProcessDefinitionKey)
	}
	if m.case_execution_id != nil {
		fields = append(fields, taskinstance.FieldCaseExecutionID)
	}
	if m.case_instance_id != nil {
		fields = append(fields, taskinstance.FieldCaseInstanceID)
	}
	if m.case_definition_id != nil {
		fields = append(fields, taskinstance.FieldCaseDefinitionID)
	}
	if m.suspended != nil {
		fields = append(fields, taskinstance.FieldSuspended)
	}
	if m.tenant_id != nil {
		fields = append(fields, taskinstance.FieldTenantID)
	}
	if m.created_at != nil {
		fields = append(fields, taskinstance.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, taskinstance.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskInstanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case taskinstance.FieldName:
		return m.Name()
	case taskinstance.FieldDescription:
		return m.Description()
	case taskinstance.FieldTaskDefinitionKey:
		return m.TaskDefinitionKey()
	case taskinstance.FieldAssignee:
		return m.Assignee()
	case taskinstance.FieldOwner:
		return m.Owner()
	case taskinstance.FieldDelegation:
		return m.Delegation()
	case taskinstance.FieldPriority:
		return m.Priority()
	case taskinstance.FieldCreateTime:
		return m.CreateTime()
	case taskinstance.FieldDueDate:
		return m.DueDate()
	case taskinstance.FieldFollowUpDate:
		return m.FollowUpDate()
	case taskinstance.FieldFormKey:
		return m.FormKey()
	case taskinstance.FieldCategory:
		return m.Category()
	case taskinstance.FieldParentTaskID:
		return m.ParentTaskID()
	case taskinstance.FieldExecutionID:
		return m.ExecutionID()
	case taskinstance.FieldProcessInstanceID:
		return m.ProcessInstanceID()
	case taskinstance.FieldProcessDefinitionID:
		return m.ProcessDefinitionID()
	case taskinstance.FieldProcessDefinitionKey:
		return m.ProcessDefinitionKey()
	case taskinstance.FieldCaseExecutionID:
		return m.CaseExecutionID()
	case taskinstance.FieldCaseInstanceID:
		return m.CaseInstanceID()
	case taskinstance.FieldCaseDefinitionID:
		return m.CaseDefinitionID()
	case taskinstance.FieldSuspended:
		return m.Suspended()
	case taskinstance.FieldTenantID:
		return m.TenantID()
	case taskinstance.FieldCreatedAt:
		return m.CreatedAt()
	case taskinstance.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskInstanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case taskinstance.FieldName:
		return m.OldName(ctx)
	case taskinstance.FieldDescription:
		return m.OldDescription(ctx)
	case taskinstance.FieldTaskDefinitionKey:
		return m.OldTaskDefinitionKey(ctx)
	case taskinstance.FieldAssignee:
		return m.OldAssignee(ctx)
	case taskinstance.FieldOwner:
		return m.OldOwner(ctx)
	case taskinstance.FieldDelegation:
		return m.OldDelegation(ctx)
	case taskinstance.FieldPriority:
		return m.OldPriority(ctx)
	case taskinstance.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case taskinstance.FieldDueDate:
		return m.OldDueDate(ctx)
	case taskinstance.FieldFollowUpDate:
		return m.OldFollowUpDate(ctx)
	case taskinstance.FieldFormKey:
		return m.OldFormKey(ctx)
	case taskinstance.FieldCategory:
		return m.OldCategory(ctx)
	case taskinstance.FieldParentTaskID:
		return m.OldParentTaskID(ctx)
	case taskinstance.FieldExecutionID:
		return m.OldExecutionID(ctx)
	case taskinstance.FieldProcessInstanceID:
		return m.OldProcessInstanceID(ctx)
	case taskinstance.FieldProcessDefinitionID:
		return m.OldProcessDefinitionID(ctx)
	case taskinstance.FieldProcessDefinitionKey:
		return m.OldProcessDefinitionKey(ctx)
	case taskinstance.FieldCaseExecutionID:
		return m.OldCaseExecutionID(ctx)
	case taskinstance.FieldCaseInstanceID:
		return m.OldCaseInstanceID(ctx)
	case taskinstance.FieldCaseDefinitionID:
		return m.OldCaseDefinitionID(ctx)
	case taskinstance.FieldSuspended:
		return m.OldSuspended(ctx)
	case taskinstance.FieldTenantID:
		return m.OldTenantID(ctx)
	case taskinstance.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case taskinstance.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TaskInstance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskInstanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case taskinstance.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case taskinstance.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case taskinstance.FieldTaskDefinitionKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskDefinitionKey(v)
		return nil
	case taskinstance.FieldAssignee:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssignee(v)
		return nil
	case taskinstance.FieldOwner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case taskinstance.FieldDelegation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDelegation(v)
		return nil
	case taskinstance.FieldPriority:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPriority(v)
		return nil
	case taskinstance.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case taskinstance.FieldDueDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDueDate(v)
		return nil
	case taskinstance.FieldFollowUpDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFollowUpDate(v)
		return nil
	case taskinstance.FieldFormKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormKey(v)
		return nil
	case taskinstance.FieldCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case taskinstance.FieldParentTaskID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentTaskID(v)
		return nil
	case taskinstance.FieldExecutionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecutionID(v)
		return nil
	case taskinstance.FieldProcessInstanceID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessInstanceID(v)
		return nil
	case taskinstance.FieldProcessDefinitionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessDefinitionID(v)
		return nil
	case taskinstance.FieldProcessDefinitionKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessDefinitionKey(v)
		return nil
	case taskinstance.FieldCaseExecutionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCaseExecutionID(v)
		return nil
	case taskinstance.FieldCaseInstanceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCaseInstanceID(v)
		return nil
	case taskinstance.FieldCaseDefinitionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCaseDefinitionID(v)
		return nil
	case taskinstance.FieldSuspended:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuspended(v)
		return nil
	case taskinstance.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	case taskinstance.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case taskinstance.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TaskInstance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskInstanceMutation) AddedFields() []string {
	var fields []string
	if m.addpriority != nil {
		fields = append(fields, taskinstance.FieldPriority)
	}
	if m.addprocess_instance_id != nil {
		fields = append(fields, taskinstance.FieldProcessInstanceID)
	}
	if m.addprocess_definition_id != nil {
		fields = append(fields, taskinstance.FieldProcessDefinitionID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskInstanceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case taskinstance.FieldPriority:
		return m.AddedPriority()
	case taskinstance.FieldProcessInstanceID:
		return m.AddedProcessInstanceID()
	case taskinstance.FieldProcessDefinitionID:
		return m.AddedProcessDefinitionID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskInstanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case taskinstance.FieldPriority:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPriority(v)
		return nil
	case taskinstance.FieldProcessInstanceID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProcessInstanceID(v)
		return nil
	case taskinstance.FieldProcessDefinitionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProcessDefinitionID(v)
		return nil
	}
	return fmt.Errorf("unknown TaskInstance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskInstanceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(taskinstance.FieldName) {
		fields = append(fields, taskinstance.FieldName)
	}
	if m.FieldCleared(taskinstance.FieldDescription) {
		fields = append(fields, taskinstance.FieldDescription)
	}
	if m.FieldCleared(taskinstance.FieldAssignee) {
		fields = append(fields, taskinstance.FieldAssignee)
	}
	if m.FieldCleared(taskinstance.FieldOwner) {
		fields = append(fields, taskinstance.FieldOwner)
	}
	if m.FieldCleared(taskinstance.FieldDelegation) {
		fields = append(fields, taskinstance.FieldDelegation)
	}
	if m.FieldCleared(taskinstance.FieldDueDate) {
		fields = append(fields, taskinstance.FieldDueDate)
	}
	if m.FieldCleared(taskinstance.FieldFollowUpDate) {
		fields = append(fields, taskinstance.FieldFollowUpDate)
	}
	if m.FieldCleared(taskinstance.FieldFormKey) {
		fields = append(fields, taskinstance.FieldFormKey)
	}
	if m.FieldCleared(taskinstance.FieldCategory) {
		fields = append(fields, taskinstance.FieldCategory)
	}
	if m.FieldCleared(taskinstance.FieldParentTaskID) {
		fields = append(fields, taskinstance.FieldParentTaskID)
	}
	if m.FieldCleared(taskinstance.FieldExecutionID) {
		fields = append(fields, taskinstance.FieldExecutionID)
	}
	if m.FieldCleared(taskinstance.FieldCaseExecutionID) {
		fields = append(fields, taskinstance.FieldCaseExecutionID)
	}
	if m.FieldCleared(taskinstance.FieldCaseInstanceID) {
		fields = append(fields, taskinstance.FieldCaseInstanceID)
	}
	if m.FieldCleared(taskinstance.FieldCaseDefinitionID) {
		fields = append(fields, taskinstance.FieldCaseDefinitionID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskInstanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskInstanceMutation) ClearField(name string) error {
	switch name {
	case taskinstance.FieldName:
		m.ClearName()
		return nil
	case taskinstance.FieldDescription:
		m.ClearDescription()
		return nil
	case taskinstance.FieldAssignee:
		m.ClearAssignee()
		return nil
	case taskinstance.FieldOwner:
		m.ClearOwner()
		return nil
	case taskinstance.FieldDelegation:
		m.ClearDelegation()
		return nil
	case taskinstance.FieldDueDate:
		m.ClearDueDate()
		return nil
	case taskinstance.FieldFollowUpDate:
		m.ClearFollowUpDate()
		return nil
	case taskinstance.FieldFormKey:
		m.ClearFormKey()
		return nil
	case taskinstance.FieldCategory:
		m.ClearCategory()
		return nil
	case taskinstance.FieldParentTaskID:
		m.ClearParentTaskID()
		return nil
	case taskinstance.FieldExecutionID:
		m.ClearExecutionID()
		return nil
	case taskinstance.FieldCaseExecutionID:
		m.ClearCaseExecutionID()
		return nil
	case taskinstance.FieldCaseInstanceID:
		m.ClearCaseInstanceID()
		return nil
	case taskinstance.FieldCaseDefinitionID:
		m.ClearCaseDefinitionID()
		return nil
	}
	return fmt.Errorf("unknown TaskInstance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskInstanceMutation) ResetField(name string) error {
	switch name {
	case taskinstance.FieldName:
		m.ResetName()
		return nil
	case taskinstance.FieldDescription:
		m.ResetDescription()
		return nil
	case taskinstance.FieldTaskDefinitionKey:
		m.ResetTaskDefinitionKey()
		return nil
	case taskinstance.FieldAssignee:
		m.ResetAssignee()
		return nil
	case taskinstance.FieldOwner:
		m.ResetOwner()
		return nil
	case taskinstance.FieldDelegation:
		m.ResetDelegation()
		return nil
	case taskinstance.FieldPriority:
		m.ResetPriority()
		return nil
	case taskinstance.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case taskinstance.FieldDueDate:
		m.ResetDueDate()
		return nil
	case taskinstance.FieldFollowUpDate:
		m.ResetFollowUpDate()
		return nil
	case taskinstance.FieldFormKey:
		m.ResetFormKey()
		return nil
	case taskinstance.FieldCategory:
		m.ResetCategory()
		return nil
	case taskinstance.FieldParentTaskID:
		m.ResetParentTaskID()
		return nil
	case taskinstance.FieldExecutionID:
		m.ResetExecutionID()
		return nil
	case taskinstance.FieldProcessInstanceID:
		m.ResetProcessInstanceID()
		return nil
	case taskinstance.FieldProcessDefinitionID:
		m.ResetProcessDefinitionID()
		return nil
	case taskinstance.FieldProcessDefinitionKey:
		m.ResetProcessDefinitionKey()
		return nil
	case taskinstance.FieldCaseExecutionID:
		m.ResetCaseExecutionID()
		return nil
	case taskinstance.FieldCaseInstanceID:
		m.ResetCaseInstanceID()
		return nil
	case taskinstance.FieldCaseDefinitionID:
		m.ResetCaseDefinitionID()
		return nil
	case taskinstance.FieldSuspended:
		m.ResetSuspended()
		return nil
	case taskinstance.FieldTenantID:
		m.ResetTenantID()
		return nil
	case taskinstance.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case taskinstance.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TaskInstance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskInstanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskInstanceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskInstanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskInstanceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskInstanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskInstanceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskInstanceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TaskInstance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskInstanceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TaskInstance edge %s", name)
}
