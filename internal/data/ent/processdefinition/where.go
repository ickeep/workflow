// Code generated by ent, DO NOT EDIT.

package processdefinition

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldID, id))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldKey, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldName, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldCategory, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int32) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldVersion, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldDescription, v))
}

// DeployTime applies equality check predicate on the "deploy_time" field. It's identical to DeployTimeEQ.
func DeployTime(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldDeployTime, v))
}

// Resource applies equality check predicate on the "resource" field. It's identical to ResourceEQ.
func Resource(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldResource, v))
}

// HasStartForm applies equality check predicate on the "has_start_form" field. It's identical to HasStartFormEQ.
func HasStartForm(v bool) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldHasStartForm, v))
}

// Suspended applies equality check predicate on the "suspended" field. It's identical to SuspendedEQ.
func Suspended(v bool) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldSuspended, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldUpdatedAt, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContainsFold(FieldKey, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContainsFold(FieldName, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContainsFold(FieldCategory, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int32) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int32) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int32) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int32) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int32) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int32) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int32) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int32) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldVersion, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContainsFold(FieldDescription, v))
}

// DeployTimeEQ applies the EQ predicate on the "deploy_time" field.
func DeployTimeEQ(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldDeployTime, v))
}

// DeployTimeNEQ applies the NEQ predicate on the "deploy_time" field.
func DeployTimeNEQ(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldDeployTime, v))
}

// DeployTimeIn applies the In predicate on the "deploy_time" field.
func DeployTimeIn(vs ...time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldDeployTime, vs...))
}

// DeployTimeNotIn applies the NotIn predicate on the "deploy_time" field.
func DeployTimeNotIn(vs ...time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldDeployTime, vs...))
}

// DeployTimeGT applies the GT predicate on the "deploy_time" field.
func DeployTimeGT(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldDeployTime, v))
}

// DeployTimeGTE applies the GTE predicate on the "deploy_time" field.
func DeployTimeGTE(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldDeployTime, v))
}

// DeployTimeLT applies the LT predicate on the "deploy_time" field.
func DeployTimeLT(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldDeployTime, v))
}

// DeployTimeLTE applies the LTE predicate on the "deploy_time" field.
func DeployTimeLTE(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldDeployTime, v))
}

// ResourceEQ applies the EQ predicate on the "resource" field.
func ResourceEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldResource, v))
}

// ResourceNEQ applies the NEQ predicate on the "resource" field.
func ResourceNEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldResource, v))
}

// ResourceIn applies the In predicate on the "resource" field.
func ResourceIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldResource, vs...))
}

// ResourceNotIn applies the NotIn predicate on the "resource" field.
func ResourceNotIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldResource, vs...))
}

// ResourceGT applies the GT predicate on the "resource" field.
func ResourceGT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldResource, v))
}

// ResourceGTE applies the GTE predicate on the "resource" field.
func ResourceGTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldResource, v))
}

// ResourceLT applies the LT predicate on the "resource" field.
func ResourceLT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldResource, v))
}

// ResourceLTE applies the LTE predicate on the "resource" field.
func ResourceLTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldResource, v))
}

// ResourceContains applies the Contains predicate on the "resource" field.
func ResourceContains(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContains(FieldResource, v))
}

// ResourceHasPrefix applies the HasPrefix predicate on the "resource" field.
func ResourceHasPrefix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasPrefix(FieldResource, v))
}

// ResourceHasSuffix applies the HasSuffix predicate on the "resource" field.
func ResourceHasSuffix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasSuffix(FieldResource, v))
}

// ResourceIsNil applies the IsNil predicate on the "resource" field.
func ResourceIsNil() predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIsNull(FieldResource))
}

// ResourceNotNil applies the NotNil predicate on the "resource" field.
func ResourceNotNil() predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotNull(FieldResource))
}

// ResourceEqualFold applies the EqualFold predicate on the "resource" field.
func ResourceEqualFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEqualFold(FieldResource, v))
}

// ResourceContainsFold applies the ContainsFold predicate on the "resource" field.
func ResourceContainsFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContainsFold(FieldResource, v))
}

// DiagramDataIsNil applies the IsNil predicate on the "diagram_data" field.
func DiagramDataIsNil() predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIsNull(FieldDiagramData))
}

// DiagramDataNotNil applies the NotNil predicate on the "diagram_data" field.
func DiagramDataNotNil() predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotNull(FieldDiagramData))
}

// HasStartFormEQ applies the EQ predicate on the "has_start_form" field.
func HasStartFormEQ(v bool) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldHasStartForm, v))
}

// HasStartFormNEQ applies the NEQ predicate on the "has_start_form" field.
func HasStartFormNEQ(v bool) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldHasStartForm, v))
}

// SuspendedEQ applies the EQ predicate on the "suspended" field.
func SuspendedEQ(v bool) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldSuspended, v))
}

// SuspendedNEQ applies the NEQ predicate on the "suspended" field.
func SuspendedNEQ(v bool) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldSuspended, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldContainsFold(FieldTenantID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProcessDefinition) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProcessDefinition) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProcessDefinition) predicate.ProcessDefinition {
	return predicate.ProcessDefinition(sql.NotPredicates(p))
}
