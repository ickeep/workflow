// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/historicprocessinstance"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/predicate"
)

// HistoricProcessInstanceQuery is the builder for querying HistoricProcessInstance entities.
type HistoricProcessInstanceQuery struct {
	config
	ctx        *QueryContext
	order      []historicprocessinstance.OrderOption
	inters     []Interceptor
	predicates []predicate.HistoricProcessInstance
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HistoricProcessInstanceQuery builder.
func (hpiq *HistoricProcessInstanceQuery) Where(ps ...predicate.HistoricProcessInstance) *HistoricProcessInstanceQuery {
	hpiq.predicates = append(hpiq.predicates, ps...)
	return hpiq
}

// Limit the number of records to be returned by this query.
func (hpiq *HistoricProcessInstanceQuery) Limit(limit int) *HistoricProcessInstanceQuery {
	hpiq.ctx.Limit = &limit
	return hpiq
}

// Offset to start from.
func (hpiq *HistoricProcessInstanceQuery) Offset(offset int) *HistoricProcessInstanceQuery {
	hpiq.ctx.Offset = &offset
	return hpiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (hpiq *HistoricProcessInstanceQuery) Unique(unique bool) *HistoricProcessInstanceQuery {
	hpiq.ctx.Unique = &unique
	return hpiq
}

// Order specifies how the records should be ordered.
func (hpiq *HistoricProcessInstanceQuery) Order(o ...historicprocessinstance.OrderOption) *HistoricProcessInstanceQuery {
	hpiq.order = append(hpiq.order, o...)
	return hpiq
}

// First returns the first HistoricProcessInstance entity from the query.
// Returns a *NotFoundError when no HistoricProcessInstance was found.
func (hpiq *HistoricProcessInstanceQuery) First(ctx context.Context) (*HistoricProcessInstance, error) {
	nodes, err := hpiq.Limit(1).All(setContextOp(ctx, hpiq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{historicprocessinstance.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (hpiq *HistoricProcessInstanceQuery) FirstX(ctx context.Context) *HistoricProcessInstance {
	node, err := hpiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HistoricProcessInstance ID from the query.
// Returns a *NotFoundError when no HistoricProcessInstance ID was found.
func (hpiq *HistoricProcessInstanceQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = hpiq.Limit(1).IDs(setContextOp(ctx, hpiq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{historicprocessinstance.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (hpiq *HistoricProcessInstanceQuery) FirstIDX(ctx context.Context) int64 {
	id, err := hpiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HistoricProcessInstance entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HistoricProcessInstance entity is found.
// Returns a *NotFoundError when no HistoricProcessInstance entities are found.
func (hpiq *HistoricProcessInstanceQuery) Only(ctx context.Context) (*HistoricProcessInstance, error) {
	nodes, err := hpiq.Limit(2).All(setContextOp(ctx, hpiq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{historicprocessinstance.Label}
	default:
		return nil, &NotSingularError{historicprocessinstance.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (hpiq *HistoricProcessInstanceQuery) OnlyX(ctx context.Context) *HistoricProcessInstance {
	node, err := hpiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HistoricProcessInstance ID in the query.
// Returns a *NotSingularError when more than one HistoricProcessInstance ID is found.
// Returns a *NotFoundError when no entities are found.
func (hpiq *HistoricProcessInstanceQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = hpiq.Limit(2).IDs(setContextOp(ctx, hpiq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{historicprocessinstance.Label}
	default:
		err = &NotSingularError{historicprocessinstance.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (hpiq *HistoricProcessInstanceQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := hpiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HistoricProcessInstances.
func (hpiq *HistoricProcessInstanceQuery) All(ctx context.Context) ([]*HistoricProcessInstance, error) {
	ctx = setContextOp(ctx, hpiq.ctx, ent.OpQueryAll)
	if err := hpiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HistoricProcessInstance, *HistoricProcessInstanceQuery]()
	return withInterceptors[[]*HistoricProcessInstance](ctx, hpiq, qr, hpiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (hpiq *HistoricProcessInstanceQuery) AllX(ctx context.Context) []*HistoricProcessInstance {
	nodes, err := hpiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HistoricProcessInstance IDs.
func (hpiq *HistoricProcessInstanceQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if hpiq.ctx.Unique == nil && hpiq.path != nil {
		hpiq.Unique(true)
	}
	ctx = setContextOp(ctx, hpiq.ctx, ent.OpQueryIDs)
	if err = hpiq.Select(historicprocessinstance.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (hpiq *HistoricProcessInstanceQuery) IDsX(ctx context.Context) []int64 {
	ids, err := hpiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (hpiq *HistoricProcessInstanceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, hpiq.ctx, ent.OpQueryCount)
	if err := hpiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, hpiq, querierCount[*HistoricProcessInstanceQuery](), hpiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (hpiq *HistoricProcessInstanceQuery) CountX(ctx context.Context) int {
	count, err := hpiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (hpiq *HistoricProcessInstanceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, hpiq.ctx, ent.OpQueryExist)
	switch _, err := hpiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (hpiq *HistoricProcessInstanceQuery) ExistX(ctx context.Context) bool {
	exist, err := hpiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HistoricProcessInstanceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (hpiq *HistoricProcessInstanceQuery) Clone() *HistoricProcessInstanceQuery {
	if hpiq == nil {
		return nil
	}
	return &HistoricProcessInstanceQuery{
		config:     hpiq.config,
		ctx:        hpiq.ctx.Clone(),
		order:      append([]historicprocessinstance.OrderOption{}, hpiq.order...),
		inters:     append([]Interceptor{}, hpiq.inters...),
		predicates: append([]predicate.HistoricProcessInstance{}, hpiq.predicates...),
		// clone intermediate query.
		sql:  hpiq.sql.Clone(),
		path: hpiq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProcessInstanceID string `json:"process_instance_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HistoricProcessInstance.Query().
//		GroupBy(historicprocessinstance.FieldProcessInstanceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (hpiq *HistoricProcessInstanceQuery) GroupBy(field string, fields ...string) *HistoricProcessInstanceGroupBy {
	hpiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HistoricProcessInstanceGroupBy{build: hpiq}
	grbuild.flds = &hpiq.ctx.Fields
	grbuild.label = historicprocessinstance.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProcessInstanceID string `json:"process_instance_id,omitempty"`
//	}
//
//	client.HistoricProcessInstance.Query().
//		Select(historicprocessinstance.FieldProcessInstanceID).
//		Scan(ctx, &v)
func (hpiq *HistoricProcessInstanceQuery) Select(fields ...string) *HistoricProcessInstanceSelect {
	hpiq.ctx.Fields = append(hpiq.ctx.Fields, fields...)
	sbuild := &HistoricProcessInstanceSelect{HistoricProcessInstanceQuery: hpiq}
	sbuild.label = historicprocessinstance.Label
	sbuild.flds, sbuild.scan = &hpiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HistoricProcessInstanceSelect configured with the given aggregations.
func (hpiq *HistoricProcessInstanceQuery) Aggregate(fns ...AggregateFunc) *HistoricProcessInstanceSelect {
	return hpiq.Select().Aggregate(fns...)
}

func (hpiq *HistoricProcessInstanceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range hpiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, hpiq); err != nil {
				return err
			}
		}
	}
	for _, f := range hpiq.ctx.Fields {
		if !historicprocessinstance.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if hpiq.path != nil {
		prev, err := hpiq.path(ctx)
		if err != nil {
			return err
		}
		hpiq.sql = prev
	}
	return nil
}

func (hpiq *HistoricProcessInstanceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HistoricProcessInstance, error) {
	var (
		nodes = []*HistoricProcessInstance{}
		_spec = hpiq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HistoricProcessInstance).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HistoricProcessInstance{config: hpiq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, hpiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (hpiq *HistoricProcessInstanceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := hpiq.querySpec()
	_spec.Node.Columns = hpiq.ctx.Fields
	if len(hpiq.ctx.Fields) > 0 {
		_spec.Unique = hpiq.ctx.Unique != nil && *hpiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, hpiq.driver, _spec)
}

func (hpiq *HistoricProcessInstanceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(historicprocessinstance.Table, historicprocessinstance.Columns, sqlgraph.NewFieldSpec(historicprocessinstance.FieldID, field.TypeInt64))
	_spec.From = hpiq.sql
	if unique := hpiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if hpiq.path != nil {
		_spec.Unique = true
	}
	if fields := hpiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, historicprocessinstance.FieldID)
		for i := range fields {
			if fields[i] != historicprocessinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := hpiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := hpiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := hpiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := hpiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (hpiq *HistoricProcessInstanceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(hpiq.driver.Dialect())
	t1 := builder.Table(historicprocessinstance.Table)
	columns := hpiq.ctx.Fields
	if len(columns) == 0 {
		columns = historicprocessinstance.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if hpiq.sql != nil {
		selector = hpiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if hpiq.ctx.Unique != nil && *hpiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range hpiq.predicates {
		p(selector)
	}
	for _, p := range hpiq.order {
		p(selector)
	}
	if offset := hpiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := hpiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HistoricProcessInstanceGroupBy is the group-by builder for HistoricProcessInstance entities.
type HistoricProcessInstanceGroupBy struct {
	selector
	build *HistoricProcessInstanceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (hpigb *HistoricProcessInstanceGroupBy) Aggregate(fns ...AggregateFunc) *HistoricProcessInstanceGroupBy {
	hpigb.fns = append(hpigb.fns, fns...)
	return hpigb
}

// Scan applies the selector query and scans the result into the given value.
func (hpigb *HistoricProcessInstanceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hpigb.build.ctx, ent.OpQueryGroupBy)
	if err := hpigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HistoricProcessInstanceQuery, *HistoricProcessInstanceGroupBy](ctx, hpigb.build, hpigb, hpigb.build.inters, v)
}

func (hpigb *HistoricProcessInstanceGroupBy) sqlScan(ctx context.Context, root *HistoricProcessInstanceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(hpigb.fns))
	for _, fn := range hpigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*hpigb.flds)+len(hpigb.fns))
		for _, f := range *hpigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*hpigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hpigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HistoricProcessInstanceSelect is the builder for selecting fields of HistoricProcessInstance entities.
type HistoricProcessInstanceSelect struct {
	*HistoricProcessInstanceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (hpis *HistoricProcessInstanceSelect) Aggregate(fns ...AggregateFunc) *HistoricProcessInstanceSelect {
	hpis.fns = append(hpis.fns, fns...)
	return hpis
}

// Scan applies the selector query and scans the result into the given value.
func (hpis *HistoricProcessInstanceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, hpis.ctx, ent.OpQuerySelect)
	if err := hpis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HistoricProcessInstanceQuery, *HistoricProcessInstanceSelect](ctx, hpis.HistoricProcessInstanceQuery, hpis, hpis.inters, v)
}

func (hpis *HistoricProcessInstanceSelect) sqlScan(ctx context.Context, root *HistoricProcessInstanceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(hpis.fns))
	for _, fn := range hpis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*hpis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := hpis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
