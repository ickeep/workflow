// Code generated by ent, DO NOT EDIT.

package historicprocessinstance

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the historicprocessinstance type in the database.
	Label = "historic_process_instance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProcessInstanceID holds the string denoting the process_instance_id field in the database.
	FieldProcessInstanceID = "process_instance_id"
	// FieldBusinessKey holds the string denoting the business_key field in the database.
	FieldBusinessKey = "business_key"
	// FieldProcessDefinitionID holds the string denoting the process_definition_id field in the database.
	FieldProcessDefinitionID = "process_definition_id"
	// FieldProcessDefinitionKey holds the string denoting the process_definition_key field in the database.
	FieldProcessDefinitionKey = "process_definition_key"
	// FieldProcessDefinitionName holds the string denoting the process_definition_name field in the database.
	FieldProcessDefinitionName = "process_definition_name"
	// FieldProcessDefinitionVersion holds the string denoting the process_definition_version field in the database.
	FieldProcessDefinitionVersion = "process_definition_version"
	// FieldDeploymentID holds the string denoting the deployment_id field in the database.
	FieldDeploymentID = "deployment_id"
	// FieldStartUserID holds the string denoting the start_user_id field in the database.
	FieldStartUserID = "start_user_id"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldStartActivityID holds the string denoting the start_activity_id field in the database.
	FieldStartActivityID = "start_activity_id"
	// FieldEndActivityID holds the string denoting the end_activity_id field in the database.
	FieldEndActivityID = "end_activity_id"
	// FieldSuperProcessInstanceID holds the string denoting the super_process_instance_id field in the database.
	FieldSuperProcessInstanceID = "super_process_instance_id"
	// FieldRootProcessInstanceID holds the string denoting the root_process_instance_id field in the database.
	FieldRootProcessInstanceID = "root_process_instance_id"
	// FieldSuperCaseInstanceID holds the string denoting the super_case_instance_id field in the database.
	FieldSuperCaseInstanceID = "super_case_instance_id"
	// FieldCaseInstanceID holds the string denoting the case_instance_id field in the database.
	FieldCaseInstanceID = "case_instance_id"
	// FieldDeleteReason holds the string denoting the delete_reason field in the database.
	FieldDeleteReason = "delete_reason"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldRemovalTime holds the string denoting the removal_time field in the database.
	FieldRemovalTime = "removal_time"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the historicprocessinstance in the database.
	Table = "historic_process_instances"
)

// Columns holds all SQL columns for historicprocessinstance fields.
var Columns = []string{
	FieldID,
	FieldProcessInstanceID,
	FieldBusinessKey,
	FieldProcessDefinitionID,
	FieldProcessDefinitionKey,
	FieldProcessDefinitionName,
	FieldProcessDefinitionVersion,
	FieldDeploymentID,
	FieldStartUserID,
	FieldStartTime,
	FieldEndTime,
	FieldDuration,
	FieldStartActivityID,
	FieldEndActivityID,
	FieldSuperProcessInstanceID,
	FieldRootProcessInstanceID,
	FieldSuperCaseInstanceID,
	FieldCaseInstanceID,
	FieldDeleteReason,
	FieldTenantID,
	FieldState,
	FieldRemovalTime,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ProcessInstanceIDValidator is a validator for the "process_instance_id" field. It is called by the builders before save.
	ProcessInstanceIDValidator func(string) error
	// BusinessKeyValidator is a validator for the "business_key" field. It is called by the builders before save.
	BusinessKeyValidator func(string) error
	// ProcessDefinitionKeyValidator is a validator for the "process_definition_key" field. It is called by the builders before save.
	ProcessDefinitionKeyValidator func(string) error
	// ProcessDefinitionNameValidator is a validator for the "process_definition_name" field. It is called by the builders before save.
	ProcessDefinitionNameValidator func(string) error
	// DeploymentIDValidator is a validator for the "deployment_id" field. It is called by the builders before save.
	DeploymentIDValidator func(string) error
	// StartUserIDValidator is a validator for the "start_user_id" field. It is called by the builders before save.
	StartUserIDValidator func(string) error
	// StartActivityIDValidator is a validator for the "start_activity_id" field. It is called by the builders before save.
	StartActivityIDValidator func(string) error
	// EndActivityIDValidator is a validator for the "end_activity_id" field. It is called by the builders before save.
	EndActivityIDValidator func(string) error
	// SuperProcessInstanceIDValidator is a validator for the "super_process_instance_id" field. It is called by the builders before save.
	SuperProcessInstanceIDValidator func(string) error
	// RootProcessInstanceIDValidator is a validator for the "root_process_instance_id" field. It is called by the builders before save.
	RootProcessInstanceIDValidator func(string) error
	// SuperCaseInstanceIDValidator is a validator for the "super_case_instance_id" field. It is called by the builders before save.
	SuperCaseInstanceIDValidator func(string) error
	// CaseInstanceIDValidator is a validator for the "case_instance_id" field. It is called by the builders before save.
	CaseInstanceIDValidator func(string) error
	// DeleteReasonValidator is a validator for the "delete_reason" field. It is called by the builders before save.
	DeleteReasonValidator func(string) error
	// DefaultTenantID holds the default value on creation for the "tenant_id" field.
	DefaultTenantID string
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// StateValidator is a validator for the "state" field. It is called by the builders before save.
	StateValidator func(string) error
	// RemovalTimeValidator is a validator for the "removal_time" field. It is called by the builders before save.
	RemovalTimeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the HistoricProcessInstance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProcessInstanceID orders the results by the process_instance_id field.
func ByProcessInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessInstanceID, opts...).ToFunc()
}

// ByBusinessKey orders the results by the business_key field.
func ByBusinessKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessKey, opts...).ToFunc()
}

// ByProcessDefinitionID orders the results by the process_definition_id field.
func ByProcessDefinitionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionID, opts...).ToFunc()
}

// ByProcessDefinitionKey orders the results by the process_definition_key field.
func ByProcessDefinitionKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionKey, opts...).ToFunc()
}

// ByProcessDefinitionName orders the results by the process_definition_name field.
func ByProcessDefinitionName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionName, opts...).ToFunc()
}

// ByProcessDefinitionVersion orders the results by the process_definition_version field.
func ByProcessDefinitionVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionVersion, opts...).ToFunc()
}

// ByDeploymentID orders the results by the deployment_id field.
func ByDeploymentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeploymentID, opts...).ToFunc()
}

// ByStartUserID orders the results by the start_user_id field.
func ByStartUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartUserID, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByStartActivityID orders the results by the start_activity_id field.
func ByStartActivityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartActivityID, opts...).ToFunc()
}

// ByEndActivityID orders the results by the end_activity_id field.
func ByEndActivityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndActivityID, opts...).ToFunc()
}

// BySuperProcessInstanceID orders the results by the super_process_instance_id field.
func BySuperProcessInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuperProcessInstanceID, opts...).ToFunc()
}

// ByRootProcessInstanceID orders the results by the root_process_instance_id field.
func ByRootProcessInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRootProcessInstanceID, opts...).ToFunc()
}

// BySuperCaseInstanceID orders the results by the super_case_instance_id field.
func BySuperCaseInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuperCaseInstanceID, opts...).ToFunc()
}

// ByCaseInstanceID orders the results by the case_instance_id field.
func ByCaseInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaseInstanceID, opts...).ToFunc()
}

// ByDeleteReason orders the results by the delete_reason field.
func ByDeleteReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteReason, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByRemovalTime orders the results by the removal_time field.
func ByRemovalTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemovalTime, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
