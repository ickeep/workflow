// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processevent"
)

// ProcessEvent is the model entity for the ProcessEvent schema.
type ProcessEvent struct {
	config `json:"-"`
	// ID of the ent.
	// 事件ID
	ID int64 `json:"id,omitempty"`
	// 事件类型: PROCESS_STARTED, PROCESS_COMPLETED, TASK_CREATED, TASK_COMPLETED, etc.
	EventType string `json:"event_type,omitempty"`
	// 事件名称
	EventName string `json:"event_name,omitempty"`
	// 执行ID
	ExecutionID string `json:"execution_id,omitempty"`
	// 流程实例ID
	ProcessInstanceID int64 `json:"process_instance_id,omitempty"`
	// 流程定义ID
	ProcessDefinitionID int64 `json:"process_definition_id,omitempty"`
	// 流程定义标识
	ProcessDefinitionKey string `json:"process_definition_key,omitempty"`
	// 任务ID
	TaskID int64 `json:"task_id,omitempty"`
	// 活动ID
	ActivityID string `json:"activity_id,omitempty"`
	// 活动名称
	ActivityName string `json:"activity_name,omitempty"`
	// 活动类型
	ActivityType string `json:"activity_type,omitempty"`
	// 用户ID
	UserID string `json:"user_id,omitempty"`
	// 事件时间戳
	Timestamp time.Time `json:"timestamp,omitempty"`
	// 事件数据(JSON)
	EventData map[string]interface{} `json:"event_data,omitempty"`
	// 关联ID
	CorrelationID string `json:"correlation_id,omitempty"`
	// 消息名称
	MessageName string `json:"message_name,omitempty"`
	// 信号名称
	SignalName string `json:"signal_name,omitempty"`
	// 作业ID
	JobID string `json:"job_id,omitempty"`
	// 作业类型
	JobType string `json:"job_type,omitempty"`
	// 作业处理器类型
	JobHandlerType string `json:"job_handler_type,omitempty"`
	// 租户ID
	TenantID string `json:"tenant_id,omitempty"`
	// 部署ID
	DeploymentID string `json:"deployment_id,omitempty"`
	// 序列计数器
	SequenceCounter string `json:"sequence_counter,omitempty"`
	// 创建时间
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcessEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case processevent.FieldEventData:
			values[i] = new([]byte)
		case processevent.FieldID, processevent.FieldProcessInstanceID, processevent.FieldProcessDefinitionID, processevent.FieldTaskID:
			values[i] = new(sql.NullInt64)
		case processevent.FieldEventType, processevent.FieldEventName, processevent.FieldExecutionID, processevent.FieldProcessDefinitionKey, processevent.FieldActivityID, processevent.FieldActivityName, processevent.FieldActivityType, processevent.FieldUserID, processevent.FieldCorrelationID, processevent.FieldMessageName, processevent.FieldSignalName, processevent.FieldJobID, processevent.FieldJobType, processevent.FieldJobHandlerType, processevent.FieldTenantID, processevent.FieldDeploymentID, processevent.FieldSequenceCounter:
			values[i] = new(sql.NullString)
		case processevent.FieldTimestamp, processevent.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcessEvent fields.
func (pe *ProcessEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case processevent.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = int64(value.Int64)
		case processevent.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				pe.EventType = value.String
			}
		case processevent.FieldEventName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_name", values[i])
			} else if value.Valid {
				pe.EventName = value.String
			}
		case processevent.FieldExecutionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field execution_id", values[i])
			} else if value.Valid {
				pe.ExecutionID = value.String
			}
		case processevent.FieldProcessInstanceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field process_instance_id", values[i])
			} else if value.Valid {
				pe.ProcessInstanceID = value.Int64
			}
		case processevent.FieldProcessDefinitionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field process_definition_id", values[i])
			} else if value.Valid {
				pe.ProcessDefinitionID = value.Int64
			}
		case processevent.FieldProcessDefinitionKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field process_definition_key", values[i])
			} else if value.Valid {
				pe.ProcessDefinitionKey = value.String
			}
		case processevent.FieldTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				pe.TaskID = value.Int64
			}
		case processevent.FieldActivityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_id", values[i])
			} else if value.Valid {
				pe.ActivityID = value.String
			}
		case processevent.FieldActivityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_name", values[i])
			} else if value.Valid {
				pe.ActivityName = value.String
			}
		case processevent.FieldActivityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_type", values[i])
			} else if value.Valid {
				pe.ActivityType = value.String
			}
		case processevent.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				pe.UserID = value.String
			}
		case processevent.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				pe.Timestamp = value.Time
			}
		case processevent.FieldEventData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field event_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pe.EventData); err != nil {
					return fmt.Errorf("unmarshal field event_data: %w", err)
				}
			}
		case processevent.FieldCorrelationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field correlation_id", values[i])
			} else if value.Valid {
				pe.CorrelationID = value.String
			}
		case processevent.FieldMessageName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message_name", values[i])
			} else if value.Valid {
				pe.MessageName = value.String
			}
		case processevent.FieldSignalName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field signal_name", values[i])
			} else if value.Valid {
				pe.SignalName = value.String
			}
		case processevent.FieldJobID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value.Valid {
				pe.JobID = value.String
			}
		case processevent.FieldJobType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_type", values[i])
			} else if value.Valid {
				pe.JobType = value.String
			}
		case processevent.FieldJobHandlerType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_handler_type", values[i])
			} else if value.Valid {
				pe.JobHandlerType = value.String
			}
		case processevent.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				pe.TenantID = value.String
			}
		case processevent.FieldDeploymentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deployment_id", values[i])
			} else if value.Valid {
				pe.DeploymentID = value.String
			}
		case processevent.FieldSequenceCounter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sequence_counter", values[i])
			} else if value.Valid {
				pe.SequenceCounter = value.String
			}
		case processevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pe.CreatedAt = value.Time
			}
		default:
			pe.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProcessEvent.
// This includes values selected through modifiers, order, etc.
func (pe *ProcessEvent) Value(name string) (ent.Value, error) {
	return pe.selectValues.Get(name)
}

// Update returns a builder for updating this ProcessEvent.
// Note that you need to call ProcessEvent.Unwrap() before calling this method if this ProcessEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *ProcessEvent) Update() *ProcessEventUpdateOne {
	return NewProcessEventClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the ProcessEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *ProcessEvent) Unwrap() *ProcessEvent {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProcessEvent is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *ProcessEvent) String() string {
	var builder strings.Builder
	builder.WriteString("ProcessEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("event_type=")
	builder.WriteString(pe.EventType)
	builder.WriteString(", ")
	builder.WriteString("event_name=")
	builder.WriteString(pe.EventName)
	builder.WriteString(", ")
	builder.WriteString("execution_id=")
	builder.WriteString(pe.ExecutionID)
	builder.WriteString(", ")
	builder.WriteString("process_instance_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.ProcessInstanceID))
	builder.WriteString(", ")
	builder.WriteString("process_definition_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.ProcessDefinitionID))
	builder.WriteString(", ")
	builder.WriteString("process_definition_key=")
	builder.WriteString(pe.ProcessDefinitionKey)
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", pe.TaskID))
	builder.WriteString(", ")
	builder.WriteString("activity_id=")
	builder.WriteString(pe.ActivityID)
	builder.WriteString(", ")
	builder.WriteString("activity_name=")
	builder.WriteString(pe.ActivityName)
	builder.WriteString(", ")
	builder.WriteString("activity_type=")
	builder.WriteString(pe.ActivityType)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(pe.UserID)
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(pe.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("event_data=")
	builder.WriteString(fmt.Sprintf("%v", pe.EventData))
	builder.WriteString(", ")
	builder.WriteString("correlation_id=")
	builder.WriteString(pe.CorrelationID)
	builder.WriteString(", ")
	builder.WriteString("message_name=")
	builder.WriteString(pe.MessageName)
	builder.WriteString(", ")
	builder.WriteString("signal_name=")
	builder.WriteString(pe.SignalName)
	builder.WriteString(", ")
	builder.WriteString("job_id=")
	builder.WriteString(pe.JobID)
	builder.WriteString(", ")
	builder.WriteString("job_type=")
	builder.WriteString(pe.JobType)
	builder.WriteString(", ")
	builder.WriteString("job_handler_type=")
	builder.WriteString(pe.JobHandlerType)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(pe.TenantID)
	builder.WriteString(", ")
	builder.WriteString("deployment_id=")
	builder.WriteString(pe.DeploymentID)
	builder.WriteString(", ")
	builder.WriteString("sequence_counter=")
	builder.WriteString(pe.SequenceCounter)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pe.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProcessEvents is a parsable slice of ProcessEvent.
type ProcessEvents []*ProcessEvent
