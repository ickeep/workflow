// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processdefinition"
)

// ProcessDefinitionCreate is the builder for creating a ProcessDefinition entity.
type ProcessDefinitionCreate struct {
	config
	mutation *ProcessDefinitionMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (pdc *ProcessDefinitionCreate) SetKey(s string) *ProcessDefinitionCreate {
	pdc.mutation.SetKey(s)
	return pdc
}

// SetName sets the "name" field.
func (pdc *ProcessDefinitionCreate) SetName(s string) *ProcessDefinitionCreate {
	pdc.mutation.SetName(s)
	return pdc
}

// SetCategory sets the "category" field.
func (pdc *ProcessDefinitionCreate) SetCategory(s string) *ProcessDefinitionCreate {
	pdc.mutation.SetCategory(s)
	return pdc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableCategory(s *string) *ProcessDefinitionCreate {
	if s != nil {
		pdc.SetCategory(*s)
	}
	return pdc
}

// SetVersion sets the "version" field.
func (pdc *ProcessDefinitionCreate) SetVersion(i int32) *ProcessDefinitionCreate {
	pdc.mutation.SetVersion(i)
	return pdc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableVersion(i *int32) *ProcessDefinitionCreate {
	if i != nil {
		pdc.SetVersion(*i)
	}
	return pdc
}

// SetDescription sets the "description" field.
func (pdc *ProcessDefinitionCreate) SetDescription(s string) *ProcessDefinitionCreate {
	pdc.mutation.SetDescription(s)
	return pdc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableDescription(s *string) *ProcessDefinitionCreate {
	if s != nil {
		pdc.SetDescription(*s)
	}
	return pdc
}

// SetDeployTime sets the "deploy_time" field.
func (pdc *ProcessDefinitionCreate) SetDeployTime(t time.Time) *ProcessDefinitionCreate {
	pdc.mutation.SetDeployTime(t)
	return pdc
}

// SetNillableDeployTime sets the "deploy_time" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableDeployTime(t *time.Time) *ProcessDefinitionCreate {
	if t != nil {
		pdc.SetDeployTime(*t)
	}
	return pdc
}

// SetResource sets the "resource" field.
func (pdc *ProcessDefinitionCreate) SetResource(s string) *ProcessDefinitionCreate {
	pdc.mutation.SetResource(s)
	return pdc
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableResource(s *string) *ProcessDefinitionCreate {
	if s != nil {
		pdc.SetResource(*s)
	}
	return pdc
}

// SetDiagramData sets the "diagram_data" field.
func (pdc *ProcessDefinitionCreate) SetDiagramData(m map[string]interface{}) *ProcessDefinitionCreate {
	pdc.mutation.SetDiagramData(m)
	return pdc
}

// SetHasStartForm sets the "has_start_form" field.
func (pdc *ProcessDefinitionCreate) SetHasStartForm(b bool) *ProcessDefinitionCreate {
	pdc.mutation.SetHasStartForm(b)
	return pdc
}

// SetNillableHasStartForm sets the "has_start_form" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableHasStartForm(b *bool) *ProcessDefinitionCreate {
	if b != nil {
		pdc.SetHasStartForm(*b)
	}
	return pdc
}

// SetSuspended sets the "suspended" field.
func (pdc *ProcessDefinitionCreate) SetSuspended(b bool) *ProcessDefinitionCreate {
	pdc.mutation.SetSuspended(b)
	return pdc
}

// SetNillableSuspended sets the "suspended" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableSuspended(b *bool) *ProcessDefinitionCreate {
	if b != nil {
		pdc.SetSuspended(*b)
	}
	return pdc
}

// SetTenantID sets the "tenant_id" field.
func (pdc *ProcessDefinitionCreate) SetTenantID(s string) *ProcessDefinitionCreate {
	pdc.mutation.SetTenantID(s)
	return pdc
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableTenantID(s *string) *ProcessDefinitionCreate {
	if s != nil {
		pdc.SetTenantID(*s)
	}
	return pdc
}

// SetCreatedAt sets the "created_at" field.
func (pdc *ProcessDefinitionCreate) SetCreatedAt(t time.Time) *ProcessDefinitionCreate {
	pdc.mutation.SetCreatedAt(t)
	return pdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableCreatedAt(t *time.Time) *ProcessDefinitionCreate {
	if t != nil {
		pdc.SetCreatedAt(*t)
	}
	return pdc
}

// SetUpdatedAt sets the "updated_at" field.
func (pdc *ProcessDefinitionCreate) SetUpdatedAt(t time.Time) *ProcessDefinitionCreate {
	pdc.mutation.SetUpdatedAt(t)
	return pdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pdc *ProcessDefinitionCreate) SetNillableUpdatedAt(t *time.Time) *ProcessDefinitionCreate {
	if t != nil {
		pdc.SetUpdatedAt(*t)
	}
	return pdc
}

// SetID sets the "id" field.
func (pdc *ProcessDefinitionCreate) SetID(i int64) *ProcessDefinitionCreate {
	pdc.mutation.SetID(i)
	return pdc
}

// Mutation returns the ProcessDefinitionMutation object of the builder.
func (pdc *ProcessDefinitionCreate) Mutation() *ProcessDefinitionMutation {
	return pdc.mutation
}

// Save creates the ProcessDefinition in the database.
func (pdc *ProcessDefinitionCreate) Save(ctx context.Context) (*ProcessDefinition, error) {
	pdc.defaults()
	return withHooks(ctx, pdc.sqlSave, pdc.mutation, pdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *ProcessDefinitionCreate) SaveX(ctx context.Context) *ProcessDefinition {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdc *ProcessDefinitionCreate) Exec(ctx context.Context) error {
	_, err := pdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdc *ProcessDefinitionCreate) ExecX(ctx context.Context) {
	if err := pdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pdc *ProcessDefinitionCreate) defaults() {
	if _, ok := pdc.mutation.Version(); !ok {
		v := processdefinition.DefaultVersion
		pdc.mutation.SetVersion(v)
	}
	if _, ok := pdc.mutation.DeployTime(); !ok {
		v := processdefinition.DefaultDeployTime()
		pdc.mutation.SetDeployTime(v)
	}
	if _, ok := pdc.mutation.HasStartForm(); !ok {
		v := processdefinition.DefaultHasStartForm
		pdc.mutation.SetHasStartForm(v)
	}
	if _, ok := pdc.mutation.Suspended(); !ok {
		v := processdefinition.DefaultSuspended
		pdc.mutation.SetSuspended(v)
	}
	if _, ok := pdc.mutation.TenantID(); !ok {
		v := processdefinition.DefaultTenantID
		pdc.mutation.SetTenantID(v)
	}
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		v := processdefinition.DefaultCreatedAt()
		pdc.mutation.SetCreatedAt(v)
	}
	if _, ok := pdc.mutation.UpdatedAt(); !ok {
		v := processdefinition.DefaultUpdatedAt()
		pdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdc *ProcessDefinitionCreate) check() error {
	if _, ok := pdc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "ProcessDefinition.key"`)}
	}
	if v, ok := pdc.mutation.Key(); ok {
		if err := processdefinition.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.key": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ProcessDefinition.name"`)}
	}
	if v, ok := pdc.mutation.Name(); ok {
		if err := processdefinition.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.name": %w`, err)}
		}
	}
	if v, ok := pdc.mutation.Category(); ok {
		if err := processdefinition.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.category": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "ProcessDefinition.version"`)}
	}
	if _, ok := pdc.mutation.DeployTime(); !ok {
		return &ValidationError{Name: "deploy_time", err: errors.New(`ent: missing required field "ProcessDefinition.deploy_time"`)}
	}
	if _, ok := pdc.mutation.HasStartForm(); !ok {
		return &ValidationError{Name: "has_start_form", err: errors.New(`ent: missing required field "ProcessDefinition.has_start_form"`)}
	}
	if _, ok := pdc.mutation.Suspended(); !ok {
		return &ValidationError{Name: "suspended", err: errors.New(`ent: missing required field "ProcessDefinition.suspended"`)}
	}
	if _, ok := pdc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ProcessDefinition.tenant_id"`)}
	}
	if v, ok := pdc.mutation.TenantID(); ok {
		if err := processdefinition.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessDefinition.tenant_id": %w`, err)}
		}
	}
	if _, ok := pdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessDefinition.created_at"`)}
	}
	if _, ok := pdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProcessDefinition.updated_at"`)}
	}
	return nil
}

func (pdc *ProcessDefinitionCreate) sqlSave(ctx context.Context) (*ProcessDefinition, error) {
	if err := pdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pdc.mutation.id = &_node.ID
	pdc.mutation.done = true
	return _node, nil
}

func (pdc *ProcessDefinitionCreate) createSpec() (*ProcessDefinition, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessDefinition{config: pdc.config}
		_spec = sqlgraph.NewCreateSpec(processdefinition.Table, sqlgraph.NewFieldSpec(processdefinition.FieldID, field.TypeInt64))
	)
	if id, ok := pdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pdc.mutation.Key(); ok {
		_spec.SetField(processdefinition.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := pdc.mutation.Name(); ok {
		_spec.SetField(processdefinition.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pdc.mutation.Category(); ok {
		_spec.SetField(processdefinition.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := pdc.mutation.Version(); ok {
		_spec.SetField(processdefinition.FieldVersion, field.TypeInt32, value)
		_node.Version = value
	}
	if value, ok := pdc.mutation.Description(); ok {
		_spec.SetField(processdefinition.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pdc.mutation.DeployTime(); ok {
		_spec.SetField(processdefinition.FieldDeployTime, field.TypeTime, value)
		_node.DeployTime = value
	}
	if value, ok := pdc.mutation.Resource(); ok {
		_spec.SetField(processdefinition.FieldResource, field.TypeString, value)
		_node.Resource = value
	}
	if value, ok := pdc.mutation.DiagramData(); ok {
		_spec.SetField(processdefinition.FieldDiagramData, field.TypeJSON, value)
		_node.DiagramData = value
	}
	if value, ok := pdc.mutation.HasStartForm(); ok {
		_spec.SetField(processdefinition.FieldHasStartForm, field.TypeBool, value)
		_node.HasStartForm = value
	}
	if value, ok := pdc.mutation.Suspended(); ok {
		_spec.SetField(processdefinition.FieldSuspended, field.TypeBool, value)
		_node.Suspended = value
	}
	if value, ok := pdc.mutation.TenantID(); ok {
		_spec.SetField(processdefinition.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := pdc.mutation.CreatedAt(); ok {
		_spec.SetField(processdefinition.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pdc.mutation.UpdatedAt(); ok {
		_spec.SetField(processdefinition.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ProcessDefinitionCreateBulk is the builder for creating many ProcessDefinition entities in bulk.
type ProcessDefinitionCreateBulk struct {
	config
	err      error
	builders []*ProcessDefinitionCreate
}

// Save creates the ProcessDefinition entities in the database.
func (pdcb *ProcessDefinitionCreateBulk) Save(ctx context.Context) ([]*ProcessDefinition, error) {
	if pdcb.err != nil {
		return nil, pdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*ProcessDefinition, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessDefinitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *ProcessDefinitionCreateBulk) SaveX(ctx context.Context) []*ProcessDefinition {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdcb *ProcessDefinitionCreateBulk) Exec(ctx context.Context) error {
	_, err := pdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdcb *ProcessDefinitionCreateBulk) ExecX(ctx context.Context) {
	if err := pdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
