// Code generated by ent, DO NOT EDIT.

package processvariable

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the processvariable type in the database.
	Label = "process_variable"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTextValue holds the string denoting the text_value field in the database.
	FieldTextValue = "text_value"
	// FieldTextValue2 holds the string denoting the text_value2 field in the database.
	FieldTextValue2 = "text_value2"
	// FieldLongValue holds the string denoting the long_value field in the database.
	FieldLongValue = "long_value"
	// FieldDoubleValue holds the string denoting the double_value field in the database.
	FieldDoubleValue = "double_value"
	// FieldByteArrayValue holds the string denoting the byte_array_value field in the database.
	FieldByteArrayValue = "byte_array_value"
	// FieldExecutionID holds the string denoting the execution_id field in the database.
	FieldExecutionID = "execution_id"
	// FieldProcessInstanceID holds the string denoting the process_instance_id field in the database.
	FieldProcessInstanceID = "process_instance_id"
	// FieldProcessDefinitionID holds the string denoting the process_definition_id field in the database.
	FieldProcessDefinitionID = "process_definition_id"
	// FieldCaseExecutionID holds the string denoting the case_execution_id field in the database.
	FieldCaseExecutionID = "case_execution_id"
	// FieldCaseInstanceID holds the string denoting the case_instance_id field in the database.
	FieldCaseInstanceID = "case_instance_id"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldActivityInstanceID holds the string denoting the activity_instance_id field in the database.
	FieldActivityInstanceID = "activity_instance_id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldSequenceCounter holds the string denoting the sequence_counter field in the database.
	FieldSequenceCounter = "sequence_counter"
	// FieldConcurrentLocal holds the string denoting the concurrent_local field in the database.
	FieldConcurrentLocal = "concurrent_local"
	// FieldScopeID holds the string denoting the scope_id field in the database.
	FieldScopeID = "scope_id"
	// FieldScopeType holds the string denoting the scope_type field in the database.
	FieldScopeType = "scope_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the processvariable in the database.
	Table = "process_variables"
)

// Columns holds all SQL columns for processvariable fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldTextValue,
	FieldTextValue2,
	FieldLongValue,
	FieldDoubleValue,
	FieldByteArrayValue,
	FieldExecutionID,
	FieldProcessInstanceID,
	FieldProcessDefinitionID,
	FieldCaseExecutionID,
	FieldCaseInstanceID,
	FieldTaskID,
	FieldActivityInstanceID,
	FieldTenantID,
	FieldSequenceCounter,
	FieldConcurrentLocal,
	FieldScopeID,
	FieldScopeType,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// TypeValidator is a validator for the "type" field. It is called by the builders before save.
	TypeValidator func(string) error
	// ExecutionIDValidator is a validator for the "execution_id" field. It is called by the builders before save.
	ExecutionIDValidator func(string) error
	// CaseExecutionIDValidator is a validator for the "case_execution_id" field. It is called by the builders before save.
	CaseExecutionIDValidator func(string) error
	// CaseInstanceIDValidator is a validator for the "case_instance_id" field. It is called by the builders before save.
	CaseInstanceIDValidator func(string) error
	// ActivityInstanceIDValidator is a validator for the "activity_instance_id" field. It is called by the builders before save.
	ActivityInstanceIDValidator func(string) error
	// DefaultTenantID holds the default value on creation for the "tenant_id" field.
	DefaultTenantID string
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// DefaultSequenceCounter holds the default value on creation for the "sequence_counter" field.
	DefaultSequenceCounter int32
	// DefaultConcurrentLocal holds the default value on creation for the "concurrent_local" field.
	DefaultConcurrentLocal bool
	// ScopeIDValidator is a validator for the "scope_id" field. It is called by the builders before save.
	ScopeIDValidator func(string) error
	// ScopeTypeValidator is a validator for the "scope_type" field. It is called by the builders before save.
	ScopeTypeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the ProcessVariable queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByTextValue orders the results by the text_value field.
func ByTextValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTextValue, opts...).ToFunc()
}

// ByTextValue2 orders the results by the text_value2 field.
func ByTextValue2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTextValue2, opts...).ToFunc()
}

// ByLongValue orders the results by the long_value field.
func ByLongValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLongValue, opts...).ToFunc()
}

// ByDoubleValue orders the results by the double_value field.
func ByDoubleValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDoubleValue, opts...).ToFunc()
}

// ByExecutionID orders the results by the execution_id field.
func ByExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExecutionID, opts...).ToFunc()
}

// ByProcessInstanceID orders the results by the process_instance_id field.
func ByProcessInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessInstanceID, opts...).ToFunc()
}

// ByProcessDefinitionID orders the results by the process_definition_id field.
func ByProcessDefinitionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessDefinitionID, opts...).ToFunc()
}

// ByCaseExecutionID orders the results by the case_execution_id field.
func ByCaseExecutionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaseExecutionID, opts...).ToFunc()
}

// ByCaseInstanceID orders the results by the case_instance_id field.
func ByCaseInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCaseInstanceID, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByActivityInstanceID orders the results by the activity_instance_id field.
func ByActivityInstanceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityInstanceID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// BySequenceCounter orders the results by the sequence_counter field.
func BySequenceCounter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSequenceCounter, opts...).ToFunc()
}

// ByConcurrentLocal orders the results by the concurrent_local field.
func ByConcurrentLocal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConcurrentLocal, opts...).ToFunc()
}

// ByScopeID orders the results by the scope_id field.
func ByScopeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScopeID, opts...).ToFunc()
}

// ByScopeType orders the results by the scope_type field.
func ByScopeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScopeType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
