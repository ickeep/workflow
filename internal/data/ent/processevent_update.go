// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/predicate"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processevent"
)

// ProcessEventUpdate is the builder for updating ProcessEvent entities.
type ProcessEventUpdate struct {
	config
	hooks    []Hook
	mutation *ProcessEventMutation
}

// Where appends a list predicates to the ProcessEventUpdate builder.
func (peu *ProcessEventUpdate) Where(ps ...predicate.ProcessEvent) *ProcessEventUpdate {
	peu.mutation.Where(ps...)
	return peu
}

// SetEventType sets the "event_type" field.
func (peu *ProcessEventUpdate) SetEventType(s string) *ProcessEventUpdate {
	peu.mutation.SetEventType(s)
	return peu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableEventType(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetEventType(*s)
	}
	return peu
}

// SetEventName sets the "event_name" field.
func (peu *ProcessEventUpdate) SetEventName(s string) *ProcessEventUpdate {
	peu.mutation.SetEventName(s)
	return peu
}

// SetNillableEventName sets the "event_name" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableEventName(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetEventName(*s)
	}
	return peu
}

// ClearEventName clears the value of the "event_name" field.
func (peu *ProcessEventUpdate) ClearEventName() *ProcessEventUpdate {
	peu.mutation.ClearEventName()
	return peu
}

// SetExecutionID sets the "execution_id" field.
func (peu *ProcessEventUpdate) SetExecutionID(s string) *ProcessEventUpdate {
	peu.mutation.SetExecutionID(s)
	return peu
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableExecutionID(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetExecutionID(*s)
	}
	return peu
}

// ClearExecutionID clears the value of the "execution_id" field.
func (peu *ProcessEventUpdate) ClearExecutionID() *ProcessEventUpdate {
	peu.mutation.ClearExecutionID()
	return peu
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (peu *ProcessEventUpdate) SetProcessInstanceID(i int64) *ProcessEventUpdate {
	peu.mutation.ResetProcessInstanceID()
	peu.mutation.SetProcessInstanceID(i)
	return peu
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableProcessInstanceID(i *int64) *ProcessEventUpdate {
	if i != nil {
		peu.SetProcessInstanceID(*i)
	}
	return peu
}

// AddProcessInstanceID adds i to the "process_instance_id" field.
func (peu *ProcessEventUpdate) AddProcessInstanceID(i int64) *ProcessEventUpdate {
	peu.mutation.AddProcessInstanceID(i)
	return peu
}

// ClearProcessInstanceID clears the value of the "process_instance_id" field.
func (peu *ProcessEventUpdate) ClearProcessInstanceID() *ProcessEventUpdate {
	peu.mutation.ClearProcessInstanceID()
	return peu
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (peu *ProcessEventUpdate) SetProcessDefinitionID(i int64) *ProcessEventUpdate {
	peu.mutation.ResetProcessDefinitionID()
	peu.mutation.SetProcessDefinitionID(i)
	return peu
}

// SetNillableProcessDefinitionID sets the "process_definition_id" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableProcessDefinitionID(i *int64) *ProcessEventUpdate {
	if i != nil {
		peu.SetProcessDefinitionID(*i)
	}
	return peu
}

// AddProcessDefinitionID adds i to the "process_definition_id" field.
func (peu *ProcessEventUpdate) AddProcessDefinitionID(i int64) *ProcessEventUpdate {
	peu.mutation.AddProcessDefinitionID(i)
	return peu
}

// ClearProcessDefinitionID clears the value of the "process_definition_id" field.
func (peu *ProcessEventUpdate) ClearProcessDefinitionID() *ProcessEventUpdate {
	peu.mutation.ClearProcessDefinitionID()
	return peu
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (peu *ProcessEventUpdate) SetProcessDefinitionKey(s string) *ProcessEventUpdate {
	peu.mutation.SetProcessDefinitionKey(s)
	return peu
}

// SetNillableProcessDefinitionKey sets the "process_definition_key" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableProcessDefinitionKey(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetProcessDefinitionKey(*s)
	}
	return peu
}

// ClearProcessDefinitionKey clears the value of the "process_definition_key" field.
func (peu *ProcessEventUpdate) ClearProcessDefinitionKey() *ProcessEventUpdate {
	peu.mutation.ClearProcessDefinitionKey()
	return peu
}

// SetTaskID sets the "task_id" field.
func (peu *ProcessEventUpdate) SetTaskID(i int64) *ProcessEventUpdate {
	peu.mutation.ResetTaskID()
	peu.mutation.SetTaskID(i)
	return peu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableTaskID(i *int64) *ProcessEventUpdate {
	if i != nil {
		peu.SetTaskID(*i)
	}
	return peu
}

// AddTaskID adds i to the "task_id" field.
func (peu *ProcessEventUpdate) AddTaskID(i int64) *ProcessEventUpdate {
	peu.mutation.AddTaskID(i)
	return peu
}

// ClearTaskID clears the value of the "task_id" field.
func (peu *ProcessEventUpdate) ClearTaskID() *ProcessEventUpdate {
	peu.mutation.ClearTaskID()
	return peu
}

// SetActivityID sets the "activity_id" field.
func (peu *ProcessEventUpdate) SetActivityID(s string) *ProcessEventUpdate {
	peu.mutation.SetActivityID(s)
	return peu
}

// SetNillableActivityID sets the "activity_id" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableActivityID(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetActivityID(*s)
	}
	return peu
}

// ClearActivityID clears the value of the "activity_id" field.
func (peu *ProcessEventUpdate) ClearActivityID() *ProcessEventUpdate {
	peu.mutation.ClearActivityID()
	return peu
}

// SetActivityName sets the "activity_name" field.
func (peu *ProcessEventUpdate) SetActivityName(s string) *ProcessEventUpdate {
	peu.mutation.SetActivityName(s)
	return peu
}

// SetNillableActivityName sets the "activity_name" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableActivityName(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetActivityName(*s)
	}
	return peu
}

// ClearActivityName clears the value of the "activity_name" field.
func (peu *ProcessEventUpdate) ClearActivityName() *ProcessEventUpdate {
	peu.mutation.ClearActivityName()
	return peu
}

// SetActivityType sets the "activity_type" field.
func (peu *ProcessEventUpdate) SetActivityType(s string) *ProcessEventUpdate {
	peu.mutation.SetActivityType(s)
	return peu
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableActivityType(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetActivityType(*s)
	}
	return peu
}

// ClearActivityType clears the value of the "activity_type" field.
func (peu *ProcessEventUpdate) ClearActivityType() *ProcessEventUpdate {
	peu.mutation.ClearActivityType()
	return peu
}

// SetUserID sets the "user_id" field.
func (peu *ProcessEventUpdate) SetUserID(s string) *ProcessEventUpdate {
	peu.mutation.SetUserID(s)
	return peu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableUserID(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetUserID(*s)
	}
	return peu
}

// ClearUserID clears the value of the "user_id" field.
func (peu *ProcessEventUpdate) ClearUserID() *ProcessEventUpdate {
	peu.mutation.ClearUserID()
	return peu
}

// SetTimestamp sets the "timestamp" field.
func (peu *ProcessEventUpdate) SetTimestamp(t time.Time) *ProcessEventUpdate {
	peu.mutation.SetTimestamp(t)
	return peu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableTimestamp(t *time.Time) *ProcessEventUpdate {
	if t != nil {
		peu.SetTimestamp(*t)
	}
	return peu
}

// SetEventData sets the "event_data" field.
func (peu *ProcessEventUpdate) SetEventData(m map[string]interface{}) *ProcessEventUpdate {
	peu.mutation.SetEventData(m)
	return peu
}

// ClearEventData clears the value of the "event_data" field.
func (peu *ProcessEventUpdate) ClearEventData() *ProcessEventUpdate {
	peu.mutation.ClearEventData()
	return peu
}

// SetCorrelationID sets the "correlation_id" field.
func (peu *ProcessEventUpdate) SetCorrelationID(s string) *ProcessEventUpdate {
	peu.mutation.SetCorrelationID(s)
	return peu
}

// SetNillableCorrelationID sets the "correlation_id" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableCorrelationID(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetCorrelationID(*s)
	}
	return peu
}

// ClearCorrelationID clears the value of the "correlation_id" field.
func (peu *ProcessEventUpdate) ClearCorrelationID() *ProcessEventUpdate {
	peu.mutation.ClearCorrelationID()
	return peu
}

// SetMessageName sets the "message_name" field.
func (peu *ProcessEventUpdate) SetMessageName(s string) *ProcessEventUpdate {
	peu.mutation.SetMessageName(s)
	return peu
}

// SetNillableMessageName sets the "message_name" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableMessageName(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetMessageName(*s)
	}
	return peu
}

// ClearMessageName clears the value of the "message_name" field.
func (peu *ProcessEventUpdate) ClearMessageName() *ProcessEventUpdate {
	peu.mutation.ClearMessageName()
	return peu
}

// SetSignalName sets the "signal_name" field.
func (peu *ProcessEventUpdate) SetSignalName(s string) *ProcessEventUpdate {
	peu.mutation.SetSignalName(s)
	return peu
}

// SetNillableSignalName sets the "signal_name" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableSignalName(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetSignalName(*s)
	}
	return peu
}

// ClearSignalName clears the value of the "signal_name" field.
func (peu *ProcessEventUpdate) ClearSignalName() *ProcessEventUpdate {
	peu.mutation.ClearSignalName()
	return peu
}

// SetJobID sets the "job_id" field.
func (peu *ProcessEventUpdate) SetJobID(s string) *ProcessEventUpdate {
	peu.mutation.SetJobID(s)
	return peu
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableJobID(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetJobID(*s)
	}
	return peu
}

// ClearJobID clears the value of the "job_id" field.
func (peu *ProcessEventUpdate) ClearJobID() *ProcessEventUpdate {
	peu.mutation.ClearJobID()
	return peu
}

// SetJobType sets the "job_type" field.
func (peu *ProcessEventUpdate) SetJobType(s string) *ProcessEventUpdate {
	peu.mutation.SetJobType(s)
	return peu
}

// SetNillableJobType sets the "job_type" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableJobType(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetJobType(*s)
	}
	return peu
}

// ClearJobType clears the value of the "job_type" field.
func (peu *ProcessEventUpdate) ClearJobType() *ProcessEventUpdate {
	peu.mutation.ClearJobType()
	return peu
}

// SetJobHandlerType sets the "job_handler_type" field.
func (peu *ProcessEventUpdate) SetJobHandlerType(s string) *ProcessEventUpdate {
	peu.mutation.SetJobHandlerType(s)
	return peu
}

// SetNillableJobHandlerType sets the "job_handler_type" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableJobHandlerType(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetJobHandlerType(*s)
	}
	return peu
}

// ClearJobHandlerType clears the value of the "job_handler_type" field.
func (peu *ProcessEventUpdate) ClearJobHandlerType() *ProcessEventUpdate {
	peu.mutation.ClearJobHandlerType()
	return peu
}

// SetTenantID sets the "tenant_id" field.
func (peu *ProcessEventUpdate) SetTenantID(s string) *ProcessEventUpdate {
	peu.mutation.SetTenantID(s)
	return peu
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableTenantID(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetTenantID(*s)
	}
	return peu
}

// SetDeploymentID sets the "deployment_id" field.
func (peu *ProcessEventUpdate) SetDeploymentID(s string) *ProcessEventUpdate {
	peu.mutation.SetDeploymentID(s)
	return peu
}

// SetNillableDeploymentID sets the "deployment_id" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableDeploymentID(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetDeploymentID(*s)
	}
	return peu
}

// ClearDeploymentID clears the value of the "deployment_id" field.
func (peu *ProcessEventUpdate) ClearDeploymentID() *ProcessEventUpdate {
	peu.mutation.ClearDeploymentID()
	return peu
}

// SetSequenceCounter sets the "sequence_counter" field.
func (peu *ProcessEventUpdate) SetSequenceCounter(s string) *ProcessEventUpdate {
	peu.mutation.SetSequenceCounter(s)
	return peu
}

// SetNillableSequenceCounter sets the "sequence_counter" field if the given value is not nil.
func (peu *ProcessEventUpdate) SetNillableSequenceCounter(s *string) *ProcessEventUpdate {
	if s != nil {
		peu.SetSequenceCounter(*s)
	}
	return peu
}

// ClearSequenceCounter clears the value of the "sequence_counter" field.
func (peu *ProcessEventUpdate) ClearSequenceCounter() *ProcessEventUpdate {
	peu.mutation.ClearSequenceCounter()
	return peu
}

// Mutation returns the ProcessEventMutation object of the builder.
func (peu *ProcessEventUpdate) Mutation() *ProcessEventMutation {
	return peu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (peu *ProcessEventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, peu.sqlSave, peu.mutation, peu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peu *ProcessEventUpdate) SaveX(ctx context.Context) int {
	affected, err := peu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (peu *ProcessEventUpdate) Exec(ctx context.Context) error {
	_, err := peu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peu *ProcessEventUpdate) ExecX(ctx context.Context) {
	if err := peu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (peu *ProcessEventUpdate) check() error {
	if v, ok := peu.mutation.EventType(); ok {
		if err := processevent.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.event_type": %w`, err)}
		}
	}
	if v, ok := peu.mutation.EventName(); ok {
		if err := processevent.EventNameValidator(v); err != nil {
			return &ValidationError{Name: "event_name", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.event_name": %w`, err)}
		}
	}
	if v, ok := peu.mutation.ExecutionID(); ok {
		if err := processevent.ExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "execution_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.execution_id": %w`, err)}
		}
	}
	if v, ok := peu.mutation.ProcessDefinitionKey(); ok {
		if err := processevent.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.process_definition_key": %w`, err)}
		}
	}
	if v, ok := peu.mutation.ActivityID(); ok {
		if err := processevent.ActivityIDValidator(v); err != nil {
			return &ValidationError{Name: "activity_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.activity_id": %w`, err)}
		}
	}
	if v, ok := peu.mutation.ActivityName(); ok {
		if err := processevent.ActivityNameValidator(v); err != nil {
			return &ValidationError{Name: "activity_name", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.activity_name": %w`, err)}
		}
	}
	if v, ok := peu.mutation.ActivityType(); ok {
		if err := processevent.ActivityTypeValidator(v); err != nil {
			return &ValidationError{Name: "activity_type", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.activity_type": %w`, err)}
		}
	}
	if v, ok := peu.mutation.UserID(); ok {
		if err := processevent.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.user_id": %w`, err)}
		}
	}
	if v, ok := peu.mutation.CorrelationID(); ok {
		if err := processevent.CorrelationIDValidator(v); err != nil {
			return &ValidationError{Name: "correlation_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.correlation_id": %w`, err)}
		}
	}
	if v, ok := peu.mutation.MessageName(); ok {
		if err := processevent.MessageNameValidator(v); err != nil {
			return &ValidationError{Name: "message_name", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.message_name": %w`, err)}
		}
	}
	if v, ok := peu.mutation.SignalName(); ok {
		if err := processevent.SignalNameValidator(v); err != nil {
			return &ValidationError{Name: "signal_name", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.signal_name": %w`, err)}
		}
	}
	if v, ok := peu.mutation.JobID(); ok {
		if err := processevent.JobIDValidator(v); err != nil {
			return &ValidationError{Name: "job_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.job_id": %w`, err)}
		}
	}
	if v, ok := peu.mutation.JobType(); ok {
		if err := processevent.JobTypeValidator(v); err != nil {
			return &ValidationError{Name: "job_type", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.job_type": %w`, err)}
		}
	}
	if v, ok := peu.mutation.JobHandlerType(); ok {
		if err := processevent.JobHandlerTypeValidator(v); err != nil {
			return &ValidationError{Name: "job_handler_type", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.job_handler_type": %w`, err)}
		}
	}
	if v, ok := peu.mutation.TenantID(); ok {
		if err := processevent.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.tenant_id": %w`, err)}
		}
	}
	if v, ok := peu.mutation.DeploymentID(); ok {
		if err := processevent.DeploymentIDValidator(v); err != nil {
			return &ValidationError{Name: "deployment_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.deployment_id": %w`, err)}
		}
	}
	if v, ok := peu.mutation.SequenceCounter(); ok {
		if err := processevent.SequenceCounterValidator(v); err != nil {
			return &ValidationError{Name: "sequence_counter", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.sequence_counter": %w`, err)}
		}
	}
	return nil
}

func (peu *ProcessEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := peu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(processevent.Table, processevent.Columns, sqlgraph.NewFieldSpec(processevent.FieldID, field.TypeInt64))
	if ps := peu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peu.mutation.EventType(); ok {
		_spec.SetField(processevent.FieldEventType, field.TypeString, value)
	}
	if value, ok := peu.mutation.EventName(); ok {
		_spec.SetField(processevent.FieldEventName, field.TypeString, value)
	}
	if peu.mutation.EventNameCleared() {
		_spec.ClearField(processevent.FieldEventName, field.TypeString)
	}
	if value, ok := peu.mutation.ExecutionID(); ok {
		_spec.SetField(processevent.FieldExecutionID, field.TypeString, value)
	}
	if peu.mutation.ExecutionIDCleared() {
		_spec.ClearField(processevent.FieldExecutionID, field.TypeString)
	}
	if value, ok := peu.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processevent.FieldProcessInstanceID, field.TypeInt64, value)
	}
	if value, ok := peu.mutation.AddedProcessInstanceID(); ok {
		_spec.AddField(processevent.FieldProcessInstanceID, field.TypeInt64, value)
	}
	if peu.mutation.ProcessInstanceIDCleared() {
		_spec.ClearField(processevent.FieldProcessInstanceID, field.TypeInt64)
	}
	if value, ok := peu.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(processevent.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := peu.mutation.AddedProcessDefinitionID(); ok {
		_spec.AddField(processevent.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if peu.mutation.ProcessDefinitionIDCleared() {
		_spec.ClearField(processevent.FieldProcessDefinitionID, field.TypeInt64)
	}
	if value, ok := peu.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(processevent.FieldProcessDefinitionKey, field.TypeString, value)
	}
	if peu.mutation.ProcessDefinitionKeyCleared() {
		_spec.ClearField(processevent.FieldProcessDefinitionKey, field.TypeString)
	}
	if value, ok := peu.mutation.TaskID(); ok {
		_spec.SetField(processevent.FieldTaskID, field.TypeInt64, value)
	}
	if value, ok := peu.mutation.AddedTaskID(); ok {
		_spec.AddField(processevent.FieldTaskID, field.TypeInt64, value)
	}
	if peu.mutation.TaskIDCleared() {
		_spec.ClearField(processevent.FieldTaskID, field.TypeInt64)
	}
	if value, ok := peu.mutation.ActivityID(); ok {
		_spec.SetField(processevent.FieldActivityID, field.TypeString, value)
	}
	if peu.mutation.ActivityIDCleared() {
		_spec.ClearField(processevent.FieldActivityID, field.TypeString)
	}
	if value, ok := peu.mutation.ActivityName(); ok {
		_spec.SetField(processevent.FieldActivityName, field.TypeString, value)
	}
	if peu.mutation.ActivityNameCleared() {
		_spec.ClearField(processevent.FieldActivityName, field.TypeString)
	}
	if value, ok := peu.mutation.ActivityType(); ok {
		_spec.SetField(processevent.FieldActivityType, field.TypeString, value)
	}
	if peu.mutation.ActivityTypeCleared() {
		_spec.ClearField(processevent.FieldActivityType, field.TypeString)
	}
	if value, ok := peu.mutation.UserID(); ok {
		_spec.SetField(processevent.FieldUserID, field.TypeString, value)
	}
	if peu.mutation.UserIDCleared() {
		_spec.ClearField(processevent.FieldUserID, field.TypeString)
	}
	if value, ok := peu.mutation.Timestamp(); ok {
		_spec.SetField(processevent.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := peu.mutation.EventData(); ok {
		_spec.SetField(processevent.FieldEventData, field.TypeJSON, value)
	}
	if peu.mutation.EventDataCleared() {
		_spec.ClearField(processevent.FieldEventData, field.TypeJSON)
	}
	if value, ok := peu.mutation.CorrelationID(); ok {
		_spec.SetField(processevent.FieldCorrelationID, field.TypeString, value)
	}
	if peu.mutation.CorrelationIDCleared() {
		_spec.ClearField(processevent.FieldCorrelationID, field.TypeString)
	}
	if value, ok := peu.mutation.MessageName(); ok {
		_spec.SetField(processevent.FieldMessageName, field.TypeString, value)
	}
	if peu.mutation.MessageNameCleared() {
		_spec.ClearField(processevent.FieldMessageName, field.TypeString)
	}
	if value, ok := peu.mutation.SignalName(); ok {
		_spec.SetField(processevent.FieldSignalName, field.TypeString, value)
	}
	if peu.mutation.SignalNameCleared() {
		_spec.ClearField(processevent.FieldSignalName, field.TypeString)
	}
	if value, ok := peu.mutation.JobID(); ok {
		_spec.SetField(processevent.FieldJobID, field.TypeString, value)
	}
	if peu.mutation.JobIDCleared() {
		_spec.ClearField(processevent.FieldJobID, field.TypeString)
	}
	if value, ok := peu.mutation.JobType(); ok {
		_spec.SetField(processevent.FieldJobType, field.TypeString, value)
	}
	if peu.mutation.JobTypeCleared() {
		_spec.ClearField(processevent.FieldJobType, field.TypeString)
	}
	if value, ok := peu.mutation.JobHandlerType(); ok {
		_spec.SetField(processevent.FieldJobHandlerType, field.TypeString, value)
	}
	if peu.mutation.JobHandlerTypeCleared() {
		_spec.ClearField(processevent.FieldJobHandlerType, field.TypeString)
	}
	if value, ok := peu.mutation.TenantID(); ok {
		_spec.SetField(processevent.FieldTenantID, field.TypeString, value)
	}
	if value, ok := peu.mutation.DeploymentID(); ok {
		_spec.SetField(processevent.FieldDeploymentID, field.TypeString, value)
	}
	if peu.mutation.DeploymentIDCleared() {
		_spec.ClearField(processevent.FieldDeploymentID, field.TypeString)
	}
	if value, ok := peu.mutation.SequenceCounter(); ok {
		_spec.SetField(processevent.FieldSequenceCounter, field.TypeString, value)
	}
	if peu.mutation.SequenceCounterCleared() {
		_spec.ClearField(processevent.FieldSequenceCounter, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, peu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	peu.mutation.done = true
	return n, nil
}

// ProcessEventUpdateOne is the builder for updating a single ProcessEvent entity.
type ProcessEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcessEventMutation
}

// SetEventType sets the "event_type" field.
func (peuo *ProcessEventUpdateOne) SetEventType(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetEventType(s)
	return peuo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableEventType(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetEventType(*s)
	}
	return peuo
}

// SetEventName sets the "event_name" field.
func (peuo *ProcessEventUpdateOne) SetEventName(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetEventName(s)
	return peuo
}

// SetNillableEventName sets the "event_name" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableEventName(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetEventName(*s)
	}
	return peuo
}

// ClearEventName clears the value of the "event_name" field.
func (peuo *ProcessEventUpdateOne) ClearEventName() *ProcessEventUpdateOne {
	peuo.mutation.ClearEventName()
	return peuo
}

// SetExecutionID sets the "execution_id" field.
func (peuo *ProcessEventUpdateOne) SetExecutionID(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetExecutionID(s)
	return peuo
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableExecutionID(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetExecutionID(*s)
	}
	return peuo
}

// ClearExecutionID clears the value of the "execution_id" field.
func (peuo *ProcessEventUpdateOne) ClearExecutionID() *ProcessEventUpdateOne {
	peuo.mutation.ClearExecutionID()
	return peuo
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (peuo *ProcessEventUpdateOne) SetProcessInstanceID(i int64) *ProcessEventUpdateOne {
	peuo.mutation.ResetProcessInstanceID()
	peuo.mutation.SetProcessInstanceID(i)
	return peuo
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableProcessInstanceID(i *int64) *ProcessEventUpdateOne {
	if i != nil {
		peuo.SetProcessInstanceID(*i)
	}
	return peuo
}

// AddProcessInstanceID adds i to the "process_instance_id" field.
func (peuo *ProcessEventUpdateOne) AddProcessInstanceID(i int64) *ProcessEventUpdateOne {
	peuo.mutation.AddProcessInstanceID(i)
	return peuo
}

// ClearProcessInstanceID clears the value of the "process_instance_id" field.
func (peuo *ProcessEventUpdateOne) ClearProcessInstanceID() *ProcessEventUpdateOne {
	peuo.mutation.ClearProcessInstanceID()
	return peuo
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (peuo *ProcessEventUpdateOne) SetProcessDefinitionID(i int64) *ProcessEventUpdateOne {
	peuo.mutation.ResetProcessDefinitionID()
	peuo.mutation.SetProcessDefinitionID(i)
	return peuo
}

// SetNillableProcessDefinitionID sets the "process_definition_id" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableProcessDefinitionID(i *int64) *ProcessEventUpdateOne {
	if i != nil {
		peuo.SetProcessDefinitionID(*i)
	}
	return peuo
}

// AddProcessDefinitionID adds i to the "process_definition_id" field.
func (peuo *ProcessEventUpdateOne) AddProcessDefinitionID(i int64) *ProcessEventUpdateOne {
	peuo.mutation.AddProcessDefinitionID(i)
	return peuo
}

// ClearProcessDefinitionID clears the value of the "process_definition_id" field.
func (peuo *ProcessEventUpdateOne) ClearProcessDefinitionID() *ProcessEventUpdateOne {
	peuo.mutation.ClearProcessDefinitionID()
	return peuo
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (peuo *ProcessEventUpdateOne) SetProcessDefinitionKey(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetProcessDefinitionKey(s)
	return peuo
}

// SetNillableProcessDefinitionKey sets the "process_definition_key" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableProcessDefinitionKey(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetProcessDefinitionKey(*s)
	}
	return peuo
}

// ClearProcessDefinitionKey clears the value of the "process_definition_key" field.
func (peuo *ProcessEventUpdateOne) ClearProcessDefinitionKey() *ProcessEventUpdateOne {
	peuo.mutation.ClearProcessDefinitionKey()
	return peuo
}

// SetTaskID sets the "task_id" field.
func (peuo *ProcessEventUpdateOne) SetTaskID(i int64) *ProcessEventUpdateOne {
	peuo.mutation.ResetTaskID()
	peuo.mutation.SetTaskID(i)
	return peuo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableTaskID(i *int64) *ProcessEventUpdateOne {
	if i != nil {
		peuo.SetTaskID(*i)
	}
	return peuo
}

// AddTaskID adds i to the "task_id" field.
func (peuo *ProcessEventUpdateOne) AddTaskID(i int64) *ProcessEventUpdateOne {
	peuo.mutation.AddTaskID(i)
	return peuo
}

// ClearTaskID clears the value of the "task_id" field.
func (peuo *ProcessEventUpdateOne) ClearTaskID() *ProcessEventUpdateOne {
	peuo.mutation.ClearTaskID()
	return peuo
}

// SetActivityID sets the "activity_id" field.
func (peuo *ProcessEventUpdateOne) SetActivityID(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetActivityID(s)
	return peuo
}

// SetNillableActivityID sets the "activity_id" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableActivityID(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetActivityID(*s)
	}
	return peuo
}

// ClearActivityID clears the value of the "activity_id" field.
func (peuo *ProcessEventUpdateOne) ClearActivityID() *ProcessEventUpdateOne {
	peuo.mutation.ClearActivityID()
	return peuo
}

// SetActivityName sets the "activity_name" field.
func (peuo *ProcessEventUpdateOne) SetActivityName(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetActivityName(s)
	return peuo
}

// SetNillableActivityName sets the "activity_name" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableActivityName(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetActivityName(*s)
	}
	return peuo
}

// ClearActivityName clears the value of the "activity_name" field.
func (peuo *ProcessEventUpdateOne) ClearActivityName() *ProcessEventUpdateOne {
	peuo.mutation.ClearActivityName()
	return peuo
}

// SetActivityType sets the "activity_type" field.
func (peuo *ProcessEventUpdateOne) SetActivityType(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetActivityType(s)
	return peuo
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableActivityType(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetActivityType(*s)
	}
	return peuo
}

// ClearActivityType clears the value of the "activity_type" field.
func (peuo *ProcessEventUpdateOne) ClearActivityType() *ProcessEventUpdateOne {
	peuo.mutation.ClearActivityType()
	return peuo
}

// SetUserID sets the "user_id" field.
func (peuo *ProcessEventUpdateOne) SetUserID(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetUserID(s)
	return peuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableUserID(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetUserID(*s)
	}
	return peuo
}

// ClearUserID clears the value of the "user_id" field.
func (peuo *ProcessEventUpdateOne) ClearUserID() *ProcessEventUpdateOne {
	peuo.mutation.ClearUserID()
	return peuo
}

// SetTimestamp sets the "timestamp" field.
func (peuo *ProcessEventUpdateOne) SetTimestamp(t time.Time) *ProcessEventUpdateOne {
	peuo.mutation.SetTimestamp(t)
	return peuo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableTimestamp(t *time.Time) *ProcessEventUpdateOne {
	if t != nil {
		peuo.SetTimestamp(*t)
	}
	return peuo
}

// SetEventData sets the "event_data" field.
func (peuo *ProcessEventUpdateOne) SetEventData(m map[string]interface{}) *ProcessEventUpdateOne {
	peuo.mutation.SetEventData(m)
	return peuo
}

// ClearEventData clears the value of the "event_data" field.
func (peuo *ProcessEventUpdateOne) ClearEventData() *ProcessEventUpdateOne {
	peuo.mutation.ClearEventData()
	return peuo
}

// SetCorrelationID sets the "correlation_id" field.
func (peuo *ProcessEventUpdateOne) SetCorrelationID(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetCorrelationID(s)
	return peuo
}

// SetNillableCorrelationID sets the "correlation_id" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableCorrelationID(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetCorrelationID(*s)
	}
	return peuo
}

// ClearCorrelationID clears the value of the "correlation_id" field.
func (peuo *ProcessEventUpdateOne) ClearCorrelationID() *ProcessEventUpdateOne {
	peuo.mutation.ClearCorrelationID()
	return peuo
}

// SetMessageName sets the "message_name" field.
func (peuo *ProcessEventUpdateOne) SetMessageName(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetMessageName(s)
	return peuo
}

// SetNillableMessageName sets the "message_name" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableMessageName(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetMessageName(*s)
	}
	return peuo
}

// ClearMessageName clears the value of the "message_name" field.
func (peuo *ProcessEventUpdateOne) ClearMessageName() *ProcessEventUpdateOne {
	peuo.mutation.ClearMessageName()
	return peuo
}

// SetSignalName sets the "signal_name" field.
func (peuo *ProcessEventUpdateOne) SetSignalName(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetSignalName(s)
	return peuo
}

// SetNillableSignalName sets the "signal_name" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableSignalName(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetSignalName(*s)
	}
	return peuo
}

// ClearSignalName clears the value of the "signal_name" field.
func (peuo *ProcessEventUpdateOne) ClearSignalName() *ProcessEventUpdateOne {
	peuo.mutation.ClearSignalName()
	return peuo
}

// SetJobID sets the "job_id" field.
func (peuo *ProcessEventUpdateOne) SetJobID(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetJobID(s)
	return peuo
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableJobID(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetJobID(*s)
	}
	return peuo
}

// ClearJobID clears the value of the "job_id" field.
func (peuo *ProcessEventUpdateOne) ClearJobID() *ProcessEventUpdateOne {
	peuo.mutation.ClearJobID()
	return peuo
}

// SetJobType sets the "job_type" field.
func (peuo *ProcessEventUpdateOne) SetJobType(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetJobType(s)
	return peuo
}

// SetNillableJobType sets the "job_type" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableJobType(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetJobType(*s)
	}
	return peuo
}

// ClearJobType clears the value of the "job_type" field.
func (peuo *ProcessEventUpdateOne) ClearJobType() *ProcessEventUpdateOne {
	peuo.mutation.ClearJobType()
	return peuo
}

// SetJobHandlerType sets the "job_handler_type" field.
func (peuo *ProcessEventUpdateOne) SetJobHandlerType(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetJobHandlerType(s)
	return peuo
}

// SetNillableJobHandlerType sets the "job_handler_type" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableJobHandlerType(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetJobHandlerType(*s)
	}
	return peuo
}

// ClearJobHandlerType clears the value of the "job_handler_type" field.
func (peuo *ProcessEventUpdateOne) ClearJobHandlerType() *ProcessEventUpdateOne {
	peuo.mutation.ClearJobHandlerType()
	return peuo
}

// SetTenantID sets the "tenant_id" field.
func (peuo *ProcessEventUpdateOne) SetTenantID(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetTenantID(s)
	return peuo
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableTenantID(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetTenantID(*s)
	}
	return peuo
}

// SetDeploymentID sets the "deployment_id" field.
func (peuo *ProcessEventUpdateOne) SetDeploymentID(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetDeploymentID(s)
	return peuo
}

// SetNillableDeploymentID sets the "deployment_id" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableDeploymentID(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetDeploymentID(*s)
	}
	return peuo
}

// ClearDeploymentID clears the value of the "deployment_id" field.
func (peuo *ProcessEventUpdateOne) ClearDeploymentID() *ProcessEventUpdateOne {
	peuo.mutation.ClearDeploymentID()
	return peuo
}

// SetSequenceCounter sets the "sequence_counter" field.
func (peuo *ProcessEventUpdateOne) SetSequenceCounter(s string) *ProcessEventUpdateOne {
	peuo.mutation.SetSequenceCounter(s)
	return peuo
}

// SetNillableSequenceCounter sets the "sequence_counter" field if the given value is not nil.
func (peuo *ProcessEventUpdateOne) SetNillableSequenceCounter(s *string) *ProcessEventUpdateOne {
	if s != nil {
		peuo.SetSequenceCounter(*s)
	}
	return peuo
}

// ClearSequenceCounter clears the value of the "sequence_counter" field.
func (peuo *ProcessEventUpdateOne) ClearSequenceCounter() *ProcessEventUpdateOne {
	peuo.mutation.ClearSequenceCounter()
	return peuo
}

// Mutation returns the ProcessEventMutation object of the builder.
func (peuo *ProcessEventUpdateOne) Mutation() *ProcessEventMutation {
	return peuo.mutation
}

// Where appends a list predicates to the ProcessEventUpdate builder.
func (peuo *ProcessEventUpdateOne) Where(ps ...predicate.ProcessEvent) *ProcessEventUpdateOne {
	peuo.mutation.Where(ps...)
	return peuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (peuo *ProcessEventUpdateOne) Select(field string, fields ...string) *ProcessEventUpdateOne {
	peuo.fields = append([]string{field}, fields...)
	return peuo
}

// Save executes the query and returns the updated ProcessEvent entity.
func (peuo *ProcessEventUpdateOne) Save(ctx context.Context) (*ProcessEvent, error) {
	return withHooks(ctx, peuo.sqlSave, peuo.mutation, peuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peuo *ProcessEventUpdateOne) SaveX(ctx context.Context) *ProcessEvent {
	node, err := peuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (peuo *ProcessEventUpdateOne) Exec(ctx context.Context) error {
	_, err := peuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peuo *ProcessEventUpdateOne) ExecX(ctx context.Context) {
	if err := peuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (peuo *ProcessEventUpdateOne) check() error {
	if v, ok := peuo.mutation.EventType(); ok {
		if err := processevent.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.event_type": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.EventName(); ok {
		if err := processevent.EventNameValidator(v); err != nil {
			return &ValidationError{Name: "event_name", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.event_name": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.ExecutionID(); ok {
		if err := processevent.ExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "execution_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.execution_id": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.ProcessDefinitionKey(); ok {
		if err := processevent.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.process_definition_key": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.ActivityID(); ok {
		if err := processevent.ActivityIDValidator(v); err != nil {
			return &ValidationError{Name: "activity_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.activity_id": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.ActivityName(); ok {
		if err := processevent.ActivityNameValidator(v); err != nil {
			return &ValidationError{Name: "activity_name", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.activity_name": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.ActivityType(); ok {
		if err := processevent.ActivityTypeValidator(v); err != nil {
			return &ValidationError{Name: "activity_type", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.activity_type": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.UserID(); ok {
		if err := processevent.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.user_id": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.CorrelationID(); ok {
		if err := processevent.CorrelationIDValidator(v); err != nil {
			return &ValidationError{Name: "correlation_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.correlation_id": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.MessageName(); ok {
		if err := processevent.MessageNameValidator(v); err != nil {
			return &ValidationError{Name: "message_name", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.message_name": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.SignalName(); ok {
		if err := processevent.SignalNameValidator(v); err != nil {
			return &ValidationError{Name: "signal_name", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.signal_name": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.JobID(); ok {
		if err := processevent.JobIDValidator(v); err != nil {
			return &ValidationError{Name: "job_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.job_id": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.JobType(); ok {
		if err := processevent.JobTypeValidator(v); err != nil {
			return &ValidationError{Name: "job_type", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.job_type": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.JobHandlerType(); ok {
		if err := processevent.JobHandlerTypeValidator(v); err != nil {
			return &ValidationError{Name: "job_handler_type", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.job_handler_type": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.TenantID(); ok {
		if err := processevent.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.tenant_id": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.DeploymentID(); ok {
		if err := processevent.DeploymentIDValidator(v); err != nil {
			return &ValidationError{Name: "deployment_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.deployment_id": %w`, err)}
		}
	}
	if v, ok := peuo.mutation.SequenceCounter(); ok {
		if err := processevent.SequenceCounterValidator(v); err != nil {
			return &ValidationError{Name: "sequence_counter", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.sequence_counter": %w`, err)}
		}
	}
	return nil
}

func (peuo *ProcessEventUpdateOne) sqlSave(ctx context.Context) (_node *ProcessEvent, err error) {
	if err := peuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(processevent.Table, processevent.Columns, sqlgraph.NewFieldSpec(processevent.FieldID, field.TypeInt64))
	id, ok := peuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProcessEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := peuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, processevent.FieldID)
		for _, f := range fields {
			if !processevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != processevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := peuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peuo.mutation.EventType(); ok {
		_spec.SetField(processevent.FieldEventType, field.TypeString, value)
	}
	if value, ok := peuo.mutation.EventName(); ok {
		_spec.SetField(processevent.FieldEventName, field.TypeString, value)
	}
	if peuo.mutation.EventNameCleared() {
		_spec.ClearField(processevent.FieldEventName, field.TypeString)
	}
	if value, ok := peuo.mutation.ExecutionID(); ok {
		_spec.SetField(processevent.FieldExecutionID, field.TypeString, value)
	}
	if peuo.mutation.ExecutionIDCleared() {
		_spec.ClearField(processevent.FieldExecutionID, field.TypeString)
	}
	if value, ok := peuo.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processevent.FieldProcessInstanceID, field.TypeInt64, value)
	}
	if value, ok := peuo.mutation.AddedProcessInstanceID(); ok {
		_spec.AddField(processevent.FieldProcessInstanceID, field.TypeInt64, value)
	}
	if peuo.mutation.ProcessInstanceIDCleared() {
		_spec.ClearField(processevent.FieldProcessInstanceID, field.TypeInt64)
	}
	if value, ok := peuo.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(processevent.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if value, ok := peuo.mutation.AddedProcessDefinitionID(); ok {
		_spec.AddField(processevent.FieldProcessDefinitionID, field.TypeInt64, value)
	}
	if peuo.mutation.ProcessDefinitionIDCleared() {
		_spec.ClearField(processevent.FieldProcessDefinitionID, field.TypeInt64)
	}
	if value, ok := peuo.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(processevent.FieldProcessDefinitionKey, field.TypeString, value)
	}
	if peuo.mutation.ProcessDefinitionKeyCleared() {
		_spec.ClearField(processevent.FieldProcessDefinitionKey, field.TypeString)
	}
	if value, ok := peuo.mutation.TaskID(); ok {
		_spec.SetField(processevent.FieldTaskID, field.TypeInt64, value)
	}
	if value, ok := peuo.mutation.AddedTaskID(); ok {
		_spec.AddField(processevent.FieldTaskID, field.TypeInt64, value)
	}
	if peuo.mutation.TaskIDCleared() {
		_spec.ClearField(processevent.FieldTaskID, field.TypeInt64)
	}
	if value, ok := peuo.mutation.ActivityID(); ok {
		_spec.SetField(processevent.FieldActivityID, field.TypeString, value)
	}
	if peuo.mutation.ActivityIDCleared() {
		_spec.ClearField(processevent.FieldActivityID, field.TypeString)
	}
	if value, ok := peuo.mutation.ActivityName(); ok {
		_spec.SetField(processevent.FieldActivityName, field.TypeString, value)
	}
	if peuo.mutation.ActivityNameCleared() {
		_spec.ClearField(processevent.FieldActivityName, field.TypeString)
	}
	if value, ok := peuo.mutation.ActivityType(); ok {
		_spec.SetField(processevent.FieldActivityType, field.TypeString, value)
	}
	if peuo.mutation.ActivityTypeCleared() {
		_spec.ClearField(processevent.FieldActivityType, field.TypeString)
	}
	if value, ok := peuo.mutation.UserID(); ok {
		_spec.SetField(processevent.FieldUserID, field.TypeString, value)
	}
	if peuo.mutation.UserIDCleared() {
		_spec.ClearField(processevent.FieldUserID, field.TypeString)
	}
	if value, ok := peuo.mutation.Timestamp(); ok {
		_spec.SetField(processevent.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := peuo.mutation.EventData(); ok {
		_spec.SetField(processevent.FieldEventData, field.TypeJSON, value)
	}
	if peuo.mutation.EventDataCleared() {
		_spec.ClearField(processevent.FieldEventData, field.TypeJSON)
	}
	if value, ok := peuo.mutation.CorrelationID(); ok {
		_spec.SetField(processevent.FieldCorrelationID, field.TypeString, value)
	}
	if peuo.mutation.CorrelationIDCleared() {
		_spec.ClearField(processevent.FieldCorrelationID, field.TypeString)
	}
	if value, ok := peuo.mutation.MessageName(); ok {
		_spec.SetField(processevent.FieldMessageName, field.TypeString, value)
	}
	if peuo.mutation.MessageNameCleared() {
		_spec.ClearField(processevent.FieldMessageName, field.TypeString)
	}
	if value, ok := peuo.mutation.SignalName(); ok {
		_spec.SetField(processevent.FieldSignalName, field.TypeString, value)
	}
	if peuo.mutation.SignalNameCleared() {
		_spec.ClearField(processevent.FieldSignalName, field.TypeString)
	}
	if value, ok := peuo.mutation.JobID(); ok {
		_spec.SetField(processevent.FieldJobID, field.TypeString, value)
	}
	if peuo.mutation.JobIDCleared() {
		_spec.ClearField(processevent.FieldJobID, field.TypeString)
	}
	if value, ok := peuo.mutation.JobType(); ok {
		_spec.SetField(processevent.FieldJobType, field.TypeString, value)
	}
	if peuo.mutation.JobTypeCleared() {
		_spec.ClearField(processevent.FieldJobType, field.TypeString)
	}
	if value, ok := peuo.mutation.JobHandlerType(); ok {
		_spec.SetField(processevent.FieldJobHandlerType, field.TypeString, value)
	}
	if peuo.mutation.JobHandlerTypeCleared() {
		_spec.ClearField(processevent.FieldJobHandlerType, field.TypeString)
	}
	if value, ok := peuo.mutation.TenantID(); ok {
		_spec.SetField(processevent.FieldTenantID, field.TypeString, value)
	}
	if value, ok := peuo.mutation.DeploymentID(); ok {
		_spec.SetField(processevent.FieldDeploymentID, field.TypeString, value)
	}
	if peuo.mutation.DeploymentIDCleared() {
		_spec.ClearField(processevent.FieldDeploymentID, field.TypeString)
	}
	if value, ok := peuo.mutation.SequenceCounter(); ok {
		_spec.SetField(processevent.FieldSequenceCounter, field.TypeString, value)
	}
	if peuo.mutation.SequenceCounterCleared() {
		_spec.ClearField(processevent.FieldSequenceCounter, field.TypeString)
	}
	_node = &ProcessEvent{config: peuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, peuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{processevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	peuo.mutation.done = true
	return _node, nil
}
