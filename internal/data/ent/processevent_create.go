// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/workflow-engine/workflow-engine/internal/data/ent/processevent"
)

// ProcessEventCreate is the builder for creating a ProcessEvent entity.
type ProcessEventCreate struct {
	config
	mutation *ProcessEventMutation
	hooks    []Hook
}

// SetEventType sets the "event_type" field.
func (pec *ProcessEventCreate) SetEventType(s string) *ProcessEventCreate {
	pec.mutation.SetEventType(s)
	return pec
}

// SetEventName sets the "event_name" field.
func (pec *ProcessEventCreate) SetEventName(s string) *ProcessEventCreate {
	pec.mutation.SetEventName(s)
	return pec
}

// SetNillableEventName sets the "event_name" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableEventName(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetEventName(*s)
	}
	return pec
}

// SetExecutionID sets the "execution_id" field.
func (pec *ProcessEventCreate) SetExecutionID(s string) *ProcessEventCreate {
	pec.mutation.SetExecutionID(s)
	return pec
}

// SetNillableExecutionID sets the "execution_id" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableExecutionID(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetExecutionID(*s)
	}
	return pec
}

// SetProcessInstanceID sets the "process_instance_id" field.
func (pec *ProcessEventCreate) SetProcessInstanceID(i int64) *ProcessEventCreate {
	pec.mutation.SetProcessInstanceID(i)
	return pec
}

// SetNillableProcessInstanceID sets the "process_instance_id" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableProcessInstanceID(i *int64) *ProcessEventCreate {
	if i != nil {
		pec.SetProcessInstanceID(*i)
	}
	return pec
}

// SetProcessDefinitionID sets the "process_definition_id" field.
func (pec *ProcessEventCreate) SetProcessDefinitionID(i int64) *ProcessEventCreate {
	pec.mutation.SetProcessDefinitionID(i)
	return pec
}

// SetNillableProcessDefinitionID sets the "process_definition_id" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableProcessDefinitionID(i *int64) *ProcessEventCreate {
	if i != nil {
		pec.SetProcessDefinitionID(*i)
	}
	return pec
}

// SetProcessDefinitionKey sets the "process_definition_key" field.
func (pec *ProcessEventCreate) SetProcessDefinitionKey(s string) *ProcessEventCreate {
	pec.mutation.SetProcessDefinitionKey(s)
	return pec
}

// SetNillableProcessDefinitionKey sets the "process_definition_key" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableProcessDefinitionKey(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetProcessDefinitionKey(*s)
	}
	return pec
}

// SetTaskID sets the "task_id" field.
func (pec *ProcessEventCreate) SetTaskID(i int64) *ProcessEventCreate {
	pec.mutation.SetTaskID(i)
	return pec
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableTaskID(i *int64) *ProcessEventCreate {
	if i != nil {
		pec.SetTaskID(*i)
	}
	return pec
}

// SetActivityID sets the "activity_id" field.
func (pec *ProcessEventCreate) SetActivityID(s string) *ProcessEventCreate {
	pec.mutation.SetActivityID(s)
	return pec
}

// SetNillableActivityID sets the "activity_id" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableActivityID(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetActivityID(*s)
	}
	return pec
}

// SetActivityName sets the "activity_name" field.
func (pec *ProcessEventCreate) SetActivityName(s string) *ProcessEventCreate {
	pec.mutation.SetActivityName(s)
	return pec
}

// SetNillableActivityName sets the "activity_name" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableActivityName(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetActivityName(*s)
	}
	return pec
}

// SetActivityType sets the "activity_type" field.
func (pec *ProcessEventCreate) SetActivityType(s string) *ProcessEventCreate {
	pec.mutation.SetActivityType(s)
	return pec
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableActivityType(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetActivityType(*s)
	}
	return pec
}

// SetUserID sets the "user_id" field.
func (pec *ProcessEventCreate) SetUserID(s string) *ProcessEventCreate {
	pec.mutation.SetUserID(s)
	return pec
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableUserID(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetUserID(*s)
	}
	return pec
}

// SetTimestamp sets the "timestamp" field.
func (pec *ProcessEventCreate) SetTimestamp(t time.Time) *ProcessEventCreate {
	pec.mutation.SetTimestamp(t)
	return pec
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableTimestamp(t *time.Time) *ProcessEventCreate {
	if t != nil {
		pec.SetTimestamp(*t)
	}
	return pec
}

// SetEventData sets the "event_data" field.
func (pec *ProcessEventCreate) SetEventData(m map[string]interface{}) *ProcessEventCreate {
	pec.mutation.SetEventData(m)
	return pec
}

// SetCorrelationID sets the "correlation_id" field.
func (pec *ProcessEventCreate) SetCorrelationID(s string) *ProcessEventCreate {
	pec.mutation.SetCorrelationID(s)
	return pec
}

// SetNillableCorrelationID sets the "correlation_id" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableCorrelationID(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetCorrelationID(*s)
	}
	return pec
}

// SetMessageName sets the "message_name" field.
func (pec *ProcessEventCreate) SetMessageName(s string) *ProcessEventCreate {
	pec.mutation.SetMessageName(s)
	return pec
}

// SetNillableMessageName sets the "message_name" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableMessageName(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetMessageName(*s)
	}
	return pec
}

// SetSignalName sets the "signal_name" field.
func (pec *ProcessEventCreate) SetSignalName(s string) *ProcessEventCreate {
	pec.mutation.SetSignalName(s)
	return pec
}

// SetNillableSignalName sets the "signal_name" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableSignalName(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetSignalName(*s)
	}
	return pec
}

// SetJobID sets the "job_id" field.
func (pec *ProcessEventCreate) SetJobID(s string) *ProcessEventCreate {
	pec.mutation.SetJobID(s)
	return pec
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableJobID(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetJobID(*s)
	}
	return pec
}

// SetJobType sets the "job_type" field.
func (pec *ProcessEventCreate) SetJobType(s string) *ProcessEventCreate {
	pec.mutation.SetJobType(s)
	return pec
}

// SetNillableJobType sets the "job_type" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableJobType(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetJobType(*s)
	}
	return pec
}

// SetJobHandlerType sets the "job_handler_type" field.
func (pec *ProcessEventCreate) SetJobHandlerType(s string) *ProcessEventCreate {
	pec.mutation.SetJobHandlerType(s)
	return pec
}

// SetNillableJobHandlerType sets the "job_handler_type" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableJobHandlerType(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetJobHandlerType(*s)
	}
	return pec
}

// SetTenantID sets the "tenant_id" field.
func (pec *ProcessEventCreate) SetTenantID(s string) *ProcessEventCreate {
	pec.mutation.SetTenantID(s)
	return pec
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableTenantID(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetTenantID(*s)
	}
	return pec
}

// SetDeploymentID sets the "deployment_id" field.
func (pec *ProcessEventCreate) SetDeploymentID(s string) *ProcessEventCreate {
	pec.mutation.SetDeploymentID(s)
	return pec
}

// SetNillableDeploymentID sets the "deployment_id" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableDeploymentID(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetDeploymentID(*s)
	}
	return pec
}

// SetSequenceCounter sets the "sequence_counter" field.
func (pec *ProcessEventCreate) SetSequenceCounter(s string) *ProcessEventCreate {
	pec.mutation.SetSequenceCounter(s)
	return pec
}

// SetNillableSequenceCounter sets the "sequence_counter" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableSequenceCounter(s *string) *ProcessEventCreate {
	if s != nil {
		pec.SetSequenceCounter(*s)
	}
	return pec
}

// SetCreatedAt sets the "created_at" field.
func (pec *ProcessEventCreate) SetCreatedAt(t time.Time) *ProcessEventCreate {
	pec.mutation.SetCreatedAt(t)
	return pec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pec *ProcessEventCreate) SetNillableCreatedAt(t *time.Time) *ProcessEventCreate {
	if t != nil {
		pec.SetCreatedAt(*t)
	}
	return pec
}

// SetID sets the "id" field.
func (pec *ProcessEventCreate) SetID(i int64) *ProcessEventCreate {
	pec.mutation.SetID(i)
	return pec
}

// Mutation returns the ProcessEventMutation object of the builder.
func (pec *ProcessEventCreate) Mutation() *ProcessEventMutation {
	return pec.mutation
}

// Save creates the ProcessEvent in the database.
func (pec *ProcessEventCreate) Save(ctx context.Context) (*ProcessEvent, error) {
	pec.defaults()
	return withHooks(ctx, pec.sqlSave, pec.mutation, pec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pec *ProcessEventCreate) SaveX(ctx context.Context) *ProcessEvent {
	v, err := pec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pec *ProcessEventCreate) Exec(ctx context.Context) error {
	_, err := pec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pec *ProcessEventCreate) ExecX(ctx context.Context) {
	if err := pec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pec *ProcessEventCreate) defaults() {
	if _, ok := pec.mutation.Timestamp(); !ok {
		v := processevent.DefaultTimestamp()
		pec.mutation.SetTimestamp(v)
	}
	if _, ok := pec.mutation.TenantID(); !ok {
		v := processevent.DefaultTenantID
		pec.mutation.SetTenantID(v)
	}
	if _, ok := pec.mutation.CreatedAt(); !ok {
		v := processevent.DefaultCreatedAt()
		pec.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pec *ProcessEventCreate) check() error {
	if _, ok := pec.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`ent: missing required field "ProcessEvent.event_type"`)}
	}
	if v, ok := pec.mutation.EventType(); ok {
		if err := processevent.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.event_type": %w`, err)}
		}
	}
	if v, ok := pec.mutation.EventName(); ok {
		if err := processevent.EventNameValidator(v); err != nil {
			return &ValidationError{Name: "event_name", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.event_name": %w`, err)}
		}
	}
	if v, ok := pec.mutation.ExecutionID(); ok {
		if err := processevent.ExecutionIDValidator(v); err != nil {
			return &ValidationError{Name: "execution_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.execution_id": %w`, err)}
		}
	}
	if v, ok := pec.mutation.ProcessDefinitionKey(); ok {
		if err := processevent.ProcessDefinitionKeyValidator(v); err != nil {
			return &ValidationError{Name: "process_definition_key", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.process_definition_key": %w`, err)}
		}
	}
	if v, ok := pec.mutation.ActivityID(); ok {
		if err := processevent.ActivityIDValidator(v); err != nil {
			return &ValidationError{Name: "activity_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.activity_id": %w`, err)}
		}
	}
	if v, ok := pec.mutation.ActivityName(); ok {
		if err := processevent.ActivityNameValidator(v); err != nil {
			return &ValidationError{Name: "activity_name", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.activity_name": %w`, err)}
		}
	}
	if v, ok := pec.mutation.ActivityType(); ok {
		if err := processevent.ActivityTypeValidator(v); err != nil {
			return &ValidationError{Name: "activity_type", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.activity_type": %w`, err)}
		}
	}
	if v, ok := pec.mutation.UserID(); ok {
		if err := processevent.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.user_id": %w`, err)}
		}
	}
	if _, ok := pec.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "ProcessEvent.timestamp"`)}
	}
	if v, ok := pec.mutation.CorrelationID(); ok {
		if err := processevent.CorrelationIDValidator(v); err != nil {
			return &ValidationError{Name: "correlation_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.correlation_id": %w`, err)}
		}
	}
	if v, ok := pec.mutation.MessageName(); ok {
		if err := processevent.MessageNameValidator(v); err != nil {
			return &ValidationError{Name: "message_name", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.message_name": %w`, err)}
		}
	}
	if v, ok := pec.mutation.SignalName(); ok {
		if err := processevent.SignalNameValidator(v); err != nil {
			return &ValidationError{Name: "signal_name", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.signal_name": %w`, err)}
		}
	}
	if v, ok := pec.mutation.JobID(); ok {
		if err := processevent.JobIDValidator(v); err != nil {
			return &ValidationError{Name: "job_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.job_id": %w`, err)}
		}
	}
	if v, ok := pec.mutation.JobType(); ok {
		if err := processevent.JobTypeValidator(v); err != nil {
			return &ValidationError{Name: "job_type", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.job_type": %w`, err)}
		}
	}
	if v, ok := pec.mutation.JobHandlerType(); ok {
		if err := processevent.JobHandlerTypeValidator(v); err != nil {
			return &ValidationError{Name: "job_handler_type", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.job_handler_type": %w`, err)}
		}
	}
	if _, ok := pec.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "ProcessEvent.tenant_id"`)}
	}
	if v, ok := pec.mutation.TenantID(); ok {
		if err := processevent.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.tenant_id": %w`, err)}
		}
	}
	if v, ok := pec.mutation.DeploymentID(); ok {
		if err := processevent.DeploymentIDValidator(v); err != nil {
			return &ValidationError{Name: "deployment_id", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.deployment_id": %w`, err)}
		}
	}
	if v, ok := pec.mutation.SequenceCounter(); ok {
		if err := processevent.SequenceCounterValidator(v); err != nil {
			return &ValidationError{Name: "sequence_counter", err: fmt.Errorf(`ent: validator failed for field "ProcessEvent.sequence_counter": %w`, err)}
		}
	}
	if _, ok := pec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessEvent.created_at"`)}
	}
	return nil
}

func (pec *ProcessEventCreate) sqlSave(ctx context.Context) (*ProcessEvent, error) {
	if err := pec.check(); err != nil {
		return nil, err
	}
	_node, _spec := pec.createSpec()
	if err := sqlgraph.CreateNode(ctx, pec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pec.mutation.id = &_node.ID
	pec.mutation.done = true
	return _node, nil
}

func (pec *ProcessEventCreate) createSpec() (*ProcessEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessEvent{config: pec.config}
		_spec = sqlgraph.NewCreateSpec(processevent.Table, sqlgraph.NewFieldSpec(processevent.FieldID, field.TypeInt64))
	)
	if id, ok := pec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pec.mutation.EventType(); ok {
		_spec.SetField(processevent.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := pec.mutation.EventName(); ok {
		_spec.SetField(processevent.FieldEventName, field.TypeString, value)
		_node.EventName = value
	}
	if value, ok := pec.mutation.ExecutionID(); ok {
		_spec.SetField(processevent.FieldExecutionID, field.TypeString, value)
		_node.ExecutionID = value
	}
	if value, ok := pec.mutation.ProcessInstanceID(); ok {
		_spec.SetField(processevent.FieldProcessInstanceID, field.TypeInt64, value)
		_node.ProcessInstanceID = value
	}
	if value, ok := pec.mutation.ProcessDefinitionID(); ok {
		_spec.SetField(processevent.FieldProcessDefinitionID, field.TypeInt64, value)
		_node.ProcessDefinitionID = value
	}
	if value, ok := pec.mutation.ProcessDefinitionKey(); ok {
		_spec.SetField(processevent.FieldProcessDefinitionKey, field.TypeString, value)
		_node.ProcessDefinitionKey = value
	}
	if value, ok := pec.mutation.TaskID(); ok {
		_spec.SetField(processevent.FieldTaskID, field.TypeInt64, value)
		_node.TaskID = value
	}
	if value, ok := pec.mutation.ActivityID(); ok {
		_spec.SetField(processevent.FieldActivityID, field.TypeString, value)
		_node.ActivityID = value
	}
	if value, ok := pec.mutation.ActivityName(); ok {
		_spec.SetField(processevent.FieldActivityName, field.TypeString, value)
		_node.ActivityName = value
	}
	if value, ok := pec.mutation.ActivityType(); ok {
		_spec.SetField(processevent.FieldActivityType, field.TypeString, value)
		_node.ActivityType = value
	}
	if value, ok := pec.mutation.UserID(); ok {
		_spec.SetField(processevent.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := pec.mutation.Timestamp(); ok {
		_spec.SetField(processevent.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := pec.mutation.EventData(); ok {
		_spec.SetField(processevent.FieldEventData, field.TypeJSON, value)
		_node.EventData = value
	}
	if value, ok := pec.mutation.CorrelationID(); ok {
		_spec.SetField(processevent.FieldCorrelationID, field.TypeString, value)
		_node.CorrelationID = value
	}
	if value, ok := pec.mutation.MessageName(); ok {
		_spec.SetField(processevent.FieldMessageName, field.TypeString, value)
		_node.MessageName = value
	}
	if value, ok := pec.mutation.SignalName(); ok {
		_spec.SetField(processevent.FieldSignalName, field.TypeString, value)
		_node.SignalName = value
	}
	if value, ok := pec.mutation.JobID(); ok {
		_spec.SetField(processevent.FieldJobID, field.TypeString, value)
		_node.JobID = value
	}
	if value, ok := pec.mutation.JobType(); ok {
		_spec.SetField(processevent.FieldJobType, field.TypeString, value)
		_node.JobType = value
	}
	if value, ok := pec.mutation.JobHandlerType(); ok {
		_spec.SetField(processevent.FieldJobHandlerType, field.TypeString, value)
		_node.JobHandlerType = value
	}
	if value, ok := pec.mutation.TenantID(); ok {
		_spec.SetField(processevent.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := pec.mutation.DeploymentID(); ok {
		_spec.SetField(processevent.FieldDeploymentID, field.TypeString, value)
		_node.DeploymentID = value
	}
	if value, ok := pec.mutation.SequenceCounter(); ok {
		_spec.SetField(processevent.FieldSequenceCounter, field.TypeString, value)
		_node.SequenceCounter = value
	}
	if value, ok := pec.mutation.CreatedAt(); ok {
		_spec.SetField(processevent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// ProcessEventCreateBulk is the builder for creating many ProcessEvent entities in bulk.
type ProcessEventCreateBulk struct {
	config
	err      error
	builders []*ProcessEventCreate
}

// Save creates the ProcessEvent entities in the database.
func (pecb *ProcessEventCreateBulk) Save(ctx context.Context) ([]*ProcessEvent, error) {
	if pecb.err != nil {
		return nil, pecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pecb.builders))
	nodes := make([]*ProcessEvent, len(pecb.builders))
	mutators := make([]Mutator, len(pecb.builders))
	for i := range pecb.builders {
		func(i int, root context.Context) {
			builder := pecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pecb *ProcessEventCreateBulk) SaveX(ctx context.Context) []*ProcessEvent {
	v, err := pecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pecb *ProcessEventCreateBulk) Exec(ctx context.Context) error {
	_, err := pecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pecb *ProcessEventCreateBulk) ExecX(ctx context.Context) {
	if err := pecb.Exec(ctx); err != nil {
		panic(err)
	}
}
